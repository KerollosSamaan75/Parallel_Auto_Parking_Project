
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0800eda8  0800eda8  0001eda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f55c  0800f55c  00020254  2**0
                  CONTENTS
  4 .ARM          00000000  0800f55c  0800f55c  00020254  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f55c  0800f55c  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f55c  0800f55c  0001f55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f560  0800f560  0001f560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800f564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020254  2**0
                  CONTENTS
 10 .bss          000027bc  20000258  20000258  00020258  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002a14  20002a14  00020258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fa3c  00000000  00000000  0002030a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000490c  00000000  00000000  0003fd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a0  00000000  00000000  00044658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000123f  00000000  00000000  00045df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002550f  00000000  00000000  00047037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000203ca  00000000  00000000  0006c546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d78a6  00000000  00000000  0008c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000070f8  00000000  00000000  001641b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0016b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed8c 	.word	0x0800ed8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800ed8c 	.word	0x0800ed8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Car_Conrol_Mode */
  Car_Conrol_ModeHandle = osMutexNew(&Car_Conrol_Mode_attributes);
 8000bfc:	4819      	ldr	r0, [pc, #100]	; (8000c64 <MX_FREERTOS_Init+0x6c>)
 8000bfe:	f008 facf 	bl	80091a0 <osMutexNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_FREERTOS_Init+0x70>)
 8000c06:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MX_FREERTOS_Init+0x74>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_FREERTOS_Init+0x78>)
 8000c0e:	f008 f83f 	bl	8008c90 <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_FREERTOS_Init+0x7c>)
 8000c16:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_read */
  ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <MX_FREERTOS_Init+0x80>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <MX_FREERTOS_Init+0x84>)
 8000c1e:	f008 f837 	bl	8008c90 <osThreadNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <MX_FREERTOS_Init+0x88>)
 8000c26:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 8000c28:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <MX_FREERTOS_Init+0x8c>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4816      	ldr	r0, [pc, #88]	; (8000c88 <MX_FREERTOS_Init+0x90>)
 8000c2e:	f008 f82f 	bl	8008c90 <osThreadNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <MX_FREERTOS_Init+0x94>)
 8000c36:	6013      	str	r3, [r2, #0]

  /* creation of Automatic_Parking */
  Automatic_ParkingHandle = osThreadNew(RTOS_Automatic_Parking, NULL, &Automatic_Parking_attributes);
 8000c38:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_FREERTOS_Init+0x98>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4815      	ldr	r0, [pc, #84]	; (8000c94 <MX_FREERTOS_Init+0x9c>)
 8000c3e:	f008 f827 	bl	8008c90 <osThreadNew>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <MX_FREERTOS_Init+0xa0>)
 8000c46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of Car_mode */
  Car_modeHandle = osEventFlagsNew(&Car_mode_attributes);
 8000c48:	4814      	ldr	r0, [pc, #80]	; (8000c9c <MX_FREERTOS_Init+0xa4>)
 8000c4a:	f008 f987 	bl	8008f5c <osEventFlagsNew>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_FREERTOS_Init+0xa8>)
 8000c52:	6013      	str	r3, [r2, #0]

  /* creation of Parking_side */
  Parking_sideHandle = osEventFlagsNew(&Parking_side_attributes);
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_FREERTOS_Init+0xac>)
 8000c56:	f008 f981 	bl	8008f5c <osEventFlagsNew>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <MX_FREERTOS_Init+0xb0>)
 8000c5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	0800f184 	.word	0x0800f184
 8000c68:	20000284 	.word	0x20000284
 8000c6c:	0800f0f4 	.word	0x0800f0f4
 8000c70:	08000cad 	.word	0x08000cad
 8000c74:	20000274 	.word	0x20000274
 8000c78:	0800f118 	.word	0x0800f118
 8000c7c:	08000ced 	.word	0x08000ced
 8000c80:	20000278 	.word	0x20000278
 8000c84:	0800f13c 	.word	0x0800f13c
 8000c88:	08000dfd 	.word	0x08000dfd
 8000c8c:	2000027c 	.word	0x2000027c
 8000c90:	0800f160 	.word	0x0800f160
 8000c94:	08000ea9 	.word	0x08000ea9
 8000c98:	20000280 	.word	0x20000280
 8000c9c:	0800f194 	.word	0x0800f194
 8000ca0:	20000288 	.word	0x20000288
 8000ca4:	0800f1a4 	.word	0x0800f1a4
 8000ca8:	2000028c 	.word	0x2000028c

08000cac <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
	ECU_Bluetooth_ReciveData(&bluetooth);
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <DefaultTask+0x34>)
 8000cb6:	f002 f8c7 	bl	8002e48 <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <DefaultTask+0x38>)
 8000cbc:	f002 f8de 	bl	8002e7c <ECU_Motor_GeneratePWM>

  /* Infinite loop */
  for(;;)
  {
	  //printf("DefaultTask is Running\n");
	  osThreadSuspend(Automatic_ParkingHandle);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <DefaultTask+0x3c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f008 f8b3 	bl	8008e30 <osThreadSuspend>

	  /* Suspend itself */
	  osThreadSuspend(osThreadGetId());
 8000cca:	f008 f88b 	bl	8008de4 <osThreadGetId>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 f8ad 	bl	8008e30 <osThreadSuspend>
    osDelay(1000);
 8000cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cda:	f008 f911 	bl	8008f00 <osDelay>
	  osThreadSuspend(Automatic_ParkingHandle);
 8000cde:	e7ef      	b.n	8000cc0 <DefaultTask+0x14>
 8000ce0:	20000058 	.word	0x20000058
 8000ce4:	20000048 	.word	0x20000048
 8000ce8:	20000280 	.word	0x20000280

08000cec <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
		  ECU_Busser_StopPWM(&busser);
	  }*/
	  //printf("IR_Right_Rear in = %d\n",ECU_IR_IsActive(&IR_Right_Rear));
	  //printf("IR_Left_Rear in = %d\n",ECU_IR_IsActive(&IR_Left_Rear));

	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000cf4:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <RTOS_Ultrasonics_Read+0xd0>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b77      	cmp	r3, #119	; 0x77
 8000cfa:	d10a      	bne.n	8000d12 <RTOS_Ultrasonics_Read+0x26>
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <RTOS_Ultrasonics_Read+0xd4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	4618      	mov	r0, r3
 8000d04:	f008 f9d4 	bl	80090b0 <osEventFlagsClear>
		  osThreadSuspend(Automatic_ParkingHandle);
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <RTOS_Ultrasonics_Read+0xd8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f008 f88f 	bl	8008e30 <osThreadSuspend>
	  }
	  else{/* DO NOTHING */}

	  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == RIGHT_PARKING_SIDE)
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <RTOS_Ultrasonics_Read+0xd4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f008 fa0e 	bl	8009138 <osEventFlagsGet>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10c      	bne.n	8000d40 <RTOS_Ultrasonics_Read+0x54>
	  {
		  ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 8000d26:	4828      	ldr	r0, [pc, #160]	; (8000dc8 <RTOS_Ultrasonics_Read+0xdc>)
 8000d28:	f002 fbc0 	bl	80034ac <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000d2c:	4827      	ldr	r0, [pc, #156]	; (8000dcc <RTOS_Ultrasonics_Read+0xe0>)
 8000d2e:	f002 fbbd 	bl	80034ac <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 8000d32:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <RTOS_Ultrasonics_Read+0xe4>)
 8000d34:	f002 fbba 	bl	80034ac <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 8000d38:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <RTOS_Ultrasonics_Read+0xe8>)
 8000d3a:	f002 fbb7 	bl	80034ac <ECU_Ultrasonic_Read>
 8000d3e:	e015      	b.n	8000d6c <RTOS_Ultrasonics_Read+0x80>
	  }
	  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == LEFT_PARKING_SIDE)
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <RTOS_Ultrasonics_Read+0xd4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f008 f9f7 	bl	8009138 <osEventFlagsGet>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d10b      	bne.n	8000d6c <RTOS_Ultrasonics_Read+0x80>
	  {
		  ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 8000d54:	4820      	ldr	r0, [pc, #128]	; (8000dd8 <RTOS_Ultrasonics_Read+0xec>)
 8000d56:	f002 fba9 	bl	80034ac <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <RTOS_Ultrasonics_Read+0xe0>)
 8000d5c:	f002 fba6 	bl	80034ac <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 8000d60:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <RTOS_Ultrasonics_Read+0xe4>)
 8000d62:	f002 fba3 	bl	80034ac <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <RTOS_Ultrasonics_Read+0xf0>)
 8000d68:	f002 fba0 	bl	80034ac <ECU_Ultrasonic_Read>
	  else{}

	  //ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
	  //ECU_Ultrasonic_Read(&LeftRear_ultrasonic);

	  printf("Front_ultrasonic distance is %f\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d72:	481c      	ldr	r0, [pc, #112]	; (8000de4 <RTOS_Ultrasonics_Read+0xf8>)
 8000d74:	f00b ffb2 	bl	800ccdc <iprintf>
	  printf("RightFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d7e:	481a      	ldr	r0, [pc, #104]	; (8000de8 <RTOS_Ultrasonics_Read+0xfc>)
 8000d80:	f00b ffac 	bl	800ccdc <iprintf>
	  printf("RightRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <RTOS_Ultrasonics_Read+0x100>)
 8000d8c:	f00b ffa6 	bl	800ccdc <iprintf>
	  printf("LeftFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d92:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000d96:	4816      	ldr	r0, [pc, #88]	; (8000df0 <RTOS_Ultrasonics_Read+0x104>)
 8000d98:	f00b ffa0 	bl	800ccdc <iprintf>
	  printf("LeftRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000da2:	4814      	ldr	r0, [pc, #80]	; (8000df4 <RTOS_Ultrasonics_Read+0x108>)
 8000da4:	f00b ff9a 	bl	800ccdc <iprintf>
	  printf("Rear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000daa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <RTOS_Ultrasonics_Read+0x10c>)
 8000db0:	f00b ff94 	bl	800ccdc <iprintf>

    osDelay(70);
 8000db4:	2046      	movs	r0, #70	; 0x46
 8000db6:	f008 f8a3 	bl	8008f00 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000dba:	e79b      	b.n	8000cf4 <RTOS_Ultrasonics_Read+0x8>
 8000dbc:	20000064 	.word	0x20000064
 8000dc0:	20000288 	.word	0x20000288
 8000dc4:	20000280 	.word	0x20000280
 8000dc8:	20000018 	.word	0x20000018
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	2000003c 	.word	0x2000003c
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000030 	.word	0x20000030
 8000ddc:	20000024 	.word	0x20000024
 8000de0:	20000658 	.word	0x20000658
 8000de4:	0800ee18 	.word	0x0800ee18
 8000de8:	0800ee3c 	.word	0x0800ee3c
 8000dec:	0800ee64 	.word	0x0800ee64
 8000df0:	0800ee8c 	.word	0x0800ee8c
 8000df4:	0800eeb4 	.word	0x0800eeb4
 8000df8:	0800eed8 	.word	0x0800eed8

08000dfc <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  //printf("RTOS_Car_Next_Step is Running\n");
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <RTOS_Car_Next_Step+0x98>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b57      	cmp	r3, #87	; 0x57
 8000e0a:	d116      	bne.n	8000e3a <RTOS_Car_Next_Step+0x3e>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f008 f8f4 	bl	8009000 <osEventFlagsSet>
		  osEventFlagsClear(Car_modeHandle, PARKING_SIDE_BIT);
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f008 f946 	bl	80090b0 <osEventFlagsClear>
		  osThreadResume(Automatic_ParkingHandle);
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <RTOS_Car_Next_Step+0xa0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f008 f835 	bl	8008e98 <osThreadResume>
		  osThreadSuspend(car_next_stepHandle);
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <RTOS_Car_Next_Step+0xa4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f007 fffc 	bl	8008e30 <osThreadSuspend>
 8000e38:	e019      	b.n	8000e6e <RTOS_Car_Next_Step+0x72>
	  }
	  else if( (Bluetooth_RX_Data == AUTO_PARK_LEFT) ){
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <RTOS_Car_Next_Step+0x98>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b55      	cmp	r3, #85	; 0x55
 8000e40:	d115      	bne.n	8000e6e <RTOS_Car_Next_Step+0x72>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2101      	movs	r1, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 f8d9 	bl	8009000 <osEventFlagsSet>
		  osEventFlagsSet(Car_modeHandle, PARKING_SIDE_BIT);
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2102      	movs	r1, #2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f008 f8d3 	bl	8009000 <osEventFlagsSet>
		  osThreadResume(Automatic_ParkingHandle);
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <RTOS_Car_Next_Step+0xa0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f008 f81a 	bl	8008e98 <osThreadResume>
		  osThreadSuspend(car_next_stepHandle);
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <RTOS_Car_Next_Step+0xa4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 ffe1 	bl	8008e30 <osThreadSuspend>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == MANUAL_CONTROL_MODE){
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f008 f960 	bl	8009138 <osEventFlagsGet>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <RTOS_Car_Next_Step+0x8e>
		  //printf("Mobile Control Mode\n");
		  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 8000e82:	4904      	ldr	r1, [pc, #16]	; (8000e94 <RTOS_Car_Next_Step+0x98>)
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <RTOS_Car_Next_Step+0xa8>)
 8000e86:	f002 f8bf 	bl	8003008 <ECU_Motor_NextStep>
	  }
	  else{/* DO NOTHING */}

	  osDelay(150);
 8000e8a:	2096      	movs	r0, #150	; 0x96
 8000e8c:	f008 f838 	bl	8008f00 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000e90:	e7b8      	b.n	8000e04 <RTOS_Car_Next_Step+0x8>
 8000e92:	bf00      	nop
 8000e94:	20000064 	.word	0x20000064
 8000e98:	20000288 	.word	0x20000288
 8000e9c:	20000280 	.word	0x20000280
 8000ea0:	2000027c 	.word	0x2000027c
 8000ea4:	20000048 	.word	0x20000048

08000ea8 <RTOS_Automatic_Parking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Automatic_Parking */
void RTOS_Automatic_Parking(void *argument)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Automatic_Parking */
	uint8_t front_ultrasonic = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	72fb      	strb	r3, [r7, #11]
	uint8_t rear_ultrasonic = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	72bb      	strb	r3, [r7, #10]
	uint32_t time_out = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == AUTOMATIC_PARKING_MODE)
 8000ebc:	4bb5      	ldr	r3, [pc, #724]	; (8001194 <RTOS_Automatic_Parking+0x2ec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f008 f939 	bl	8009138 <osEventFlagsGet>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	f040 82ab 	bne.w	8001428 <RTOS_Automatic_Parking+0x580>
	  {
		  printf("-------------------------- Automatic Parking Mode ----------------------\n");
 8000ed2:	48b1      	ldr	r0, [pc, #708]	; (8001198 <RTOS_Automatic_Parking+0x2f0>)
 8000ed4:	f00b ff68 	bl	800cda8 <puts>

		  /* changing the speed to parking speed */
		  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 8000ed8:	49b0      	ldr	r1, [pc, #704]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8000eda:	48b1      	ldr	r0, [pc, #708]	; (80011a0 <RTOS_Automatic_Parking+0x2f8>)
 8000edc:	f002 f874 	bl	8002fc8 <ECU_Motor_ChangeSpeed>

		  /* Selected Right Side to Park */
		  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == RIGHT_PARKING_SIDE)
 8000ee0:	4bac      	ldr	r3, [pc, #688]	; (8001194 <RTOS_Automatic_Parking+0x2ec>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f008 f927 	bl	8009138 <osEventFlagsGet>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f040 812b 	bne.w	800114c <RTOS_Automatic_Parking+0x2a4>
		  {
			  printf("Parking Right Side\n");
 8000ef6:	48ab      	ldr	r0, [pc, #684]	; (80011a4 <RTOS_Automatic_Parking+0x2fc>)
 8000ef8:	f00b ff56 	bl	800cda8 <puts>

			  /* storing the ultra-sonic initial distance before parking */
			  front_ultrasonic = ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX];
 8000efc:	4baa      	ldr	r3, [pc, #680]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8000efe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fe57 	bl	8000bb8 <__aeabi_d2uiz>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	72fb      	strb	r3, [r7, #11]
			  rear_ultrasonic = ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX];
 8000f0e:	4ba6      	ldr	r3, [pc, #664]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8000f10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	f7ff fe4e 	bl	8000bb8 <__aeabi_d2uiz>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	72bb      	strb	r3, [r7, #10]

			  /* MoveForward so it can Searching for Empty Slot */
			  ECU_Motor_MoveForward();
 8000f20:	f002 f924 	bl	800316c <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 8000f24:	e002      	b.n	8000f2c <RTOS_Automatic_Parking+0x84>
			  {
				  //printf("RightFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
				  //printf("RightRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
				  printf("Searching for Empty Slot\n");
 8000f26:	48a1      	ldr	r0, [pc, #644]	; (80011ac <RTOS_Automatic_Parking+0x304>)
 8000f28:	f00b ff3e 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 8000f2c:	4b9e      	ldr	r3, [pc, #632]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8000f2e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000f32:	7afb      	ldrb	r3, [r7, #11]
 8000f34:	330f      	adds	r3, #15
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fafc 	bl	8000534 <__aeabi_i2d>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4620      	mov	r0, r4
 8000f42:	4629      	mov	r1, r5
 8000f44:	f7ff fdd2 	bl	8000aec <__aeabi_dcmplt>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1eb      	bne.n	8000f26 <RTOS_Automatic_Parking+0x7e>
 8000f4e:	4b96      	ldr	r3, [pc, #600]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8000f50:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000f54:	7abb      	ldrb	r3, [r7, #10]
 8000f56:	330f      	adds	r3, #15
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff faeb 	bl	8000534 <__aeabi_i2d>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4620      	mov	r0, r4
 8000f64:	4629      	mov	r1, r5
 8000f66:	f7ff fdc1 	bl	8000aec <__aeabi_dcmplt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1da      	bne.n	8000f26 <RTOS_Automatic_Parking+0x7e>
			  }
			  printf("Found the Empty Slot\n");
 8000f70:	488f      	ldr	r0, [pc, #572]	; (80011b0 <RTOS_Automatic_Parking+0x308>)
 8000f72:	f00b ff19 	bl	800cda8 <puts>

			  /* Delay to let the car move Forward to about car length */
			  while((time_out != 0xff0) && ((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8000f76:	e005      	b.n	8000f84 <RTOS_Automatic_Parking+0xdc>
			  {
				  printf("Centering the car after Finding the Empty Slot\n");
 8000f78:	488e      	ldr	r0, [pc, #568]	; (80011b4 <RTOS_Automatic_Parking+0x30c>)
 8000f7a:	f00b ff15 	bl	800cda8 <puts>
				  time_out++;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
			  while((time_out != 0xff0) && ((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000f8a:	d021      	beq.n	8000fd0 <RTOS_Automatic_Parking+0x128>
 8000f8c:	4b86      	ldr	r3, [pc, #536]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8000f8e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	3311      	adds	r3, #17
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff facc 	bl	8000534 <__aeabi_i2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f7ff fdc0 	bl	8000b28 <__aeabi_dcmpgt>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1e4      	bne.n	8000f78 <RTOS_Automatic_Parking+0xd0>
 8000fae:	4b7e      	ldr	r3, [pc, #504]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8000fb0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000fb4:	7abb      	ldrb	r3, [r7, #10]
 8000fb6:	330f      	adds	r3, #15
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fabb 	bl	8000534 <__aeabi_i2d>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	f7ff fdaf 	bl	8000b28 <__aeabi_dcmpgt>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1d3      	bne.n	8000f78 <RTOS_Automatic_Parking+0xd0>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 8000fd0:	f002 f8ee 	bl	80031b0 <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 8000fd4:	2005      	movs	r0, #5
 8000fd6:	f002 fbcf 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8000fda:	f002 f99b 	bl	8003314 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8000fde:	4976      	ldr	r1, [pc, #472]	; (80011b8 <RTOS_Automatic_Parking+0x310>)
 8000fe0:	486f      	ldr	r0, [pc, #444]	; (80011a0 <RTOS_Automatic_Parking+0x2f8>)
 8000fe2:	f001 fff1 	bl	8002fc8 <ECU_Motor_ChangeSpeed>

			  ECU_Motor_MoveReverse();
 8000fe6:	f002 f8e3 	bl	80031b0 <ECU_Motor_MoveReverse>
			  HAL_Delay(1400);
 8000fea:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8000fee:	f002 fbc3 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8000ff2:	f002 f98f 	bl	8003314 <ECU_Motor_Stop>

			  /* MoveReverseRight so the car rear can enter the Empty Slot */
			  ECU_Motor_MoveReverseRight();
 8000ff6:	f002 f945 	bl	8003284 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 30))
 8000ffa:	e002      	b.n	8001002 <RTOS_Automatic_Parking+0x15a>
			  {
				  //printf("IR_Right_Rear in = %d",ECU_IR_IsActive(&IR_Right_Rear));
				  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
				  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				  printf("trying to Park 1 Reverse Right\n");
 8000ffc:	486f      	ldr	r0, [pc, #444]	; (80011bc <RTOS_Automatic_Parking+0x314>)
 8000ffe:	f00b fed3 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 30))
 8001002:	4b69      	ldr	r3, [pc, #420]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8001004:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b6c      	ldr	r3, [pc, #432]	; (80011c0 <RTOS_Automatic_Parking+0x318>)
 800100e:	f7ff fd8b 	bl	8000b28 <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f1      	bne.n	8000ffc <RTOS_Automatic_Parking+0x154>
			  }
			  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
			  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 8001018:	f002 f8a8 	bl	800316c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f002 fbab 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8001022:	f002 f977 	bl	8003314 <ECU_Motor_Stop>

			  /* ReverseLeft to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseLeft();
 8001026:	f002 f951 	bl	80032cc <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 800102a:	e002      	b.n	8001032 <RTOS_Automatic_Parking+0x18a>
			  {
				  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
				  printf("trying to Park 2 Reverse Left\n");
 800102c:	4865      	ldr	r0, [pc, #404]	; (80011c4 <RTOS_Automatic_Parking+0x31c>)
 800102e:	f00b febb 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8001032:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8001034:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <RTOS_Automatic_Parking+0x320>)
 800103e:	f7ff fd73 	bl	8000b28 <__aeabi_dcmpgt>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00a      	beq.n	800105e <RTOS_Automatic_Parking+0x1b6>
 8001048:	4b57      	ldr	r3, [pc, #348]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 800104a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <RTOS_Automatic_Parking+0x320>)
 8001054:	f7ff fd68 	bl	8000b28 <__aeabi_dcmpgt>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1e6      	bne.n	800102c <RTOS_Automatic_Parking+0x184>
			  }
			  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
			  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 800105e:	f002 f885 	bl	800316c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8001062:	2005      	movs	r0, #5
 8001064:	f002 fb88 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8001068:	f002 f954 	bl	8003314 <ECU_Motor_Stop>

			  /* return the speed back to parking speed */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 800106c:	4952      	ldr	r1, [pc, #328]	; (80011b8 <RTOS_Automatic_Parking+0x310>)
 800106e:	484c      	ldr	r0, [pc, #304]	; (80011a0 <RTOS_Automatic_Parking+0x2f8>)
 8001070:	f001 ffaa 	bl	8002fc8 <ECU_Motor_ChangeSpeed>

			  /* MoveForwardRight to Adjust the position of the front of the car */
			  ECU_Motor_MoveForwardRight();
 8001074:	f002 f8be 	bl	80031f4 <ECU_Motor_MoveForwardRight>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 13))
 8001078:	e002      	b.n	8001080 <RTOS_Automatic_Parking+0x1d8>
			  {
				  printf("trying to Park 3 Forward Right\n");
 800107a:	4854      	ldr	r0, [pc, #336]	; (80011cc <RTOS_Automatic_Parking+0x324>)
 800107c:	f00b fe94 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 13))
 8001080:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8001082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b51      	ldr	r3, [pc, #324]	; (80011d0 <RTOS_Automatic_Parking+0x328>)
 800108c:	f7ff fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00a      	beq.n	80010ac <RTOS_Automatic_Parking+0x204>
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8001098:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <RTOS_Automatic_Parking+0x32c>)
 80010a2:	f7ff fd41 	bl	8000b28 <__aeabi_dcmpgt>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e6      	bne.n	800107a <RTOS_Automatic_Parking+0x1d2>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 80010ac:	f002 f880 	bl	80031b0 <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 80010b0:	2005      	movs	r0, #5
 80010b2:	f002 fb61 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 80010b6:	f002 f92d 	bl	8003314 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80010ba:	493f      	ldr	r1, [pc, #252]	; (80011b8 <RTOS_Automatic_Parking+0x310>)
 80010bc:	4838      	ldr	r0, [pc, #224]	; (80011a0 <RTOS_Automatic_Parking+0x2f8>)
 80010be:	f001 ff83 	bl	8002fc8 <ECU_Motor_ChangeSpeed>

			  /* ReverseLeft to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseLeft();
 80010c2:	f002 f903 	bl	80032cc <ECU_Motor_MoveReverseLeft>
			  HAL_Delay(300);
 80010c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ca:	f002 fb55 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 80010ce:	f002 f921 	bl	8003314 <ECU_Motor_Stop>

			  /* MoveReverse to Adjust the position better in the slot */
			  ECU_Motor_MoveReverse();
 80010d2:	f002 f86d 	bl	80031b0 <ECU_Motor_MoveReverse>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 80010d6:	e002      	b.n	80010de <RTOS_Automatic_Parking+0x236>
			  {
				  printf("try to Park 4 Reverse \n");
 80010d8:	483f      	ldr	r0, [pc, #252]	; (80011d8 <RTOS_Automatic_Parking+0x330>)
 80010da:	f00b fe65 	bl	800cda8 <puts>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 80010e0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <RTOS_Automatic_Parking+0x334>)
 80010ea:	f7ff fd1d 	bl	8000b28 <__aeabi_dcmpgt>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f1      	bne.n	80010d8 <RTOS_Automatic_Parking+0x230>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 80010f4:	f002 f83a 	bl	800316c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80010f8:	2005      	movs	r0, #5
 80010fa:	f002 fb3d 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 80010fe:	f002 f909 	bl	8003314 <ECU_Motor_Stop>

			  ECU_Motor_MoveForwardRight(&moving_motor);
 8001102:	4827      	ldr	r0, [pc, #156]	; (80011a0 <RTOS_Automatic_Parking+0x2f8>)
 8001104:	f002 f876 	bl	80031f4 <ECU_Motor_MoveForwardRight>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 10 ) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 12) /*&& (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4)*/)
 8001108:	e002      	b.n	8001110 <RTOS_Automatic_Parking+0x268>
			  {
				  printf("try to Park 5 Forward Right\n");
 800110a:	4835      	ldr	r0, [pc, #212]	; (80011e0 <RTOS_Automatic_Parking+0x338>)
 800110c:	f00b fe4c 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 10 ) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 12) /*&& (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4)*/)
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8001112:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <RTOS_Automatic_Parking+0x33c>)
 800111c:	f7ff fd04 	bl	8000b28 <__aeabi_dcmpgt>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00a      	beq.n	800113c <RTOS_Automatic_Parking+0x294>
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8001128:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <RTOS_Automatic_Parking+0x340>)
 8001132:	f7ff fcf9 	bl	8000b28 <__aeabi_dcmpgt>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1e6      	bne.n	800110a <RTOS_Automatic_Parking+0x262>
			  }
			  ECU_Motor_MoveReverse();
 800113c:	f002 f838 	bl	80031b0 <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 8001140:	2005      	movs	r0, #5
 8001142:	f002 fb19 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8001146:	f002 f8e5 	bl	8003314 <ECU_Motor_Stop>
 800114a:	e163      	b.n	8001414 <RTOS_Automatic_Parking+0x56c>

		  }
		  /* ----------------------------------------------- Selected Left Side to Park -------------------------------------------- */
		  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == LEFT_PARKING_SIDE)
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <RTOS_Automatic_Parking+0x2ec>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f007 fff1 	bl	8009138 <osEventFlagsGet>
 8001156:	4603      	mov	r3, r0
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b02      	cmp	r3, #2
 800115e:	f040 8159 	bne.w	8001414 <RTOS_Automatic_Parking+0x56c>
		  {
			  printf("Park Left Side\n");
 8001162:	4822      	ldr	r0, [pc, #136]	; (80011ec <RTOS_Automatic_Parking+0x344>)
 8001164:	f00b fe20 	bl	800cda8 <puts>

			  /* storing the ultra-sonic initial distance before parking */
			  front_ultrasonic = ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX];
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 800116a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd21 	bl	8000bb8 <__aeabi_d2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	72fb      	strb	r3, [r7, #11]
			  rear_ultrasonic = ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX];
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 800117c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fd18 	bl	8000bb8 <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	72bb      	strb	r3, [r7, #10]

			  /* MoveForward so it can Searching for Empty Slot */
			  ECU_Motor_MoveForward();
 800118c:	f001 ffee 	bl	800316c <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 8001190:	e031      	b.n	80011f6 <RTOS_Automatic_Parking+0x34e>
 8001192:	bf00      	nop
 8001194:	20000288 	.word	0x20000288
 8001198:	0800eef8 	.word	0x0800eef8
 800119c:	20000070 	.word	0x20000070
 80011a0:	20000048 	.word	0x20000048
 80011a4:	0800ef44 	.word	0x0800ef44
 80011a8:	20000658 	.word	0x20000658
 80011ac:	0800ef58 	.word	0x0800ef58
 80011b0:	0800ef74 	.word	0x0800ef74
 80011b4:	0800ef8c 	.word	0x0800ef8c
 80011b8:	20000078 	.word	0x20000078
 80011bc:	0800efbc 	.word	0x0800efbc
 80011c0:	403e0000 	.word	0x403e0000
 80011c4:	0800efdc 	.word	0x0800efdc
 80011c8:	40100000 	.word	0x40100000
 80011cc:	0800effc 	.word	0x0800effc
 80011d0:	40140000 	.word	0x40140000
 80011d4:	402a0000 	.word	0x402a0000
 80011d8:	0800f01c 	.word	0x0800f01c
 80011dc:	40340000 	.word	0x40340000
 80011e0:	0800f034 	.word	0x0800f034
 80011e4:	40240000 	.word	0x40240000
 80011e8:	40280000 	.word	0x40280000
 80011ec:	0800f050 	.word	0x0800f050
			  {
				  //printf("LeftFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
				  //printf("LeftRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
				  printf("Searching for Empty Slot\n");
 80011f0:	4894      	ldr	r0, [pc, #592]	; (8001444 <RTOS_Automatic_Parking+0x59c>)
 80011f2:	f00b fdd9 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 80011f6:	4b94      	ldr	r3, [pc, #592]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 80011f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	330f      	adds	r3, #15
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f997 	bl	8000534 <__aeabi_i2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7ff fc6d 	bl	8000aec <__aeabi_dcmplt>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1eb      	bne.n	80011f0 <RTOS_Automatic_Parking+0x348>
 8001218:	4b8b      	ldr	r3, [pc, #556]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 800121a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800121e:	7abb      	ldrb	r3, [r7, #10]
 8001220:	330f      	adds	r3, #15
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f986 	bl	8000534 <__aeabi_i2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff fc5c 	bl	8000aec <__aeabi_dcmplt>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1da      	bne.n	80011f0 <RTOS_Automatic_Parking+0x348>
			  }
			  printf("Found the Empty Slot\n");
 800123a:	4884      	ldr	r0, [pc, #528]	; (800144c <RTOS_Automatic_Parking+0x5a4>)
 800123c:	f00b fdb4 	bl	800cda8 <puts>

			  /* Delay to let the car move Forward to about car length */
			  while((time_out != 0xff0) && ((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8001240:	e005      	b.n	800124e <RTOS_Automatic_Parking+0x3a6>
			  {
				  printf("Centering the car after Finding the Empty Slot\n");
 8001242:	4883      	ldr	r0, [pc, #524]	; (8001450 <RTOS_Automatic_Parking+0x5a8>)
 8001244:	f00b fdb0 	bl	800cda8 <puts>
				  time_out++;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
			  while((time_out != 0xff0) && ((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8001254:	d021      	beq.n	800129a <RTOS_Automatic_Parking+0x3f2>
 8001256:	4b7c      	ldr	r3, [pc, #496]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 8001258:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	3311      	adds	r3, #17
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f967 	bl	8000534 <__aeabi_i2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff fc5b 	bl	8000b28 <__aeabi_dcmpgt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e4      	bne.n	8001242 <RTOS_Automatic_Parking+0x39a>
 8001278:	4b73      	ldr	r3, [pc, #460]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 800127a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800127e:	7abb      	ldrb	r3, [r7, #10]
 8001280:	330f      	adds	r3, #15
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f956 	bl	8000534 <__aeabi_i2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4620      	mov	r0, r4
 800128e:	4629      	mov	r1, r5
 8001290:	f7ff fc4a 	bl	8000b28 <__aeabi_dcmpgt>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1d3      	bne.n	8001242 <RTOS_Automatic_Parking+0x39a>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 800129a:	f001 ff89 	bl	80031b0 <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 800129e:	2005      	movs	r0, #5
 80012a0:	f002 fa6a 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 80012a4:	f002 f836 	bl	8003314 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80012a8:	496a      	ldr	r1, [pc, #424]	; (8001454 <RTOS_Automatic_Parking+0x5ac>)
 80012aa:	486b      	ldr	r0, [pc, #428]	; (8001458 <RTOS_Automatic_Parking+0x5b0>)
 80012ac:	f001 fe8c 	bl	8002fc8 <ECU_Motor_ChangeSpeed>

			  ECU_Motor_MoveReverse();
 80012b0:	f001 ff7e 	bl	80031b0 <ECU_Motor_MoveReverse>
			  HAL_Delay(1400);
 80012b4:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80012b8:	f002 fa5e 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 80012bc:	f002 f82a 	bl	8003314 <ECU_Motor_Stop>

			  /* MoveReverseLeft so the car rear can enter the Empty Slot */
			  ECU_Motor_MoveReverseLeft();
 80012c0:	f002 f804 	bl	80032cc <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20))
 80012c4:	e002      	b.n	80012cc <RTOS_Automatic_Parking+0x424>
			  {
				  //printf("IR_Left_Rear in = %d",ECU_IR_IsActive(&IR_Left_Rear));
				  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
				  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				  printf("trying to Park 1 Reverse Left\n");
 80012c6:	4865      	ldr	r0, [pc, #404]	; (800145c <RTOS_Automatic_Parking+0x5b4>)
 80012c8:	f00b fd6e 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20))
 80012cc:	4b5e      	ldr	r3, [pc, #376]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 80012ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b62      	ldr	r3, [pc, #392]	; (8001460 <RTOS_Automatic_Parking+0x5b8>)
 80012d8:	f7ff fc26 	bl	8000b28 <__aeabi_dcmpgt>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f1      	bne.n	80012c6 <RTOS_Automatic_Parking+0x41e>
			  }
			  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
			  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 80012e2:	f001 ff43 	bl	800316c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80012e6:	2005      	movs	r0, #5
 80012e8:	f002 fa46 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 80012ec:	f002 f812 	bl	8003314 <ECU_Motor_Stop>

			  /* ReverseRight to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseRight();
 80012f0:	f001 ffc8 	bl	8003284 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 80012f4:	e002      	b.n	80012fc <RTOS_Automatic_Parking+0x454>
			  {
				  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
				  printf("trying to Park 2 Reverse Right\n");
 80012f6:	485b      	ldr	r0, [pc, #364]	; (8001464 <RTOS_Automatic_Parking+0x5bc>)
 80012f8:	f00b fd56 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 80012fc:	4b52      	ldr	r3, [pc, #328]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 80012fe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b58      	ldr	r3, [pc, #352]	; (8001468 <RTOS_Automatic_Parking+0x5c0>)
 8001308:	f7ff fc0e 	bl	8000b28 <__aeabi_dcmpgt>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00a      	beq.n	8001328 <RTOS_Automatic_Parking+0x480>
 8001312:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 8001314:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b52      	ldr	r3, [pc, #328]	; (8001468 <RTOS_Automatic_Parking+0x5c0>)
 800131e:	f7ff fc03 	bl	8000b28 <__aeabi_dcmpgt>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e6      	bne.n	80012f6 <RTOS_Automatic_Parking+0x44e>
			  }
			  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
			  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 8001328:	f001 ff20 	bl	800316c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 800132c:	2005      	movs	r0, #5
 800132e:	f002 fa23 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8001332:	f001 ffef 	bl	8003314 <ECU_Motor_Stop>

			  /* return the speed back to parking speed */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8001336:	4947      	ldr	r1, [pc, #284]	; (8001454 <RTOS_Automatic_Parking+0x5ac>)
 8001338:	4847      	ldr	r0, [pc, #284]	; (8001458 <RTOS_Automatic_Parking+0x5b0>)
 800133a:	f001 fe45 	bl	8002fc8 <ECU_Motor_ChangeSpeed>

			  /* MoveForwardLeft to Adjust the position of the front of the car */
			  ECU_Motor_MoveForwardLeft();
 800133e:	f001 ff7d 	bl	800323c <ECU_Motor_MoveForwardLeft>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 13))
 8001342:	e002      	b.n	800134a <RTOS_Automatic_Parking+0x4a2>
			  {
				  printf("trying to Park 3 Forward Left\n");
 8001344:	4849      	ldr	r0, [pc, #292]	; (800146c <RTOS_Automatic_Parking+0x5c4>)
 8001346:	f00b fd2f 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 13))
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 800134c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <RTOS_Automatic_Parking+0x5c8>)
 8001356:	f7ff fbe7 	bl	8000b28 <__aeabi_dcmpgt>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00a      	beq.n	8001376 <RTOS_Automatic_Parking+0x4ce>
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 8001362:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4b42      	ldr	r3, [pc, #264]	; (8001474 <RTOS_Automatic_Parking+0x5cc>)
 800136c:	f7ff fbdc 	bl	8000b28 <__aeabi_dcmpgt>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1e6      	bne.n	8001344 <RTOS_Automatic_Parking+0x49c>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 8001376:	f001 ff1b 	bl	80031b0 <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 800137a:	2005      	movs	r0, #5
 800137c:	f002 f9fc 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8001380:	f001 ffc8 	bl	8003314 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8001384:	4933      	ldr	r1, [pc, #204]	; (8001454 <RTOS_Automatic_Parking+0x5ac>)
 8001386:	4834      	ldr	r0, [pc, #208]	; (8001458 <RTOS_Automatic_Parking+0x5b0>)
 8001388:	f001 fe1e 	bl	8002fc8 <ECU_Motor_ChangeSpeed>

			  /* ReverseRight to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseRight();
 800138c:	f001 ff7a 	bl	8003284 <ECU_Motor_MoveReverseRight>
			  HAL_Delay(300);
 8001390:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001394:	f002 f9f0 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8001398:	f001 ffbc 	bl	8003314 <ECU_Motor_Stop>

			  /* MoveReverse to Adjust the position better in the slot */
			  ECU_Motor_MoveReverse();
 800139c:	f001 ff08 	bl	80031b0 <ECU_Motor_MoveReverse>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 80013a0:	e002      	b.n	80013a8 <RTOS_Automatic_Parking+0x500>
			  {
				  printf("try to Park 4 Reverse \n");
 80013a2:	4835      	ldr	r0, [pc, #212]	; (8001478 <RTOS_Automatic_Parking+0x5d0>)
 80013a4:	f00b fd00 	bl	800cda8 <puts>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 80013aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <RTOS_Automatic_Parking+0x5b8>)
 80013b4:	f7ff fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f1      	bne.n	80013a2 <RTOS_Automatic_Parking+0x4fa>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 80013be:	f001 fed5 	bl	800316c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80013c2:	2005      	movs	r0, #5
 80013c4:	f002 f9d8 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 80013c8:	f001 ffa4 	bl	8003314 <ECU_Motor_Stop>

			  ECU_Motor_MoveForwardLeft(&moving_motor);
 80013cc:	4822      	ldr	r0, [pc, #136]	; (8001458 <RTOS_Automatic_Parking+0x5b0>)
 80013ce:	f001 ff35 	bl	800323c <ECU_Motor_MoveForwardLeft>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 10 ) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 9) /*&& (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4)*/)
 80013d2:	e002      	b.n	80013da <RTOS_Automatic_Parking+0x532>
			  {
				  printf("try to Park 5 Forward Left\n");
 80013d4:	4829      	ldr	r0, [pc, #164]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 80013d6:	f00b fce7 	bl	800cda8 <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 10 ) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 9) /*&& (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4)*/)
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 80013dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <RTOS_Automatic_Parking+0x5d8>)
 80013e6:	f7ff fb9f 	bl	8000b28 <__aeabi_dcmpgt>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <RTOS_Automatic_Parking+0x55e>
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <RTOS_Automatic_Parking+0x5a0>)
 80013f2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <RTOS_Automatic_Parking+0x5dc>)
 80013fc:	f7ff fb94 	bl	8000b28 <__aeabi_dcmpgt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1e6      	bne.n	80013d4 <RTOS_Automatic_Parking+0x52c>
			  }
			  ECU_Motor_MoveReverse();
 8001406:	f001 fed3 	bl	80031b0 <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 800140a:	2005      	movs	r0, #5
 800140c:	f002 f9b4 	bl	8003778 <HAL_Delay>
			  ECU_Motor_Stop();
 8001410:	f001 ff80 	bl	8003314 <ECU_Motor_Stop>
		  }
		  else{/* DO NOTHING */}

		  /* terminating the Auto Parking mode */
		  //printf("Finally ... the car should be parked successfully by now\n");
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <RTOS_Automatic_Parking+0x5e0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fe48 	bl	80090b0 <osEventFlagsClear>
		  ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 8001420:	491a      	ldr	r1, [pc, #104]	; (800148c <RTOS_Automatic_Parking+0x5e4>)
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <RTOS_Automatic_Parking+0x5b0>)
 8001424:	f001 fdd0 	bl	8002fc8 <ECU_Motor_ChangeSpeed>
		  //Bluetooth_RX_Data = 'S';

	  }
	  else{/* DO NOTHING */}

	  osThreadResume(car_next_stepHandle);
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <RTOS_Automatic_Parking+0x5e8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f007 fd33 	bl	8008e98 <osThreadResume>
	  osThreadSuspend(Automatic_ParkingHandle);
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <RTOS_Automatic_Parking+0x5ec>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f007 fcfa 	bl	8008e30 <osThreadSuspend>

    osDelay(120000);
 800143c:	4816      	ldr	r0, [pc, #88]	; (8001498 <RTOS_Automatic_Parking+0x5f0>)
 800143e:	f007 fd5f 	bl	8008f00 <osDelay>
	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == AUTOMATIC_PARKING_MODE)
 8001442:	e53b      	b.n	8000ebc <RTOS_Automatic_Parking+0x14>
 8001444:	0800ef58 	.word	0x0800ef58
 8001448:	20000658 	.word	0x20000658
 800144c:	0800ef74 	.word	0x0800ef74
 8001450:	0800ef8c 	.word	0x0800ef8c
 8001454:	20000078 	.word	0x20000078
 8001458:	20000048 	.word	0x20000048
 800145c:	0800f060 	.word	0x0800f060
 8001460:	40340000 	.word	0x40340000
 8001464:	0800f080 	.word	0x0800f080
 8001468:	40100000 	.word	0x40100000
 800146c:	0800f0a0 	.word	0x0800f0a0
 8001470:	40140000 	.word	0x40140000
 8001474:	402a0000 	.word	0x402a0000
 8001478:	0800f01c 	.word	0x0800f01c
 800147c:	0800f0c0 	.word	0x0800f0c0
 8001480:	40240000 	.word	0x40240000
 8001484:	40220000 	.word	0x40220000
 8001488:	20000288 	.word	0x20000288
 800148c:	20000068 	.word	0x20000068
 8001490:	2000027c 	.word	0x2000027c
 8001494:	20000280 	.word	0x20000280
 8001498:	0001d4c0 	.word	0x0001d4c0

0800149c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a4f      	ldr	r2, [pc, #316]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014bc:	6153      	str	r3, [r2, #20]
 80014be:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ca:	4b4a      	ldr	r3, [pc, #296]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4a49      	ldr	r2, [pc, #292]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d4:	6153      	str	r3, [r2, #20]
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a43      	ldr	r2, [pc, #268]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	6153      	str	r3, [r2, #20]
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <MX_GPIO_Init+0x158>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a3d      	ldr	r2, [pc, #244]	; (80015f4 <MX_GPIO_Init+0x158>)
 8001500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001504:	6153      	str	r3, [r2, #20]
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <MX_GPIO_Init+0x158>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f002 fc34 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin|LCD_DATA_2_Pin
 8001520:	2200      	movs	r2, #0
 8001522:	f643 4102 	movw	r1, #15362	; 0x3c02
 8001526:	4834      	ldr	r0, [pc, #208]	; (80015f8 <MX_GPIO_Init+0x15c>)
 8001528:	f002 fc2e 	bl	8003d88 <HAL_GPIO_WritePin>
                          |LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	4831      	ldr	r0, [pc, #196]	; (80015f8 <MX_GPIO_Init+0x15c>)
 8001532:	f002 fc29 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 7140 	mov.w	r1, #768	; 0x300
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <MX_GPIO_Init+0x160>)
 800153e:	f002 fc23 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001548:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4828      	ldr	r0, [pc, #160]	; (80015fc <MX_GPIO_Init+0x160>)
 800155a:	f002 fa8b 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 800155e:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f002 fa7b 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_Left_Pin;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Left_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4819      	ldr	r0, [pc, #100]	; (80015f8 <MX_GPIO_Init+0x15c>)
 8001592:	f002 fa6f 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 8001596:	f643 4306 	movw	r3, #15366	; 0x3c06
 800159a:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <MX_GPIO_Init+0x15c>)
 80015b0:	f002 fa60 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 80015b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <MX_GPIO_Init+0x160>)
 80015ce:	f002 fa51 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_RIGHT_Pin;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_GPIO_Init+0x160>)
 80015e8:	f002 fa44 	bl	8003a74 <HAL_GPIO_Init>

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48000400 	.word	0x48000400
 80015fc:	48000800 	.word	0x48000800

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001604:	f002 f882 	bl	800370c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f81e 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f7ff ff46 	bl	800149c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001610:	f000 fabc 	bl	8001b8c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001614:	f000 fb8a 	bl	8001d2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001618:	f000 fc22 	bl	8001e60 <MX_TIM3_Init>
  MX_TIM4_Init();
 800161c:	f000 fcbc 	bl	8001f98 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001620:	f000 fd56 	bl	80020d0 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001624:	f000 fe24 	bl	8002270 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001628:	f000 feea 	bl	8002400 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800162c:	f001 fae2 	bl	8002bf4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001630:	f001 fab0 	bl	8002b94 <MX_UART4_Init>
  MX_TIM17_Init();
 8001634:	f000 ff5e 	bl	80024f4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001638:	f007 fac2 	bl	8008bc0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800163c:	f7ff fadc 	bl	8000bf8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001640:	f007 faf2 	bl	8008c28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001644:	e7fe      	b.n	8001644 <main+0x44>
	...

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0a6      	sub	sp, #152	; 0x98
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001652:	2228      	movs	r2, #40	; 0x28
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f00b fc86 	bl	800cf68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2258      	movs	r2, #88	; 0x58
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00b fc78 	bl	800cf68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001678:	2302      	movs	r3, #2
 800167a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167c:	2301      	movs	r3, #1
 800167e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001680:	2310      	movs	r3, #16
 8001682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001690:	4618      	mov	r0, r3
 8001692:	f002 fb91 	bl	8003db8 <HAL_RCC_OscConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800169c:	f000 f84a 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a0:	230f      	movs	r3, #15
 80016a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016a4:	2300      	movs	r3, #0
 80016a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fbd0 	bl	8004e60 <HAL_RCC_ClockConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016c6:	f000 f835 	bl	8001734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <SystemClock_Config+0xc4>)
 80016cc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80016da:	2300      	movs	r3, #0
 80016dc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80016de:	2300      	movs	r3, #0
 80016e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 fe1b 	bl	8005330 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001700:	f000 f818 	bl	8001734 <Error_Handler>
  }
}
 8001704:	bf00      	nop
 8001706:	3798      	adds	r7, #152	; 0x98
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	01f0300a 	.word	0x01f0300a

08001710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001722:	f002 f809 	bl	8003738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40001000 	.word	0x40001000

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_MspInit+0x4c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_MspInit+0x4c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_MspInit+0x4c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_MspInit+0x4c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_MspInit+0x4c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_MspInit+0x4c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	210f      	movs	r1, #15
 800177a:	f06f 0001 	mvn.w	r0, #1
 800177e:	f002 f8d7 	bl	8003930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017a0:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_InitTick+0xe0>)
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	4a32      	ldr	r2, [pc, #200]	; (8001870 <HAL_InitTick+0xe0>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	61d3      	str	r3, [r2, #28]
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_InitTick+0xe0>)
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b8:	f107 0210 	add.w	r2, r7, #16
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fd82 	bl	80052cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d2:	f003 fd37 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80017d6:	6378      	str	r0, [r7, #52]	; 0x34
 80017d8:	e004      	b.n	80017e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017da:	f003 fd33 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80017de:	4603      	mov	r3, r0
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <HAL_InitTick+0xe4>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	3b01      	subs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_InitTick+0xe8>)
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <HAL_InitTick+0xec>)
 80017f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_InitTick+0xe8>)
 80017fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_InitTick+0xe8>)
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_InitTick+0xe8>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_InitTick+0xe8>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_InitTick+0xe8>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001818:	4817      	ldr	r0, [pc, #92]	; (8001878 <HAL_InitTick+0xe8>)
 800181a:	f003 ffa7 	bl	800576c <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001824:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11b      	bne.n	8001864 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800182c:	4812      	ldr	r0, [pc, #72]	; (8001878 <HAL_InitTick+0xe8>)
 800182e:	f003 fff5 	bl	800581c <HAL_TIM_Base_Start_IT>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800183c:	2b00      	cmp	r3, #0
 800183e:	d111      	bne.n	8001864 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001840:	2036      	movs	r0, #54	; 0x36
 8001842:	f002 f891 	bl	8003968 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d808      	bhi.n	800185e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	2036      	movs	r0, #54	; 0x36
 8001852:	f002 f86d 	bl	8003930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_InitTick+0xf0>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	e002      	b.n	8001864 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001868:	4618      	mov	r0, r3
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	431bde83 	.word	0x431bde83
 8001878:	20000290 	.word	0x20000290
 800187c:	40001000 	.word	0x40001000
 8001880:	20000080 	.word	0x20000080

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80018b6:	2205      	movs	r2, #5
 80018b8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80018bc:	f004 fc92 	bl	80061e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80018c2:	f004 fc8f 	bl	80061e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000688 	.word	0x20000688
 80018d0:	200002e0 	.word	0x200002e0
 80018d4:	2000045c 	.word	0x2000045c

080018d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <TIM1_CC_IRQHandler+0x14>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e2:	4803      	ldr	r0, [pc, #12]	; (80018f0 <TIM1_CC_IRQHandler+0x18>)
 80018e4:	f004 fc7e 	bl	80061e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000688 	.word	0x20000688
 80018f0:	200002e0 	.word	0x200002e0

080018f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <TIM2_IRQHandler+0x14>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <TIM2_IRQHandler+0x18>)
 8001900:	f004 fc70 	bl	80061e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000688 	.word	0x20000688
 800190c:	2000032c 	.word	0x2000032c

08001910 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <TIM3_IRQHandler+0x14>)
 8001916:	2202      	movs	r2, #2
 8001918:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800191a:	4803      	ldr	r0, [pc, #12]	; (8001928 <TIM3_IRQHandler+0x18>)
 800191c:	f004 fc62 	bl	80061e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000688 	.word	0x20000688
 8001928:	20000378 	.word	0x20000378

0800192c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <TIM4_IRQHandler+0x14>)
 8001932:	2203      	movs	r2, #3
 8001934:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <TIM4_IRQHandler+0x18>)
 8001938:	f004 fc54 	bl	80061e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000688 	.word	0x20000688
 8001944:	200003c4 	.word	0x200003c4

08001948 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <TIM8_CC_IRQHandler+0x14>)
 800194e:	2204      	movs	r2, #4
 8001950:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <TIM8_CC_IRQHandler+0x18>)
 8001954:	f004 fc46 	bl	80061e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000688 	.word	0x20000688
 8001960:	20000410 	.word	0x20000410

08001964 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <UART4_IRQHandler+0x10>)
 800196a:	f005 ff81 	bl	8007870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000540 	.word	0x20000540

08001978 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM6_DAC_IRQHandler+0x10>)
 800197e:	f004 fc31 	bl	80061e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000290 	.word	0x20000290

0800198c <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <Custom_ITM_sendChar_Ch0+0x48>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <Custom_ITM_sendChar_Ch0+0x48>)
 800199c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a0:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <Custom_ITM_sendChar_Ch0+0x4c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <Custom_ITM_sendChar_Ch0+0x4c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 80019ae:	bf00      	nop
 80019b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f8      	beq.n	80019b0 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 80019be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	6013      	str	r3, [r2, #0]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000edfc 	.word	0xe000edfc
 80019d8:	e0000e00 	.word	0xe0000e00

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:

int _kill(int pid, int sig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f6:	f00b fb5f 	bl	800d0b8 <__errno>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a1e:	e7fe      	b.n	8001a1e <_exit+0x12>

08001a20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00a      	b.n	8001a48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a32:	f3af 8000 	nop.w
 8001a36:	4601      	mov	r1, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60ba      	str	r2, [r7, #8]
 8001a3e:	b2ca      	uxtb	r2, r1
 8001a40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf0      	blt.n	8001a32 <_read+0x12>
  }

  return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e009      	b.n	8001a80 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff89 	bl	800198c <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf1      	blt.n	8001a6c <_write+0x12>
  }
  return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_close>:

int _close(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aba:	605a      	str	r2, [r3, #4]
  return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_isatty>:

int _isatty(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f00b fac4 	bl	800d0b8 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20010000 	.word	0x20010000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	200002dc 	.word	0x200002dc
 8001b64:	20002a18 	.word	0x20002a18

08001b68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b09e      	sub	sp, #120	; 0x78
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	222c      	movs	r2, #44	; 0x2c
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00b f9c7 	bl	800cf68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bda:	4b52      	ldr	r3, [pc, #328]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001bdc:	4a52      	ldr	r2, [pc, #328]	; (8001d28 <MX_TIM1_Init+0x19c>)
 8001bde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001be2:	2207      	movs	r2, #7
 8001be4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bec:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b48      	ldr	r3, [pc, #288]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c06:	4847      	ldr	r0, [pc, #284]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001c08:	f003 fdb0 	bl	800576c <HAL_TIM_Base_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c12:	f7ff fd8f 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c20:	4619      	mov	r1, r3
 8001c22:	4840      	ldr	r0, [pc, #256]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001c24:	f004 fdae 	bl	8006784 <HAL_TIM_ConfigClockSource>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c2e:	f7ff fd81 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c32:	483c      	ldr	r0, [pc, #240]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001c34:	f003 fe62 	bl	80058fc <HAL_TIM_PWM_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001c3e:	f7ff fd79 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c42:	4838      	ldr	r0, [pc, #224]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001c44:	f004 f864 	bl	8005d10 <HAL_TIM_IC_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001c4e:	f7ff fd71 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c62:	4619      	mov	r1, r3
 8001c64:	482f      	ldr	r0, [pc, #188]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001c66:	f005 fc41 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8001c70:	f7ff fd60 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c74:	2360      	movs	r3, #96	; 0x60
 8001c76:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8001c78:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001c7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c82:	2300      	movs	r3, #0
 8001c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c96:	2200      	movs	r2, #0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4822      	ldr	r0, [pc, #136]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001c9c:	f004 fc5e 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001ca6:	f7ff fd45 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001caa:	2300      	movs	r3, #0
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4818      	ldr	r0, [pc, #96]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001cc4:	f004 fbad 	bl	8006422 <HAL_TIM_IC_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001cce:	f7ff fd31 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001d08:	f005 fc7c 	bl	8007604 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001d12:	f7ff fd0f 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <MX_TIM1_Init+0x198>)
 8001d18:	f000 fe02 	bl	8002920 <HAL_TIM_MspPostInit>

}
 8001d1c:	bf00      	nop
 8001d1e:	3778      	adds	r7, #120	; 0x78
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200002e0 	.word	0x200002e0
 8001d28:	40012c00 	.word	0x40012c00

08001d2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b092      	sub	sp, #72	; 0x48
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	615a      	str	r2, [r3, #20]
 8001d5e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001d76:	2207      	movs	r2, #7
 8001d78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d94:	4831      	ldr	r0, [pc, #196]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001d96:	f003 fce9 	bl	800576c <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001da0:	f7ff fcc8 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001daa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dae:	4619      	mov	r1, r3
 8001db0:	482a      	ldr	r0, [pc, #168]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001db2:	f004 fce7 	bl	8006784 <HAL_TIM_ConfigClockSource>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001dbc:	f7ff fcba 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dc0:	4826      	ldr	r0, [pc, #152]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001dc2:	f003 fd9b 	bl	80058fc <HAL_TIM_PWM_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001dcc:	f7ff fcb2 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001dd0:	4822      	ldr	r0, [pc, #136]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001dd2:	f003 ff9d 	bl	8005d10 <HAL_TIM_IC_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ddc:	f7ff fcaa 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dec:	4619      	mov	r1, r3
 8001dee:	481b      	ldr	r0, [pc, #108]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001df0:	f005 fb7c 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001dfa:	f7ff fc9b 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfe:	2360      	movs	r3, #96	; 0x60
 8001e00:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001e02:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001e06:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4810      	ldr	r0, [pc, #64]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001e1a:	f004 fb9f 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001e24:	f7ff fc86 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e38:	463b      	mov	r3, r7
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001e40:	f004 faef 	bl	8006422 <HAL_TIM_IC_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8001e4a:	f7ff fc73 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e4e:	4803      	ldr	r0, [pc, #12]	; (8001e5c <MX_TIM2_Init+0x130>)
 8001e50:	f000 fd66 	bl	8002920 <HAL_TIM_MspPostInit>

}
 8001e54:	bf00      	nop
 8001e56:	3748      	adds	r7, #72	; 0x48
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000032c 	.word	0x2000032c

08001e60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b092      	sub	sp, #72	; 0x48
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	615a      	str	r2, [r3, #20]
 8001e92:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e94:	463b      	mov	r3, r7
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001ea2:	4a3c      	ldr	r2, [pc, #240]	; (8001f94 <MX_TIM3_Init+0x134>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eb2:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eba:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ec6:	4832      	ldr	r0, [pc, #200]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001ec8:	f003 fc50 	bl	800576c <HAL_TIM_Base_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ed2:	f7ff fc2f 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001edc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	482b      	ldr	r0, [pc, #172]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001ee4:	f004 fc4e 	bl	8006784 <HAL_TIM_ConfigClockSource>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001eee:	f7ff fc21 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ef2:	4827      	ldr	r0, [pc, #156]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001ef4:	f003 fd02 	bl	80058fc <HAL_TIM_PWM_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001efe:	f7ff fc19 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f02:	4823      	ldr	r0, [pc, #140]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001f04:	f003 ff04 	bl	8005d10 <HAL_TIM_IC_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f0e:	f7ff fc11 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481b      	ldr	r0, [pc, #108]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001f22:	f005 fae3 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001f2c:	f7ff fc02 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f30:	2360      	movs	r3, #96	; 0x60
 8001f32:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001f34:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001f38:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	2200      	movs	r2, #0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4811      	ldr	r0, [pc, #68]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001f4c:	f004 fb06 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8001f56:	f7ff fbed 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001f72:	f004 fa56 	bl	8006422 <HAL_TIM_IC_ConfigChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8001f7c:	f7ff fbda 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <MX_TIM3_Init+0x130>)
 8001f82:	f000 fccd 	bl	8002920 <HAL_TIM_MspPostInit>

}
 8001f86:	bf00      	nop
 8001f88:	3748      	adds	r7, #72	; 0x48
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000378 	.word	0x20000378
 8001f94:	40000400 	.word	0x40000400

08001f98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b092      	sub	sp, #72	; 0x48
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	615a      	str	r2, [r3, #20]
 8001fca:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fcc:	463b      	mov	r3, r7
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <MX_TIM4_Init+0x130>)
 8001fda:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <MX_TIM4_Init+0x134>)
 8001fdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <MX_TIM4_Init+0x130>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <MX_TIM4_Init+0x130>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fea:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <MX_TIM4_Init+0x130>)
 8001fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <MX_TIM4_Init+0x130>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <MX_TIM4_Init+0x130>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ffe:	4832      	ldr	r0, [pc, #200]	; (80020c8 <MX_TIM4_Init+0x130>)
 8002000:	f003 fbb4 	bl	800576c <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800200a:	f7ff fb93 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002012:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002014:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002018:	4619      	mov	r1, r3
 800201a:	482b      	ldr	r0, [pc, #172]	; (80020c8 <MX_TIM4_Init+0x130>)
 800201c:	f004 fbb2 	bl	8006784 <HAL_TIM_ConfigClockSource>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002026:	f7ff fb85 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800202a:	4827      	ldr	r0, [pc, #156]	; (80020c8 <MX_TIM4_Init+0x130>)
 800202c:	f003 fc66 	bl	80058fc <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002036:	f7ff fb7d 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800203a:	4823      	ldr	r0, [pc, #140]	; (80020c8 <MX_TIM4_Init+0x130>)
 800203c:	f003 fe68 	bl	8005d10 <HAL_TIM_IC_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002046:	f7ff fb75 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002056:	4619      	mov	r1, r3
 8002058:	481b      	ldr	r0, [pc, #108]	; (80020c8 <MX_TIM4_Init+0x130>)
 800205a:	f005 fa47 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002064:	f7ff fb66 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	; 0x60
 800206a:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 800206c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8002070:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800207a:	f107 0310 	add.w	r3, r7, #16
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	4811      	ldr	r0, [pc, #68]	; (80020c8 <MX_TIM4_Init+0x130>)
 8002084:	f004 fa6a 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 800208e:	f7ff fb51 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002096:	2301      	movs	r3, #1
 8002098:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80020a2:	463b      	mov	r3, r7
 80020a4:	2204      	movs	r2, #4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4807      	ldr	r0, [pc, #28]	; (80020c8 <MX_TIM4_Init+0x130>)
 80020aa:	f004 f9ba 	bl	8006422 <HAL_TIM_IC_ConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 80020b4:	f7ff fb3e 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <MX_TIM4_Init+0x130>)
 80020ba:	f000 fc31 	bl	8002920 <HAL_TIM_MspPostInit>

}
 80020be:	bf00      	nop
 80020c0:	3748      	adds	r7, #72	; 0x48
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200003c4 	.word	0x200003c4
 80020cc:	40000800 	.word	0x40000800

080020d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b09e      	sub	sp, #120	; 0x78
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	222c      	movs	r2, #44	; 0x2c
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f00a ff25 	bl	800cf68 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800211e:	4b52      	ldr	r3, [pc, #328]	; (8002268 <MX_TIM8_Init+0x198>)
 8002120:	4a52      	ldr	r2, [pc, #328]	; (800226c <MX_TIM8_Init+0x19c>)
 8002122:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8002124:	4b50      	ldr	r3, [pc, #320]	; (8002268 <MX_TIM8_Init+0x198>)
 8002126:	2207      	movs	r2, #7
 8002128:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b4f      	ldr	r3, [pc, #316]	; (8002268 <MX_TIM8_Init+0x198>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002130:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <MX_TIM8_Init+0x198>)
 8002132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002136:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <MX_TIM8_Init+0x198>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <MX_TIM8_Init+0x198>)
 8002140:	2200      	movs	r2, #0
 8002142:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002144:	4b48      	ldr	r3, [pc, #288]	; (8002268 <MX_TIM8_Init+0x198>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800214a:	4847      	ldr	r0, [pc, #284]	; (8002268 <MX_TIM8_Init+0x198>)
 800214c:	f003 fb0e 	bl	800576c <HAL_TIM_Base_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002156:	f7ff faed 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002160:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002164:	4619      	mov	r1, r3
 8002166:	4840      	ldr	r0, [pc, #256]	; (8002268 <MX_TIM8_Init+0x198>)
 8002168:	f004 fb0c 	bl	8006784 <HAL_TIM_ConfigClockSource>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002172:	f7ff fadf 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002176:	483c      	ldr	r0, [pc, #240]	; (8002268 <MX_TIM8_Init+0x198>)
 8002178:	f003 fbc0 	bl	80058fc <HAL_TIM_PWM_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8002182:	f7ff fad7 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002186:	4838      	ldr	r0, [pc, #224]	; (8002268 <MX_TIM8_Init+0x198>)
 8002188:	f003 fdc2 	bl	8005d10 <HAL_TIM_IC_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8002192:	f7ff facf 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021a6:	4619      	mov	r1, r3
 80021a8:	482f      	ldr	r0, [pc, #188]	; (8002268 <MX_TIM8_Init+0x198>)
 80021aa:	f005 f99f 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 80021b4:	f7ff fabe 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b8:	2360      	movs	r3, #96	; 0x60
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80021bc:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80021c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c2:	2300      	movs	r3, #0
 80021c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021c6:	2300      	movs	r3, #0
 80021c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021da:	2200      	movs	r2, #0
 80021dc:	4619      	mov	r1, r3
 80021de:	4822      	ldr	r0, [pc, #136]	; (8002268 <MX_TIM8_Init+0x198>)
 80021e0:	f004 f9bc 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80021ea:	f7ff faa3 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021ee:	2300      	movs	r3, #0
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021f2:	2301      	movs	r3, #1
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002202:	2204      	movs	r2, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4818      	ldr	r0, [pc, #96]	; (8002268 <MX_TIM8_Init+0x198>)
 8002208:	f004 f90b 	bl	8006422 <HAL_TIM_IC_ConfigChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8002212:	f7ff fa8f 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800222a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <MX_TIM8_Init+0x198>)
 800224c:	f005 f9da 	bl	8007604 <HAL_TIMEx_ConfigBreakDeadTime>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8002256:	f7ff fa6d 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <MX_TIM8_Init+0x198>)
 800225c:	f000 fb60 	bl	8002920 <HAL_TIM_MspPostInit>

}
 8002260:	bf00      	nop
 8002262:	3778      	adds	r7, #120	; 0x78
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000410 	.word	0x20000410
 800226c:	40013400 	.word	0x40013400

08002270 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b09e      	sub	sp, #120	; 0x78
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002276:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002284:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002290:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
 80022a0:	615a      	str	r2, [r3, #20]
 80022a2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	222c      	movs	r2, #44	; 0x2c
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00a fe55 	bl	800cf68 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022be:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <MX_TIM15_Init+0x188>)
 80022c0:	4a4e      	ldr	r2, [pc, #312]	; (80023fc <MX_TIM15_Init+0x18c>)
 80022c2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 80022c4:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <MX_TIM15_Init+0x188>)
 80022c6:	2207      	movs	r2, #7
 80022c8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b4b      	ldr	r3, [pc, #300]	; (80023f8 <MX_TIM15_Init+0x188>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80022d0:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <MX_TIM15_Init+0x188>)
 80022d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <MX_TIM15_Init+0x188>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80022de:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <MX_TIM15_Init+0x188>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e4:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <MX_TIM15_Init+0x188>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80022ea:	4843      	ldr	r0, [pc, #268]	; (80023f8 <MX_TIM15_Init+0x188>)
 80022ec:	f003 fa3e 	bl	800576c <HAL_TIM_Base_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80022f6:	f7ff fa1d 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fe:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002300:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002304:	4619      	mov	r1, r3
 8002306:	483c      	ldr	r0, [pc, #240]	; (80023f8 <MX_TIM15_Init+0x188>)
 8002308:	f004 fa3c 	bl	8006784 <HAL_TIM_ConfigClockSource>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8002312:	f7ff fa0f 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002316:	4838      	ldr	r0, [pc, #224]	; (80023f8 <MX_TIM15_Init+0x188>)
 8002318:	f003 faf0 	bl	80058fc <HAL_TIM_PWM_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 8002322:	f7ff fa07 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002326:	4834      	ldr	r0, [pc, #208]	; (80023f8 <MX_TIM15_Init+0x188>)
 8002328:	f003 fcf2 	bl	8005d10 <HAL_TIM_IC_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8002332:	f7ff f9ff 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800233e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002342:	4619      	mov	r1, r3
 8002344:	482c      	ldr	r0, [pc, #176]	; (80023f8 <MX_TIM15_Init+0x188>)
 8002346:	f005 f8d1 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 8002350:	f7ff f9f0 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002354:	2360      	movs	r3, #96	; 0x60
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8002358:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800235c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235e:	2300      	movs	r3, #0
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002362:	2300      	movs	r3, #0
 8002364:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002372:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002376:	2200      	movs	r2, #0
 8002378:	4619      	mov	r1, r3
 800237a:	481f      	ldr	r0, [pc, #124]	; (80023f8 <MX_TIM15_Init+0x188>)
 800237c:	f004 f8ee 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 8002386:	f7ff f9d5 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800238a:	2300      	movs	r3, #0
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800238e:	2301      	movs	r3, #1
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800239a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800239e:	2204      	movs	r2, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4815      	ldr	r0, [pc, #84]	; (80023f8 <MX_TIM15_Init+0x188>)
 80023a4:	f004 f83d 	bl	8006422 <HAL_TIM_IC_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 80023ae:	f7ff f9c1 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4807      	ldr	r0, [pc, #28]	; (80023f8 <MX_TIM15_Init+0x188>)
 80023da:	f005 f913 	bl	8007604 <HAL_TIMEx_ConfigBreakDeadTime>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 80023e4:	f7ff f9a6 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <MX_TIM15_Init+0x188>)
 80023ea:	f000 fa99 	bl	8002920 <HAL_TIM_MspPostInit>

}
 80023ee:	bf00      	nop
 80023f0:	3778      	adds	r7, #120	; 0x78
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000045c 	.word	0x2000045c
 80023fc:	40014000 	.word	0x40014000

08002400 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b092      	sub	sp, #72	; 0x48
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800241a:	463b      	mov	r3, r7
 800241c:	222c      	movs	r2, #44	; 0x2c
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00a fda1 	bl	800cf68 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <MX_TIM16_Init+0xec>)
 8002428:	4a31      	ldr	r2, [pc, #196]	; (80024f0 <MX_TIM16_Init+0xf0>)
 800242a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <MX_TIM16_Init+0xec>)
 800242e:	2207      	movs	r2, #7
 8002430:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <MX_TIM16_Init+0xec>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002438:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <MX_TIM16_Init+0xec>)
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <MX_TIM16_Init+0xec>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002446:	4b29      	ldr	r3, [pc, #164]	; (80024ec <MX_TIM16_Init+0xec>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <MX_TIM16_Init+0xec>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002452:	4826      	ldr	r0, [pc, #152]	; (80024ec <MX_TIM16_Init+0xec>)
 8002454:	f003 f98a 	bl	800576c <HAL_TIM_Base_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800245e:	f7ff f969 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002462:	4822      	ldr	r0, [pc, #136]	; (80024ec <MX_TIM16_Init+0xec>)
 8002464:	f003 fa4a 	bl	80058fc <HAL_TIM_PWM_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800246e:	f7ff f961 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002472:	2360      	movs	r3, #96	; 0x60
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 8002476:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002480:	2300      	movs	r3, #0
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800248c:	2300      	movs	r3, #0
 800248e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	4814      	ldr	r0, [pc, #80]	; (80024ec <MX_TIM16_Init+0xec>)
 800249a:	f004 f85f 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80024a4:	f7ff f946 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80024ca:	463b      	mov	r3, r7
 80024cc:	4619      	mov	r1, r3
 80024ce:	4807      	ldr	r0, [pc, #28]	; (80024ec <MX_TIM16_Init+0xec>)
 80024d0:	f005 f898 	bl	8007604 <HAL_TIMEx_ConfigBreakDeadTime>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80024da:	f7ff f92b 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <MX_TIM16_Init+0xec>)
 80024e0:	f000 fa1e 	bl	8002920 <HAL_TIM_MspPostInit>

}
 80024e4:	bf00      	nop
 80024e6:	3748      	adds	r7, #72	; 0x48
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200004a8 	.word	0x200004a8
 80024f0:	40014400 	.word	0x40014400

080024f4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b092      	sub	sp, #72	; 0x48
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800250e:	463b      	mov	r3, r7
 8002510:	222c      	movs	r2, #44	; 0x2c
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f00a fd27 	bl	800cf68 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <MX_TIM17_Init+0xec>)
 800251c:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <MX_TIM17_Init+0xf0>)
 800251e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7;
 8002520:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <MX_TIM17_Init+0xec>)
 8002522:	2207      	movs	r2, #7
 8002524:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <MX_TIM17_Init+0xec>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800252c:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <MX_TIM17_Init+0xec>)
 800252e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002532:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <MX_TIM17_Init+0xec>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <MX_TIM17_Init+0xec>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <MX_TIM17_Init+0xec>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002546:	4826      	ldr	r0, [pc, #152]	; (80025e0 <MX_TIM17_Init+0xec>)
 8002548:	f003 f910 	bl	800576c <HAL_TIM_Base_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002552:	f7ff f8ef 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002556:	4822      	ldr	r0, [pc, #136]	; (80025e0 <MX_TIM17_Init+0xec>)
 8002558:	f003 f9d0 	bl	80058fc <HAL_TIM_PWM_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002562:	f7ff f8e7 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002566:	2360      	movs	r3, #96	; 0x60
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800256a:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002570:	2300      	movs	r3, #0
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002574:	2300      	movs	r3, #0
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002588:	2200      	movs	r2, #0
 800258a:	4619      	mov	r1, r3
 800258c:	4814      	ldr	r0, [pc, #80]	; (80025e0 <MX_TIM17_Init+0xec>)
 800258e:	f003 ffe5 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002598:	f7ff f8cc 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80025be:	463b      	mov	r3, r7
 80025c0:	4619      	mov	r1, r3
 80025c2:	4807      	ldr	r0, [pc, #28]	; (80025e0 <MX_TIM17_Init+0xec>)
 80025c4:	f005 f81e 	bl	8007604 <HAL_TIMEx_ConfigBreakDeadTime>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 80025ce:	f7ff f8b1 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80025d2:	4803      	ldr	r0, [pc, #12]	; (80025e0 <MX_TIM17_Init+0xec>)
 80025d4:	f000 f9a4 	bl	8002920 <HAL_TIM_MspPostInit>

}
 80025d8:	bf00      	nop
 80025da:	3748      	adds	r7, #72	; 0x48
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200004f4 	.word	0x200004f4
 80025e4:	40014800 	.word	0x40014800

080025e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b096      	sub	sp, #88	; 0x58
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4aa7      	ldr	r2, [pc, #668]	; (80028a4 <HAL_TIM_Base_MspInit+0x2bc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d138      	bne.n	800267c <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260a:	4ba7      	ldr	r3, [pc, #668]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	4aa6      	ldr	r2, [pc, #664]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002614:	6193      	str	r3, [r2, #24]
 8002616:	4ba4      	ldr	r3, [pc, #656]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261e:	643b      	str	r3, [r7, #64]	; 0x40
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002622:	4ba1      	ldr	r3, [pc, #644]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4aa0      	ldr	r2, [pc, #640]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002628:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800262c:	6153      	str	r3, [r2, #20]
 800262e:	4b9e      	ldr	r3, [pc, #632]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800263a:	2302      	movs	r3, #2
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800264a:	2302      	movs	r3, #2
 800264c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002652:	4619      	mov	r1, r3
 8002654:	4895      	ldr	r0, [pc, #596]	; (80028ac <HAL_TIM_Base_MspInit+0x2c4>)
 8002656:	f001 fa0d 	bl	8003a74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2105      	movs	r1, #5
 800265e:	2018      	movs	r0, #24
 8002660:	f001 f966 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002664:	2018      	movs	r0, #24
 8002666:	f001 f97f 	bl	8003968 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2105      	movs	r1, #5
 800266e:	201b      	movs	r0, #27
 8002670:	f001 f95e 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002674:	201b      	movs	r0, #27
 8002676:	f001 f977 	bl	8003968 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800267a:	e146      	b.n	800290a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002684:	d131      	bne.n	80026ea <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002686:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a87      	ldr	r2, [pc, #540]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b85      	ldr	r3, [pc, #532]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b82      	ldr	r3, [pc, #520]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a81      	ldr	r2, [pc, #516]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	6153      	str	r3, [r2, #20]
 80026aa:	4b7f      	ldr	r3, [pc, #508]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026b6:	2302      	movs	r3, #2
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c6:	2301      	movs	r3, #1
 80026c8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026ce:	4619      	mov	r1, r3
 80026d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d4:	f001 f9ce 	bl	8003a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2105      	movs	r1, #5
 80026dc:	201c      	movs	r0, #28
 80026de:	f001 f927 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026e2:	201c      	movs	r0, #28
 80026e4:	f001 f940 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 80026e8:	e10f      	b.n	800290a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM3)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a70      	ldr	r2, [pc, #448]	; (80028b0 <HAL_TIM_Base_MspInit+0x2c8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d131      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026f4:	4b6c      	ldr	r3, [pc, #432]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a6b      	ldr	r2, [pc, #428]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	61d3      	str	r3, [r2, #28]
 8002700:	4b69      	ldr	r3, [pc, #420]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	4a65      	ldr	r2, [pc, #404]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002716:	6153      	str	r3, [r2, #20]
 8002718:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002724:	2310      	movs	r3, #16
 8002726:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002734:	2302      	movs	r3, #2
 8002736:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800273c:	4619      	mov	r1, r3
 800273e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002742:	f001 f997 	bl	8003a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2105      	movs	r1, #5
 800274a:	201d      	movs	r0, #29
 800274c:	f001 f8f0 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002750:	201d      	movs	r0, #29
 8002752:	f001 f909 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 8002756:	e0d8      	b.n	800290a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM4)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a55      	ldr	r2, [pc, #340]	; (80028b4 <HAL_TIM_Base_MspInit+0x2cc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d132      	bne.n	80027c8 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002762:	4b51      	ldr	r3, [pc, #324]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a50      	ldr	r2, [pc, #320]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b4e      	ldr	r3, [pc, #312]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	4b4b      	ldr	r3, [pc, #300]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	4a4a      	ldr	r2, [pc, #296]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	6153      	str	r3, [r2, #20]
 8002786:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80027a4:	230a      	movs	r3, #10
 80027a6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b2:	f001 f95f 	bl	8003a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2105      	movs	r1, #5
 80027ba:	201e      	movs	r0, #30
 80027bc:	f001 f8b8 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027c0:	201e      	movs	r0, #30
 80027c2:	f001 f8d1 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 80027c6:	e0a0      	b.n	800290a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM8)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_TIM_Base_MspInit+0x2d0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d130      	bne.n	8002834 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	4a34      	ldr	r2, [pc, #208]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027dc:	6193      	str	r3, [r2, #24]
 80027de:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ea:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4a2e      	ldr	r2, [pc, #184]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027f4:	6153      	str	r3, [r2, #20]
 80027f6:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002812:	2304      	movs	r3, #4
 8002814:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002816:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800281a:	4619      	mov	r1, r3
 800281c:	4823      	ldr	r0, [pc, #140]	; (80028ac <HAL_TIM_Base_MspInit+0x2c4>)
 800281e:	f001 f929 	bl	8003a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2105      	movs	r1, #5
 8002826:	202e      	movs	r0, #46	; 0x2e
 8002828:	f001 f882 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800282c:	202e      	movs	r0, #46	; 0x2e
 800282e:	f001 f89b 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 8002832:	e06a      	b.n	800290a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM15)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a20      	ldr	r2, [pc, #128]	; (80028bc <HAL_TIM_Base_MspInit+0x2d4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d142      	bne.n	80028c4 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6193      	str	r3, [r2, #24]
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6153      	str	r3, [r2, #20]
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800286e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002872:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002880:	2301      	movs	r3, #1
 8002882:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002888:	4619      	mov	r1, r3
 800288a:	480d      	ldr	r0, [pc, #52]	; (80028c0 <HAL_TIM_Base_MspInit+0x2d8>)
 800288c:	f001 f8f2 	bl	8003a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2105      	movs	r1, #5
 8002894:	2018      	movs	r0, #24
 8002896:	f001 f84b 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800289a:	2018      	movs	r0, #24
 800289c:	f001 f864 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 80028a0:	e033      	b.n	800290a <HAL_TIM_Base_MspInit+0x322>
 80028a2:	bf00      	nop
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40021000 	.word	0x40021000
 80028ac:	48000800 	.word	0x48000800
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800
 80028b8:	40013400 	.word	0x40013400
 80028bc:	40014000 	.word	0x40014000
 80028c0:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a12      	ldr	r2, [pc, #72]	; (8002914 <HAL_TIM_Base_MspInit+0x32c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10c      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0x300>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_TIM_Base_MspInit+0x330>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	4a11      	ldr	r2, [pc, #68]	; (8002918 <HAL_TIM_Base_MspInit+0x330>)
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d8:	6193      	str	r3, [r2, #24]
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_TIM_Base_MspInit+0x330>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
}
 80028e6:	e010      	b.n	800290a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM17)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HAL_TIM_Base_MspInit+0x334>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10b      	bne.n	800290a <HAL_TIM_Base_MspInit+0x322>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_TIM_Base_MspInit+0x330>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_TIM_Base_MspInit+0x330>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6193      	str	r3, [r2, #24]
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_TIM_Base_MspInit+0x330>)
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
}
 800290a:	bf00      	nop
 800290c:	3758      	adds	r7, #88	; 0x58
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40014400 	.word	0x40014400
 8002918:	40021000 	.word	0x40021000
 800291c:	40014800 	.word	0x40014800

08002920 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b090      	sub	sp, #64	; 0x40
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a8b      	ldr	r2, [pc, #556]	; (8002b6c <HAL_TIM_MspPostInit+0x24c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d11c      	bne.n	800297c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002942:	4b8b      	ldr	r3, [pc, #556]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4a8a      	ldr	r2, [pc, #552]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800294c:	6153      	str	r3, [r2, #20]
 800294e:	4b88      	ldr	r3, [pc, #544]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800295a:	2301      	movs	r3, #1
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002962:	2302      	movs	r3, #2
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800296a:	2302      	movs	r3, #2
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002972:	4619      	mov	r1, r3
 8002974:	487f      	ldr	r0, [pc, #508]	; (8002b74 <HAL_TIM_MspPostInit+0x254>)
 8002976:	f001 f87d 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800297a:	e0f2      	b.n	8002b62 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d11d      	bne.n	80029c2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b7a      	ldr	r3, [pc, #488]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4a79      	ldr	r2, [pc, #484]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 800298c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002990:	6153      	str	r3, [r2, #20]
 8002992:	4b77      	ldr	r3, [pc, #476]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800299e:	2301      	movs	r3, #1
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029a6:	2302      	movs	r3, #2
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ae:	2301      	movs	r3, #1
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b6:	4619      	mov	r1, r3
 80029b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029bc:	f001 f85a 	bl	8003a74 <HAL_GPIO_Init>
}
 80029c0:	e0cf      	b.n	8002b62 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6c      	ldr	r2, [pc, #432]	; (8002b78 <HAL_TIM_MspPostInit+0x258>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d11d      	bne.n	8002a08 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	4b68      	ldr	r3, [pc, #416]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4a67      	ldr	r2, [pc, #412]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	6153      	str	r3, [r2, #20]
 80029d8:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	623b      	str	r3, [r7, #32]
 80029e2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029e4:	2340      	movs	r3, #64	; 0x40
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029ec:	2302      	movs	r3, #2
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029f4:	2302      	movs	r3, #2
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a02:	f001 f837 	bl	8003a74 <HAL_GPIO_Init>
}
 8002a06:	e0ac      	b.n	8002b62 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM4)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5b      	ldr	r2, [pc, #364]	; (8002b7c <HAL_TIM_MspPostInit+0x25c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d11e      	bne.n	8002a50 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4a56      	ldr	r2, [pc, #344]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1c:	6153      	str	r3, [r2, #20]
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a34:	2302      	movs	r3, #2
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002a3c:	230a      	movs	r3, #10
 8002a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a44:	4619      	mov	r1, r3
 8002a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4a:	f001 f813 	bl	8003a74 <HAL_GPIO_Init>
}
 8002a4e:	e088      	b.n	8002b62 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM8)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_TIM_MspPostInit+0x260>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d11c      	bne.n	8002a94 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	4a44      	ldr	r2, [pc, #272]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a64:	6153      	str	r3, [r2, #20]
 8002a66:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a72:	2340      	movs	r3, #64	; 0x40
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002a82:	2304      	movs	r3, #4
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4839      	ldr	r0, [pc, #228]	; (8002b74 <HAL_TIM_MspPostInit+0x254>)
 8002a8e:	f000 fff1 	bl	8003a74 <HAL_GPIO_Init>
}
 8002a92:	e066      	b.n	8002b62 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM15)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <HAL_TIM_MspPostInit+0x264>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d11d      	bne.n	8002ada <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	4a33      	ldr	r2, [pc, #204]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa8:	6153      	str	r3, [r2, #20]
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	482d      	ldr	r0, [pc, #180]	; (8002b88 <HAL_TIM_MspPostInit+0x268>)
 8002ad4:	f000 ffce 	bl	8003a74 <HAL_GPIO_Init>
}
 8002ad8:	e043      	b.n	8002b62 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM16)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_TIM_MspPostInit+0x26c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d11c      	bne.n	8002b1e <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aee:	6153      	str	r3, [r2, #20]
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002afc:	2310      	movs	r3, #16
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b04:	2302      	movs	r3, #2
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b14:	4619      	mov	r1, r3
 8002b16:	481c      	ldr	r0, [pc, #112]	; (8002b88 <HAL_TIM_MspPostInit+0x268>)
 8002b18:	f000 ffac 	bl	8003a74 <HAL_GPIO_Init>
}
 8002b1c:	e021      	b.n	8002b62 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM17)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_TIM_MspPostInit+0x270>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d11c      	bne.n	8002b62 <HAL_TIM_MspPostInit+0x242>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b32:	6153      	str	r3, [r2, #20]
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_TIM_MspPostInit+0x250>)
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002b50:	2301      	movs	r3, #1
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f000 ff89 	bl	8003a74 <HAL_GPIO_Init>
}
 8002b62:	bf00      	nop
 8002b64:	3740      	adds	r7, #64	; 0x40
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	48000800 	.word	0x48000800
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800
 8002b80:	40013400 	.word	0x40013400
 8002b84:	40014000 	.word	0x40014000
 8002b88:	48000400 	.word	0x48000400
 8002b8c:	40014400 	.word	0x40014400
 8002b90:	40014800 	.word	0x40014800

08002b94 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <MX_UART4_Init+0x58>)
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <MX_UART4_Init+0x5c>)
 8002b9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <MX_UART4_Init+0x58>)
 8002ba0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ba4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <MX_UART4_Init+0x58>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <MX_UART4_Init+0x58>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <MX_UART4_Init+0x58>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <MX_UART4_Init+0x58>)
 8002bba:	220c      	movs	r2, #12
 8002bbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <MX_UART4_Init+0x58>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <MX_UART4_Init+0x58>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <MX_UART4_Init+0x58>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <MX_UART4_Init+0x58>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <MX_UART4_Init+0x58>)
 8002bd8:	f004 fdb8 	bl	800774c <HAL_UART_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002be2:	f7fe fda7 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000540 	.word	0x20000540
 8002bf0:	40004c00 	.word	0x40004c00

08002bf4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002bfa:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <MX_USART2_UART_Init+0x5c>)
 8002bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c00:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_USART2_UART_Init+0x58>)
 8002c38:	f004 fd88 	bl	800774c <HAL_UART_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c42:	f7fe fd77 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200005c8 	.word	0x200005c8
 8002c50:	40004400 	.word	0x40004400

08002c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	; 0x30
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 031c 	add.w	r3, r7, #28
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d131      	bne.n	8002cda <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4a32      	ldr	r2, [pc, #200]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002c7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c80:	61d3      	str	r3, [r2, #28]
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002c94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c98:	6153      	str	r3, [r2, #20]
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ca6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002cb8:	2305      	movs	r3, #5
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4821      	ldr	r0, [pc, #132]	; (8002d48 <HAL_UART_MspInit+0xf4>)
 8002cc4:	f000 fed6 	bl	8003a74 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2105      	movs	r1, #5
 8002ccc:	2034      	movs	r0, #52	; 0x34
 8002cce:	f000 fe2f 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002cd2:	2034      	movs	r0, #52	; 0x34
 8002cd4:	f000 fe48 	bl	8003968 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002cd8:	e02d      	b.n	8002d36 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_UART_MspInit+0xf8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d128      	bne.n	8002d36 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cee:	61d3      	str	r3, [r2, #28]
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d06:	6153      	str	r3, [r2, #20]
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d14:	230c      	movs	r3, #12
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d24:	2307      	movs	r3, #7
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d32:	f000 fe9f 	bl	8003a74 <HAL_GPIO_Init>
}
 8002d36:	bf00      	nop
 8002d38:	3730      	adds	r7, #48	; 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40004c00 	.word	0x40004c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	48000800 	.word	0x48000800
 8002d4c:	40004400 	.word	0x40004400

08002d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d88 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d54:	f7fe ff08 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d5a:	490d      	ldr	r1, [pc, #52]	; (8002d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <LoopForever+0xe>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d60:	e002      	b.n	8002d68 <LoopCopyDataInit>

08002d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d66:	3304      	adds	r3, #4

08002d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d6c:	d3f9      	bcc.n	8002d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d70:	4c0a      	ldr	r4, [pc, #40]	; (8002d9c <LoopForever+0x16>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d74:	e001      	b.n	8002d7a <LoopFillZerobss>

08002d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d78:	3204      	adds	r2, #4

08002d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d7c:	d3fb      	bcc.n	8002d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d7e:	f00a f9a1 	bl	800d0c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d82:	f7fe fc3d 	bl	8001600 <main>

08002d86 <LoopForever>:

LoopForever:
    b LoopForever
 8002d86:	e7fe      	b.n	8002d86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d90:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002d94:	0800f564 	.word	0x0800f564
  ldr r2, =_sbss
 8002d98:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002d9c:	20002a14 	.word	0x20002a14

08002da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002da0:	e7fe      	b.n	8002da0 <ADC1_2_IRQHandler>
	...

08002da4 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	//printf("----------------------> is %c\n",temp);
	if( BLUETOOTH_CONDITION(temp) ){
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b46      	cmp	r3, #70	; 0x46
 8002db2:	d037      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b42      	cmp	r3, #66	; 0x42
 8002dba:	d033      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b47      	cmp	r3, #71	; 0x47
 8002dc2:	d02f      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b49      	cmp	r3, #73	; 0x49
 8002dca:	d02b      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b48      	cmp	r3, #72	; 0x48
 8002dd2:	d027      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b4a      	cmp	r3, #74	; 0x4a
 8002dda:	d023      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b52      	cmp	r3, #82	; 0x52
 8002de2:	d01f      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b4c      	cmp	r3, #76	; 0x4c
 8002dea:	d01b      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b53      	cmp	r3, #83	; 0x53
 8002df2:	d017      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b23      	cmp	r3, #35	; 0x23
 8002dfa:	d013      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002dfc:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d00f      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b21      	cmp	r3, #33	; 0x21
 8002e0a:	d00b      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b57      	cmp	r3, #87	; 0x57
 8002e12:	d007      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b55      	cmp	r3, #85	; 0x55
 8002e1a:	d003      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x80>
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b77      	cmp	r3, #119	; 0x77
 8002e22:	d103      	bne.n	8002e2c <HAL_UART_RxCpltCallback+0x88>
		Bluetooth_RX_Data = temp;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_UART_RxCpltCallback+0xa0>)
 8002e2a:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <HAL_UART_RxCpltCallback+0x9c>)
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f004 fcd9 	bl	80077e8 <HAL_UART_Receive_IT>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000650 	.word	0x20000650
 8002e44:	20000064 	.word	0x20000064

08002e48 <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e009      	b.n	8002e6e <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	791b      	ldrb	r3, [r3, #4]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	4904      	ldr	r1, [pc, #16]	; (8002e78 <ECU_Bluetooth_ReciveData+0x30>)
 8002e68:	f004 fcbe 	bl	80077e8 <HAL_UART_Receive_IT>

	return ECU_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000650 	.word	0x20000650

08002e7c <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07e      	b.n	8002f90 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <ECU_Motor_GeneratePWM+0x34>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e045      	b.n	8002f3c <ECU_Motor_GeneratePWM+0xc0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d10a      	bne.n	8002ece <ECU_Motor_GeneratePWM+0x52>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	e036      	b.n	8002f3c <ECU_Motor_GeneratePWM+0xc0>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d10a      	bne.n	8002eec <ECU_Motor_GeneratePWM+0x70>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e027      	b.n	8002f3c <ECU_Motor_GeneratePWM+0xc0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d10a      	bne.n	8002f0a <ECU_Motor_GeneratePWM+0x8e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e018      	b.n	8002f3c <ECU_Motor_GeneratePWM+0xc0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d10a      	bne.n	8002f28 <ECU_Motor_GeneratePWM+0xac>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e009      	b.n	8002f3c <ECU_Motor_GeneratePWM+0xc0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e025      	b.n	8002f90 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <ECU_Motor_GeneratePWM+0x11c>)
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f78:	ee17 2a90 	vmov	r2, s15
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f002 fd19 	bl	80059c0 <HAL_TIM_PWM_Start>

	return ECU_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	000f4240 	.word	0x000f4240

08002f9c <ECU_Motor_StopPWM>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_StopPWM(motor_obj_t *motor_obj){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <ECU_Motor_StopPWM+0x12>
	{
		return ECU_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e008      	b.n	8002fc0 <ECU_Motor_StopPWM+0x24>
	}

	/* Stop the PWM signal generation */
	HAL_TIM_PWM_Stop(motor_obj->htim, motor_obj->PWM_Channel);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f002 fe0d 	bl	8005bd8 <HAL_TIM_PWM_Stop>

	return ECU_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <ECU_Motor_ChangeSpeed>:
  * @param  speed: Speed of motor
  *         the can be either ( &high_speed or &medium_speed or &low_speed )
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_ChangeSpeed(motor_obj_t *motor_obj, const motor_speed_t *speed){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ( (NULL == motor_obj) || (NULL == speed))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <ECU_Motor_ChangeSpeed+0x16>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <ECU_Motor_ChangeSpeed+0x1a>
	{
		return ECU_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00e      	b.n	8003000 <ECU_Motor_ChangeSpeed+0x38>
	}

	/* Stop the old PWM */
	ECU_Motor_StopPWM(motor_obj);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffda 	bl	8002f9c <ECU_Motor_StopPWM>

	/* Update the Frequency of PWM Signal */
	motor_obj->speed.Frequency = speed->Frequency;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	609a      	str	r2, [r3, #8]

	/* Update the Duty Cycle of PWM Signal */
	motor_obj->speed.Duty_Cycle = speed->Duty_Cycle;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]

	/* Starts the Updated PWM signal generation */
	ECU_Motor_GeneratePWM(motor_obj);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff3f 	bl	8002e7c <ECU_Motor_GeneratePWM>

	return ECU_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <ECU_Motor_NextStep+0x16>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e099      	b.n	8003156 <ECU_Motor_NextStep+0x14e>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	3b21      	subs	r3, #33	; 0x21
 8003028:	2b32      	cmp	r3, #50	; 0x32
 800302a:	f200 8090 	bhi.w	800314e <ECU_Motor_NextStep+0x146>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <ECU_Motor_NextStep+0x2c>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	08003147 	.word	0x08003147
 8003038:	0800314f 	.word	0x0800314f
 800303c:	08003137 	.word	0x08003137
 8003040:	0800314f 	.word	0x0800314f
 8003044:	0800314f 	.word	0x0800314f
 8003048:	0800314f 	.word	0x0800314f
 800304c:	0800314f 	.word	0x0800314f
 8003050:	0800314f 	.word	0x0800314f
 8003054:	0800314f 	.word	0x0800314f
 8003058:	0800314f 	.word	0x0800314f
 800305c:	0800314f 	.word	0x0800314f
 8003060:	0800314f 	.word	0x0800314f
 8003064:	0800314f 	.word	0x0800314f
 8003068:	0800314f 	.word	0x0800314f
 800306c:	0800314f 	.word	0x0800314f
 8003070:	0800314f 	.word	0x0800314f
 8003074:	0800314f 	.word	0x0800314f
 8003078:	0800314f 	.word	0x0800314f
 800307c:	0800314f 	.word	0x0800314f
 8003080:	0800314f 	.word	0x0800314f
 8003084:	0800314f 	.word	0x0800314f
 8003088:	0800314f 	.word	0x0800314f
 800308c:	0800314f 	.word	0x0800314f
 8003090:	0800314f 	.word	0x0800314f
 8003094:	0800314f 	.word	0x0800314f
 8003098:	0800314f 	.word	0x0800314f
 800309c:	0800314f 	.word	0x0800314f
 80030a0:	0800314f 	.word	0x0800314f
 80030a4:	0800314f 	.word	0x0800314f
 80030a8:	0800314f 	.word	0x0800314f
 80030ac:	0800314f 	.word	0x0800314f
 80030b0:	0800313f 	.word	0x0800313f
 80030b4:	0800314f 	.word	0x0800314f
 80030b8:	08003107 	.word	0x08003107
 80030bc:	0800314f 	.word	0x0800314f
 80030c0:	0800314f 	.word	0x0800314f
 80030c4:	0800314f 	.word	0x0800314f
 80030c8:	08003101 	.word	0x08003101
 80030cc:	0800310d 	.word	0x0800310d
 80030d0:	08003119 	.word	0x08003119
 80030d4:	08003113 	.word	0x08003113
 80030d8:	0800311f 	.word	0x0800311f
 80030dc:	0800314f 	.word	0x0800314f
 80030e0:	0800312b 	.word	0x0800312b
 80030e4:	0800314f 	.word	0x0800314f
 80030e8:	0800314f 	.word	0x0800314f
 80030ec:	0800314f 	.word	0x0800314f
 80030f0:	0800314f 	.word	0x0800314f
 80030f4:	0800314f 	.word	0x0800314f
 80030f8:	08003125 	.word	0x08003125
 80030fc:	08003131 	.word	0x08003131
	{
		case FORWARD:       ECU_Motor_MoveForward     (); break;
 8003100:	f000 f834 	bl	800316c <ECU_Motor_MoveForward>
 8003104:	e026      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case REVERSE:       ECU_Motor_MoveReverse     (); break;
 8003106:	f000 f853 	bl	80031b0 <ECU_Motor_MoveReverse>
 800310a:	e023      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (); break;
 800310c:	f000 f896 	bl	800323c <ECU_Motor_MoveForwardLeft>
 8003110:	e020      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(); break;
 8003112:	f000 f86f 	bl	80031f4 <ECU_Motor_MoveForwardRight>
 8003116:	e01d      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (); break;
 8003118:	f000 f8d8 	bl	80032cc <ECU_Motor_MoveReverseLeft>
 800311c:	e01a      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(); break;
 800311e:	f000 f8b1 	bl	8003284 <ECU_Motor_MoveReverseRight>
 8003122:	e017      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case RIGHT:         ECU_Motor_MoveRight       (); break;
 8003124:	f000 f91a 	bl	800335c <ECU_Motor_MoveRight>
 8003128:	e014      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case LEFT:          ECU_Motor_MoveLeft        (); break;
 800312a:	f000 f941 	bl	80033b0 <ECU_Motor_MoveLeft>
 800312e:	e011      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case STOP:          ECU_Motor_Stop            (); break;
 8003130:	f000 f8f0 	bl	8003314 <ECU_Motor_Stop>
 8003134:	e00e      	b.n	8003154 <ECU_Motor_NextStep+0x14c>
		case HIGH_SPEED:    ECU_Motor_ChangeSpeed     (motor_obj, &high_speed);
 8003136:	490a      	ldr	r1, [pc, #40]	; (8003160 <ECU_Motor_NextStep+0x158>)
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff45 	bl	8002fc8 <ECU_Motor_ChangeSpeed>
		case MEDIUM_SPEED:  ECU_Motor_ChangeSpeed     (motor_obj, &medium_speed);
 800313e:	4909      	ldr	r1, [pc, #36]	; (8003164 <ECU_Motor_NextStep+0x15c>)
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff41 	bl	8002fc8 <ECU_Motor_ChangeSpeed>
		case LOW_SPEED:     ECU_Motor_ChangeSpeed     (motor_obj, &low_speed);
 8003146:	4908      	ldr	r1, [pc, #32]	; (8003168 <ECU_Motor_NextStep+0x160>)
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff3d 	bl	8002fc8 <ECU_Motor_ChangeSpeed>
		default:            ECU_Motor_Stop            (); break;
 800314e:	f000 f8e1 	bl	8003314 <ECU_Motor_Stop>
 8003152:	bf00      	nop
	}

	return ECU_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000068 	.word	0x20000068
 8003164:	20000070 	.word	0x20000070
 8003168:	20000078 	.word	0x20000078

0800316c <ECU_Motor_MoveForward>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(){
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0


	//printf("Motor_MoveForward\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003176:	480d      	ldr	r0, [pc, #52]	; (80031ac <ECU_Motor_MoveForward+0x40>)
 8003178:	f000 fe06 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800317c:	2200      	movs	r2, #0
 800317e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003182:	480a      	ldr	r0, [pc, #40]	; (80031ac <ECU_Motor_MoveForward+0x40>)
 8003184:	f000 fe00 	bl	8003d88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003188:	2201      	movs	r2, #1
 800318a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800318e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003192:	f000 fdf9 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800319c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a0:	f000 fdf2 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	48000800 	.word	0x48000800

080031b0 <ECU_Motor_MoveReverse>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0


	//printf("MoveReverse\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80031b4:	2200      	movs	r2, #0
 80031b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ba:	480d      	ldr	r0, [pc, #52]	; (80031f0 <ECU_Motor_MoveReverse+0x40>)
 80031bc:	f000 fde4 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80031c0:	2200      	movs	r2, #0
 80031c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031c6:	480a      	ldr	r0, [pc, #40]	; (80031f0 <ECU_Motor_MoveReverse+0x40>)
 80031c8:	f000 fdde 	bl	8003d88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d6:	f000 fdd7 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80031da:	2201      	movs	r2, #1
 80031dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e4:	f000 fdd0 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	48000800 	.word	0x48000800

080031f4 <ECU_Motor_MoveForwardRight>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0

	//printf("MoveForwardRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80031f8:	2201      	movs	r2, #1
 80031fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031fe:	480e      	ldr	r0, [pc, #56]	; (8003238 <ECU_Motor_MoveForwardRight+0x44>)
 8003200:	f000 fdc2 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003204:	2200      	movs	r2, #0
 8003206:	f44f 7100 	mov.w	r1, #512	; 0x200
 800320a:	480b      	ldr	r0, [pc, #44]	; (8003238 <ECU_Motor_MoveForwardRight+0x44>)
 800320c:	f000 fdbc 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003210:	2064      	movs	r0, #100	; 0x64
 8003212:	f000 fab1 	bl	8003778 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003216:	2201      	movs	r2, #1
 8003218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800321c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003220:	f000 fdb2 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003224:	2200      	movs	r2, #0
 8003226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800322a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800322e:	f000 fdab 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	48000800 	.word	0x48000800

0800323c <ECU_Motor_MoveForwardLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(){
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0

	//printf("MoveForwardLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003246:	480e      	ldr	r0, [pc, #56]	; (8003280 <ECU_Motor_MoveForwardLeft+0x44>)
 8003248:	f000 fd9e 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800324c:	2201      	movs	r2, #1
 800324e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003252:	480b      	ldr	r0, [pc, #44]	; (8003280 <ECU_Motor_MoveForwardLeft+0x44>)
 8003254:	f000 fd98 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003258:	2064      	movs	r0, #100	; 0x64
 800325a:	f000 fa8d 	bl	8003778 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800325e:	2201      	movs	r2, #1
 8003260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003268:	f000 fd8e 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800326c:	2200      	movs	r2, #0
 800326e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003276:	f000 fd87 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	48000800 	.word	0x48000800

08003284 <ECU_Motor_MoveReverseRight>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(){
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0

	//printf("MoveReverseRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003288:	2201      	movs	r2, #1
 800328a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800328e:	480e      	ldr	r0, [pc, #56]	; (80032c8 <ECU_Motor_MoveReverseRight+0x44>)
 8003290:	f000 fd7a 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800329a:	480b      	ldr	r0, [pc, #44]	; (80032c8 <ECU_Motor_MoveReverseRight+0x44>)
 800329c:	f000 fd74 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032a0:	2064      	movs	r0, #100	; 0x64
 80032a2:	f000 fa69 	bl	8003778 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80032a6:	2200      	movs	r2, #0
 80032a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b0:	f000 fd6a 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80032b4:	2201      	movs	r2, #1
 80032b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032be:	f000 fd63 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	48000800 	.word	0x48000800

080032cc <ECU_Motor_MoveReverseLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0

	//printf("MoveReverseLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80032d0:	2200      	movs	r2, #0
 80032d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032d6:	480e      	ldr	r0, [pc, #56]	; (8003310 <ECU_Motor_MoveReverseLeft+0x44>)
 80032d8:	f000 fd56 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e2:	480b      	ldr	r0, [pc, #44]	; (8003310 <ECU_Motor_MoveReverseLeft+0x44>)
 80032e4:	f000 fd50 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032e8:	2064      	movs	r0, #100	; 0x64
 80032ea:	f000 fa45 	bl	8003778 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80032ee:	2200      	movs	r2, #0
 80032f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f8:	f000 fd46 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80032fc:	2201      	movs	r2, #1
 80032fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003306:	f000 fd3f 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	48000800 	.word	0x48000800

08003314 <ECU_Motor_Stop>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(){
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0

	//printf("Stop\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003318:	2200      	movs	r2, #0
 800331a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800331e:	480e      	ldr	r0, [pc, #56]	; (8003358 <ECU_Motor_Stop+0x44>)
 8003320:	f000 fd32 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003324:	2200      	movs	r2, #0
 8003326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800332a:	480b      	ldr	r0, [pc, #44]	; (8003358 <ECU_Motor_Stop+0x44>)
 800332c:	f000 fd2c 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8003330:	2032      	movs	r0, #50	; 0x32
 8003332:	f000 fa21 	bl	8003778 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003336:	2201      	movs	r2, #1
 8003338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800333c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003340:	f000 fd22 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003344:	2201      	movs	r2, #1
 8003346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800334a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800334e:	f000 fd1b 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	48000800 	.word	0x48000800

0800335c <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e01a      	b.n	80033a4 <ECU_Motor_MoveRight+0x48>

	//printf("MoveRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800336e:	2201      	movs	r2, #1
 8003370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003374:	480d      	ldr	r0, [pc, #52]	; (80033ac <ECU_Motor_MoveRight+0x50>)
 8003376:	f000 fd07 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800337a:	2200      	movs	r2, #0
 800337c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003380:	480a      	ldr	r0, [pc, #40]	; (80033ac <ECU_Motor_MoveRight+0x50>)
 8003382:	f000 fd01 	bl	8003d88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003386:	2200      	movs	r2, #0
 8003388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800338c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003390:	f000 fcfa 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003394:	2200      	movs	r2, #0
 8003396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800339a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339e:	f000 fcf3 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	48000800 	.word	0x48000800

080033b0 <ECU_Motor_MoveLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0

	//printf("MoveLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ba:	480d      	ldr	r0, [pc, #52]	; (80033f0 <ECU_Motor_MoveLeft+0x40>)
 80033bc:	f000 fce4 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80033c0:	2201      	movs	r2, #1
 80033c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033c6:	480a      	ldr	r0, [pc, #40]	; (80033f0 <ECU_Motor_MoveLeft+0x40>)
 80033c8:	f000 fcde 	bl	8003d88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80033cc:	2200      	movs	r2, #0
 80033ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d6:	f000 fcd7 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80033da:	2200      	movs	r2, #0
 80033dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e4:	f000 fcd0 	bl	8003d88 <HAL_GPIO_WritePin>

	return ECU_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	48000800 	.word	0x48000800

080033f4 <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7f1b      	ldrb	r3, [r3, #28]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d145      	bne.n	8003490 <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	4b23      	ldr	r3, [pc, #140]	; (800349c <HAL_TIM_IC_CaptureCallback+0xa8>)
 800340e:	5c9b      	ldrb	r3, [r3, r2]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d114      	bne.n	800343e <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8003414:	2100      	movs	r1, #0
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f002 fbde 	bl	8005bd8 <HAL_TIM_PWM_Stop>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8003426:	4413      	add	r3, r2
 8003428:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800342a:	7812      	ldrb	r2, [r2, #0]
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	4611      	mov	r1, r2
 8003430:	4a1a      	ldr	r2, [pc, #104]	; (800349c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003432:	440a      	add	r2, r1
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8e0 	bl	80035fc <IC_first_Capture>
		}

	}
	else{/* Do Nothing */}

}
 800343c:	e028      	b.n	8003490 <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003448:	5c9b      	ldrb	r3, [r3, r2]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d120      	bne.n	8003490 <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8003458:	1899      	adds	r1, r3, r2
 800345a:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8003464:	441a      	add	r2, r3
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	480e      	ldr	r0, [pc, #56]	; (80034a8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003470:	4418      	add	r0, r3
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461c      	mov	r4, r3
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_TIM_IC_CaptureCallback+0xa8>)
 800347c:	4423      	add	r3, r4
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	4603      	mov	r3, r0
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8e4 	bl	8003650 <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 8003488:	2104      	movs	r1, #4
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f002 fdec 	bl	8006068 <HAL_TIM_IC_Stop_IT>
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}
 8003498:	20000688 	.word	0x20000688
 800349c:	2000068c 	.word	0x2000068c
 80034a0:	20000694 	.word	0x20000694
 80034a4:	200006ac 	.word	0x200006ac
 80034a8:	200006c4 	.word	0x200006c4

080034ac <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00f      	b.n	80034de <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 80034be:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80034e8 <ECU_Ultrasonic_Read+0x3c>
 80034c2:	f242 7110 	movw	r1, #10000	; 0x2710
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f810 	bl	80034ec <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f002 fc7c 	bl	8005dd4 <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	3a83126f 	.word	0x3a83126f

080034ec <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e077      	b.n	80035f4 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <ECU_Ultrasonic_GenerateTrigger+0x36>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e045      	b.n	80035ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b04      	cmp	r3, #4
 8003528:	d10a      	bne.n	8003540 <ECU_Ultrasonic_GenerateTrigger+0x54>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e036      	b.n	80035ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d10a      	bne.n	800355e <ECU_Ultrasonic_GenerateTrigger+0x72>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e027      	b.n	80035ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d10a      	bne.n	800357c <ECU_Ultrasonic_GenerateTrigger+0x90>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e018      	b.n	80035ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b10      	cmp	r3, #16
 8003582:	d10a      	bne.n	800359a <ECU_Ultrasonic_GenerateTrigger+0xae>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	bf14      	ite	ne
 8003592:	2301      	movne	r3, #1
 8003594:	2300      	moveq	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e009      	b.n	80035ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01e      	b.n	80035f4 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035dc:	ee17 2a90 	vmov	r2, s15
 80035e0:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f002 f9e7 	bl	80059c0 <HAL_TIM_PWM_Start>

	return ECU_OK;;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003608:	2104      	movs	r1, #4
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f003 f984 	bl	8006918 <HAL_TIM_ReadCapturedValue>
 8003610:	4602      	mov	r2, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003634:	621a      	str	r2, [r3, #32]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0220 	orr.w	r2, r2, #32
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800365e:	2104      	movs	r1, #4
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f003 f959 	bl	8006918 <HAL_TIM_ReadCapturedValue>
 8003666:	4602      	mov	r2, r0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d307      	bcc.n	8003690 <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1ad2      	subs	r2, r2, r3
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e009      	b.n	80036a4 <IC_second_Capture+0x54>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800369e:	33ff      	adds	r3, #255	; 0xff
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	6013      	str	r3, [r2, #0]
		//printf("sensor %d --------> overflow\n",sensor_index+1);
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003700 <IC_second_Capture+0xb0>
 80036b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <IC_second_Capture+0xb4>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461c      	mov	r4, r3
 80036c0:	ee16 0a90 	vmov	r0, s13
 80036c4:	f7fc ff48 	bl	8000558 <__aeabi_f2d>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	480e      	ldr	r0, [pc, #56]	; (8003708 <IC_second_Capture+0xb8>)
 80036ce:	00e1      	lsls	r1, r4, #3
 80036d0:	4401      	add	r1, r0
 80036d2:	e9c1 2300 	strd	r2, r3, [r1]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a1a      	ldr	r2, [r3, #32]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ea:	621a      	str	r2, [r3, #32]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a12      	ldr	r2, [r2, #32]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	42680000 	.word	0x42680000
 8003704:	20000688 	.word	0x20000688
 8003708:	20000658 	.word	0x20000658

0800370c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_Init+0x28>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a07      	ldr	r2, [pc, #28]	; (8003734 <HAL_Init+0x28>)
 8003716:	f043 0310 	orr.w	r3, r3, #16
 800371a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371c:	2003      	movs	r0, #3
 800371e:	f000 f8fc 	bl	800391a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003722:	200f      	movs	r0, #15
 8003724:	f7fe f834 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003728:	f7fe f80a 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40022000 	.word	0x40022000

08003738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000084 	.word	0x20000084
 800375c:	200006dc 	.word	0x200006dc

08003760 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;  
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	200006dc 	.word	0x200006dc

08003778 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff ffee 	bl	8003760 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffde 	bl	8003760 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000084 	.word	0x20000084

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	; (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	; (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ff4c 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003942:	f7ff ff61 	bl	8003808 <__NVIC_GetPriorityGrouping>
 8003946:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	6978      	ldr	r0, [r7, #20]
 800394e:	f7ff ffb1 	bl	80038b4 <NVIC_EncodePriority>
 8003952:	4602      	mov	r2, r0
 8003954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff80 	bl	8003860 <__NVIC_SetPriority>
}
 8003960:	bf00      	nop
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff54 	bl	8003824 <__NVIC_EnableIRQ>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003992:	2b02      	cmp	r3, #2
 8003994:	d008      	beq.n	80039a8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e020      	b.n	80039ea <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 020e 	bic.w	r2, r2, #14
 80039b6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d005      	beq.n	8003a18 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e027      	b.n	8003a68 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 020e 	bic.w	r2, r2, #14
 8003a26:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f202 	lsl.w	r2, r1, r2
 8003a46:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
    } 
  }
  return status;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a82:	e160      	b.n	8003d46 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	4013      	ands	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8152 	beq.w	8003d40 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d005      	beq.n	8003ab4 <HAL_GPIO_Init+0x40>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d130      	bne.n	8003b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aea:	2201      	movs	r2, #1
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	f003 0201 	and.w	r2, r3, #1
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d017      	beq.n	8003b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d123      	bne.n	8003ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	08da      	lsrs	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3208      	adds	r2, #8
 8003b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	220f      	movs	r2, #15
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	08da      	lsrs	r2, r3, #3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3208      	adds	r2, #8
 8003ba0:	6939      	ldr	r1, [r7, #16]
 8003ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 0203 	and.w	r2, r3, #3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80ac 	beq.w	8003d40 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be8:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_GPIO_Init+0x2f0>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <HAL_GPIO_Init+0x2f0>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6193      	str	r3, [r2, #24]
 8003bf4:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_GPIO_Init+0x2f0>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c00:	4a59      	ldr	r2, [pc, #356]	; (8003d68 <HAL_GPIO_Init+0x2f4>)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3302      	adds	r3, #2
 8003c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	220f      	movs	r2, #15
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c2a:	d025      	beq.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a4f      	ldr	r2, [pc, #316]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d01f      	beq.n	8003c74 <HAL_GPIO_Init+0x200>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a4e      	ldr	r2, [pc, #312]	; (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d019      	beq.n	8003c70 <HAL_GPIO_Init+0x1fc>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a4d      	ldr	r2, [pc, #308]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00d      	beq.n	8003c68 <HAL_GPIO_Init+0x1f4>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_GPIO_Init+0x308>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <HAL_GPIO_Init+0x1f0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <HAL_GPIO_Init+0x30c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_GPIO_Init+0x1ec>
 8003c5c:	2306      	movs	r3, #6
 8003c5e:	e00c      	b.n	8003c7a <HAL_GPIO_Init+0x206>
 8003c60:	2307      	movs	r3, #7
 8003c62:	e00a      	b.n	8003c7a <HAL_GPIO_Init+0x206>
 8003c64:	2305      	movs	r3, #5
 8003c66:	e008      	b.n	8003c7a <HAL_GPIO_Init+0x206>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	e006      	b.n	8003c7a <HAL_GPIO_Init+0x206>
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e004      	b.n	8003c7a <HAL_GPIO_Init+0x206>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e002      	b.n	8003c7a <HAL_GPIO_Init+0x206>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_GPIO_Init+0x206>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	f002 0203 	and.w	r2, r2, #3
 8003c80:	0092      	lsls	r2, r2, #2
 8003c82:	4093      	lsls	r3, r2
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c8a:	4937      	ldr	r1, [pc, #220]	; (8003d68 <HAL_GPIO_Init+0x2f4>)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	3302      	adds	r3, #2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c98:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003cbc:	4a31      	ldr	r2, [pc, #196]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ce6:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d10:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d3a:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	3301      	adds	r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f47f ae97 	bne.w	8003a84 <HAL_GPIO_Init+0x10>
  }
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	48000400 	.word	0x48000400
 8003d70:	48000800 	.word	0x48000800
 8003d74:	48000c00 	.word	0x48000c00
 8003d78:	48001000 	.word	0x48001000
 8003d7c:	48001400 	.word	0x48001400
 8003d80:	48001800 	.word	0x48001800
 8003d84:	40010400 	.word	0x40010400

08003d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	807b      	strh	r3, [r7, #2]
 8003d94:	4613      	mov	r3, r2
 8003d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d98:	787b      	ldrb	r3, [r7, #1]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d9e:	887a      	ldrh	r2, [r7, #2]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003da4:	e002      	b.n	8003dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f001 b83a 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 816f 	beq.w	80040d2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003df4:	4bb5      	ldr	r3, [pc, #724]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d00c      	beq.n	8003e1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e00:	4bb2      	ldr	r3, [pc, #712]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d15c      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x10e>
 8003e0c:	4baf      	ldr	r3, [pc, #700]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d155      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x10e>
 8003e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e1e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d102      	bne.n	8003e4c <HAL_RCC_OscConfig+0x94>
 8003e46:	4ba1      	ldr	r3, [pc, #644]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	e015      	b.n	8003e78 <HAL_RCC_OscConfig+0xc0>
 8003e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003e58:	fa93 f3a3 	rbit	r3, r3
 8003e5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003e68:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003e6c:	fa93 f3a3 	rbit	r3, r3
 8003e70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003e74:	4b95      	ldr	r3, [pc, #596]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e7c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003e80:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003e8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003e90:	fab2 f282 	clz	r2, r2
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	f042 0220 	orr.w	r2, r2, #32
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	f002 021f 	and.w	r2, r2, #31
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8111 	beq.w	80040d0 <HAL_RCC_OscConfig+0x318>
 8003eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 8108 	bne.w	80040d0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f000 bfc6 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x12e>
 8003ed8:	4b7c      	ldr	r3, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a7b      	ldr	r2, [pc, #492]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e036      	b.n	8003f54 <HAL_RCC_OscConfig+0x19c>
 8003ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x158>
 8003ef6:	4b75      	ldr	r3, [pc, #468]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a74      	ldr	r2, [pc, #464]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b72      	ldr	r3, [pc, #456]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a71      	ldr	r2, [pc, #452]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e021      	b.n	8003f54 <HAL_RCC_OscConfig+0x19c>
 8003f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x184>
 8003f22:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a69      	ldr	r2, [pc, #420]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b67      	ldr	r3, [pc, #412]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a66      	ldr	r2, [pc, #408]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0x19c>
 8003f3c:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a62      	ldr	r2, [pc, #392]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b60      	ldr	r3, [pc, #384]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5f      	ldr	r2, [pc, #380]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f52:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d059      	beq.n	8004018 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7ff fbfc 	bl	8003760 <HAL_GetTick>
 8003f68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f6e:	f7ff fbf7 	bl	8003760 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d902      	bls.n	8003f84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	f000 bf67 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>
 8003f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003f98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x1fe>
 8003fb0:	4b46      	ldr	r3, [pc, #280]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCC_OscConfig+0x22a>
 8003fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003fd2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fe6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003fea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003fee:	fa92 f2a2 	rbit	r2, r2
 8003ff2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003ff6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003ffa:	fab2 f282 	clz	r2, r2
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	f042 0220 	orr.w	r2, r2, #32
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f002 021f 	and.w	r2, r2, #31
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f202 	lsl.w	r2, r1, r2
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ab      	beq.n	8003f6e <HAL_RCC_OscConfig+0x1b6>
 8004016:	e05c      	b.n	80040d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7ff fba2 	bl	8003760 <HAL_GetTick>
 800401c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004022:	f7ff fb9d 	bl	8003760 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d902      	bls.n	8004038 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	f000 bf0d 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800403c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800404c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d102      	bne.n	800406a <HAL_RCC_OscConfig+0x2b2>
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	e015      	b.n	8004096 <HAL_RCC_OscConfig+0x2de>
 800406a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800406e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800407e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004082:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004086:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCC_OscConfig+0x314>)
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800409a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800409e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80040a2:	fa92 f2a2 	rbit	r2, r2
 80040a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80040aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80040ae:	fab2 f282 	clz	r2, r2
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	f042 0220 	orr.w	r2, r2, #32
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	f002 021f 	and.w	r2, r2, #31
 80040be:	2101      	movs	r1, #1
 80040c0:	fa01 f202 	lsl.w	r2, r1, r2
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ab      	bne.n	8004022 <HAL_RCC_OscConfig+0x26a>
 80040ca:	e002      	b.n	80040d2 <HAL_RCC_OscConfig+0x31a>
 80040cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 817f 	beq.w	80043e6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80040e8:	4ba7      	ldr	r3, [pc, #668]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00c      	beq.n	800410e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80040f4:	4ba4      	ldr	r3, [pc, #656]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d173      	bne.n	80041e8 <HAL_RCC_OscConfig+0x430>
 8004100:	4ba1      	ldr	r3, [pc, #644]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410c:	d16c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x430>
 800410e:	2302      	movs	r3, #2
 8004110:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004120:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d102      	bne.n	800413e <HAL_RCC_OscConfig+0x386>
 8004138:	4b93      	ldr	r3, [pc, #588]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	e013      	b.n	8004166 <HAL_RCC_OscConfig+0x3ae>
 800413e:	2302      	movs	r3, #2
 8004140:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004150:	2302      	movs	r3, #2
 8004152:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004156:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004162:	4b89      	ldr	r3, [pc, #548]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2202      	movs	r2, #2
 8004168:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800416c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004170:	fa92 f2a2 	rbit	r2, r2
 8004174:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004178:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800417c:	fab2 f282 	clz	r2, r2
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	f042 0220 	orr.w	r2, r2, #32
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	f002 021f 	and.w	r2, r2, #31
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f202 	lsl.w	r2, r1, r2
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCC_OscConfig+0x3f6>
 8004198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d002      	beq.n	80041ae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f000 be52 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	21f8      	movs	r1, #248	; 0xf8
 80041c4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80041cc:	fa91 f1a1 	rbit	r1, r1
 80041d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80041d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80041d8:	fab1 f181 	clz	r1, r1
 80041dc:	b2c9      	uxtb	r1, r1
 80041de:	408b      	lsls	r3, r1
 80041e0:	4969      	ldr	r1, [pc, #420]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e0fe      	b.n	80043e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8088 	beq.w	800430a <HAL_RCC_OscConfig+0x552>
 80041fa:	2301      	movs	r3, #1
 80041fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800420c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800421a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	461a      	mov	r2, r3
 8004222:	2301      	movs	r3, #1
 8004224:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004226:	f7ff fa9b 	bl	8003760 <HAL_GetTick>
 800422a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004230:	f7ff fa96 	bl	8003760 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d902      	bls.n	8004246 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	f000 be06 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004246:	2302      	movs	r3, #2
 8004248:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004258:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <HAL_RCC_OscConfig+0x4be>
 8004270:	4b45      	ldr	r3, [pc, #276]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	e013      	b.n	800429e <HAL_RCC_OscConfig+0x4e6>
 8004276:	2302      	movs	r3, #2
 8004278:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004288:	2302      	movs	r3, #2
 800428a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800428e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2202      	movs	r2, #2
 80042a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80042a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80042a8:	fa92 f2a2 	rbit	r2, r2
 80042ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80042b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80042b4:	fab2 f282 	clz	r2, r2
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	f042 0220 	orr.w	r2, r2, #32
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f002 021f 	and.w	r2, r2, #31
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0af      	beq.n	8004230 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d0:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	21f8      	movs	r1, #248	; 0xf8
 80042e6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80042ee:	fa91 f1a1 	rbit	r1, r1
 80042f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80042f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80042fa:	fab1 f181 	clz	r1, r1
 80042fe:	b2c9      	uxtb	r1, r1
 8004300:	408b      	lsls	r3, r1
 8004302:	4921      	ldr	r1, [pc, #132]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
 8004308:	e06d      	b.n	80043e6 <HAL_RCC_OscConfig+0x62e>
 800430a:	2301      	movs	r3, #1
 800430c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800431c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800432a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	461a      	mov	r2, r3
 8004332:	2300      	movs	r3, #0
 8004334:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7ff fa13 	bl	8003760 <HAL_GetTick>
 800433a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	e00a      	b.n	8004356 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004340:	f7ff fa0e 	bl	8003760 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d902      	bls.n	8004356 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	f000 bd7e 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004356:	2302      	movs	r3, #2
 8004358:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_RCC_OscConfig+0x5d4>
 8004380:	4b01      	ldr	r3, [pc, #4]	; (8004388 <HAL_RCC_OscConfig+0x5d0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	e016      	b.n	80043b4 <HAL_RCC_OscConfig+0x5fc>
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	2302      	movs	r3, #2
 800438e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800439e:	2302      	movs	r3, #2
 80043a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80043a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043b0:	4bbf      	ldr	r3, [pc, #764]	; (80046b0 <HAL_RCC_OscConfig+0x8f8>)
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	2202      	movs	r2, #2
 80043b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80043ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80043be:	fa92 f2a2 	rbit	r2, r2
 80043c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80043c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80043ca:	fab2 f282 	clz	r2, r2
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	f042 0220 	orr.w	r2, r2, #32
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f002 021f 	and.w	r2, r2, #31
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f202 	lsl.w	r2, r1, r2
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ac      	bne.n	8004340 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8113 	beq.w	8004622 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004400:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d07c      	beq.n	8004506 <HAL_RCC_OscConfig+0x74e>
 800440c:	2301      	movs	r3, #1
 800440e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800441e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	4ba2      	ldr	r3, [pc, #648]	; (80046b4 <HAL_RCC_OscConfig+0x8fc>)
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	461a      	mov	r2, r3
 8004432:	2301      	movs	r3, #1
 8004434:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004436:	f7ff f993 	bl	8003760 <HAL_GetTick>
 800443a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443e:	e00a      	b.n	8004456 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004440:	f7ff f98e 	bl	8003760 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d902      	bls.n	8004456 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	f000 bcfe 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004456:	2302      	movs	r3, #2
 8004458:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	fa93 f2a3 	rbit	r2, r3
 8004464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004468:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004476:	2202      	movs	r2, #2
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	fa93 f2a3 	rbit	r2, r3
 8004488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800448c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004496:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800449a:	2202      	movs	r2, #2
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	fa93 f2a3 	rbit	r2, r3
 80044ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80044b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	4b7e      	ldr	r3, [pc, #504]	; (80046b0 <HAL_RCC_OscConfig+0x8f8>)
 80044b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80044c2:	2102      	movs	r1, #2
 80044c4:	6019      	str	r1, [r3, #0]
 80044c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	fa93 f1a3 	rbit	r1, r3
 80044d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044dc:	6019      	str	r1, [r3, #0]
  return result;
 80044de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	fab3 f383 	clz	r3, r3
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2101      	movs	r1, #1
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d09d      	beq.n	8004440 <HAL_RCC_OscConfig+0x688>
 8004504:	e08d      	b.n	8004622 <HAL_RCC_OscConfig+0x86a>
 8004506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800450a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004516:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	fa93 f2a3 	rbit	r2, r3
 8004520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004524:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004528:	601a      	str	r2, [r3, #0]
  return result;
 800452a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800452e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004532:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	4b5d      	ldr	r3, [pc, #372]	; (80046b4 <HAL_RCC_OscConfig+0x8fc>)
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004548:	f7ff f90a 	bl	8003760 <HAL_GetTick>
 800454c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004552:	f7ff f905 	bl	8003760 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d902      	bls.n	8004568 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	f000 bc75 	b.w	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800456c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004570:	2202      	movs	r2, #2
 8004572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004578:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fa93 f2a3 	rbit	r2, r3
 8004582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004586:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004594:	2202      	movs	r2, #2
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800459c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	fa93 f2a3 	rbit	r2, r3
 80045a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80045b8:	2202      	movs	r2, #2
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	fa93 f2a3 	rbit	r2, r3
 80045ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80045d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCC_OscConfig+0x8f8>)
 80045d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80045e0:	2102      	movs	r1, #2
 80045e2:	6019      	str	r1, [r3, #0]
 80045e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	fa93 f1a3 	rbit	r1, r3
 80045f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045fa:	6019      	str	r1, [r3, #0]
  return result;
 80045fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004600:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2101      	movs	r1, #1
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d197      	bne.n	8004552 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004626:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 81a5 	beq.w	8004982 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004638:	2300      	movs	r3, #0
 800463a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463e:	4b1c      	ldr	r3, [pc, #112]	; (80046b0 <HAL_RCC_OscConfig+0x8f8>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d116      	bne.n	8004678 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_RCC_OscConfig+0x8f8>)
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <HAL_RCC_OscConfig+0x8f8>)
 8004650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004654:	61d3      	str	r3, [r2, #28]
 8004656:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <HAL_RCC_OscConfig+0x8f8>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800465e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800466c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004670:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <HAL_RCC_OscConfig+0x900>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d121      	bne.n	80046c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <HAL_RCC_OscConfig+0x900>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <HAL_RCC_OscConfig+0x900>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004690:	f7ff f866 	bl	8003760 <HAL_GetTick>
 8004694:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	e010      	b.n	80046bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7ff f861 	bl	8003760 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d908      	bls.n	80046bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e3d1      	b.n	8004e52 <HAL_RCC_OscConfig+0x109a>
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	10908120 	.word	0x10908120
 80046b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	4b8d      	ldr	r3, [pc, #564]	; (80048f4 <HAL_RCC_OscConfig+0xb3c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0e8      	beq.n	800469a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d106      	bne.n	80046e6 <HAL_RCC_OscConfig+0x92e>
 80046d8:	4b87      	ldr	r3, [pc, #540]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4a86      	ldr	r2, [pc, #536]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6213      	str	r3, [r2, #32]
 80046e4:	e035      	b.n	8004752 <HAL_RCC_OscConfig+0x99a>
 80046e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x958>
 80046f6:	4b80      	ldr	r3, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4a7f      	ldr	r2, [pc, #508]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	6213      	str	r3, [r2, #32]
 8004702:	4b7d      	ldr	r3, [pc, #500]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	4a7c      	ldr	r2, [pc, #496]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 8004708:	f023 0304 	bic.w	r3, r3, #4
 800470c:	6213      	str	r3, [r2, #32]
 800470e:	e020      	b.n	8004752 <HAL_RCC_OscConfig+0x99a>
 8004710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004714:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b05      	cmp	r3, #5
 800471e:	d10c      	bne.n	800473a <HAL_RCC_OscConfig+0x982>
 8004720:	4b75      	ldr	r3, [pc, #468]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	4a74      	ldr	r2, [pc, #464]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	6213      	str	r3, [r2, #32]
 800472c:	4b72      	ldr	r3, [pc, #456]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	4a71      	ldr	r2, [pc, #452]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6213      	str	r3, [r2, #32]
 8004738:	e00b      	b.n	8004752 <HAL_RCC_OscConfig+0x99a>
 800473a:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4a6e      	ldr	r2, [pc, #440]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	6213      	str	r3, [r2, #32]
 8004746:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	4a6b      	ldr	r2, [pc, #428]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 800474c:	f023 0304 	bic.w	r3, r3, #4
 8004750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004756:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8081 	beq.w	8004866 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004764:	f7fe fffc 	bl	8003760 <HAL_GetTick>
 8004768:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	e00b      	b.n	8004786 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fe fff7 	bl	8003760 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e365      	b.n	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800478a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800478e:	2202      	movs	r2, #2
 8004790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004796:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	fa93 f2a3 	rbit	r2, r3
 80047a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80047b2:	2202      	movs	r2, #2
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	fa93 f2a3 	rbit	r2, r3
 80047c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80047cc:	601a      	str	r2, [r3, #0]
  return result;
 80047ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80047d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	fab3 f383 	clz	r3, r3
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f043 0302 	orr.w	r3, r3, #2
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d102      	bne.n	80047f2 <HAL_RCC_OscConfig+0xa3a>
 80047ec:	4b42      	ldr	r3, [pc, #264]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	e013      	b.n	800481a <HAL_RCC_OscConfig+0xa62>
 80047f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80047fa:	2202      	movs	r2, #2
 80047fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004802:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	fa93 f2a3 	rbit	r2, r3
 800480c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004810:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800481e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004822:	2102      	movs	r1, #2
 8004824:	6011      	str	r1, [r2, #0]
 8004826:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800482a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	fa92 f1a2 	rbit	r1, r2
 8004834:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004838:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800483c:	6011      	str	r1, [r2, #0]
  return result;
 800483e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004842:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	fab2 f282 	clz	r2, r2
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	f002 021f 	and.w	r2, r2, #31
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f202 	lsl.w	r2, r1, r2
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d084      	beq.n	800476e <HAL_RCC_OscConfig+0x9b6>
 8004864:	e083      	b.n	800496e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fe ff7b 	bl	8003760 <HAL_GetTick>
 800486a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fe ff76 	bl	8003760 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e2e4      	b.n	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004890:	2202      	movs	r2, #2
 8004892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004898:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	fa93 f2a3 	rbit	r2, r3
 80048a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80048b4:	2202      	movs	r2, #2
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	fa93 f2a3 	rbit	r2, r3
 80048c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80048ce:	601a      	str	r2, [r3, #0]
  return result;
 80048d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80048d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f043 0302 	orr.w	r3, r3, #2
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d106      	bne.n	80048fc <HAL_RCC_OscConfig+0xb44>
 80048ee:	4b02      	ldr	r3, [pc, #8]	; (80048f8 <HAL_RCC_OscConfig+0xb40>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	e017      	b.n	8004924 <HAL_RCC_OscConfig+0xb6c>
 80048f4:	40007000 	.word	0x40007000
 80048f8:	40021000 	.word	0x40021000
 80048fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004900:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004904:	2202      	movs	r2, #2
 8004906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800490c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	fa93 f2a3 	rbit	r2, r3
 8004916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800491a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	4bb3      	ldr	r3, [pc, #716]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004928:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800492c:	2102      	movs	r1, #2
 800492e:	6011      	str	r1, [r2, #0]
 8004930:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004934:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	fa92 f1a2 	rbit	r1, r2
 800493e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004942:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004946:	6011      	str	r1, [r2, #0]
  return result;
 8004948:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800494c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	fab2 f282 	clz	r2, r2
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	f002 021f 	and.w	r2, r2, #31
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f202 	lsl.w	r2, r1, r2
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d180      	bne.n	8004870 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800496e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004976:	4b9e      	ldr	r3, [pc, #632]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4a9d      	ldr	r2, [pc, #628]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 800497c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004980:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004986:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 825e 	beq.w	8004e50 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004994:	4b96      	ldr	r3, [pc, #600]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	f000 821f 	beq.w	8004de0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	f040 8170 	bne.w	8004c94 <HAL_RCC_OscConfig+0xedc>
 80049b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80049bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	fa93 f2a3 	rbit	r2, r3
 80049d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80049d8:	601a      	str	r2, [r3, #0]
  return result;
 80049da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80049e2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e4:	fab3 f383 	clz	r3, r3
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	461a      	mov	r2, r3
 80049f6:	2300      	movs	r3, #0
 80049f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fa:	f7fe feb1 	bl	8003760 <HAL_GetTick>
 80049fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a02:	e009      	b.n	8004a18 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fe feac 	bl	8003760 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e21c      	b.n	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	fa93 f2a3 	rbit	r2, r3
 8004a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004a3c:	601a      	str	r2, [r3, #0]
  return result;
 8004a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004a46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a48:	fab3 f383 	clz	r3, r3
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d102      	bne.n	8004a62 <HAL_RCC_OscConfig+0xcaa>
 8004a5c:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	e027      	b.n	8004ab2 <HAL_RCC_OscConfig+0xcfa>
 8004a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a74:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	fa93 f2a3 	rbit	r2, r3
 8004a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a9a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	fa93 f2a3 	rbit	r2, r3
 8004aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ab6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004aba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004abe:	6011      	str	r1, [r2, #0]
 8004ac0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ac4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	fa92 f1a2 	rbit	r1, r2
 8004ace:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ad2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004ad6:	6011      	str	r1, [r2, #0]
  return result;
 8004ad8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004adc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	fab2 f282 	clz	r2, r2
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	f042 0220 	orr.w	r2, r2, #32
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	f002 021f 	and.w	r2, r2, #31
 8004af2:	2101      	movs	r1, #1
 8004af4:	fa01 f202 	lsl.w	r2, r1, r2
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d182      	bne.n	8004a04 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004afe:	4b3c      	ldr	r3, [pc, #240]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	f023 020f 	bic.w	r2, r3, #15
 8004b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	4937      	ldr	r1, [pc, #220]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004b18:	4b35      	ldr	r3, [pc, #212]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6a19      	ldr	r1, [r3, #32]
 8004b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	492d      	ldr	r1, [pc, #180]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
 8004b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f2a3 	rbit	r2, r3
 8004b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004b64:	601a      	str	r2, [r3, #0]
  return result;
 8004b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004b6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b70:	fab3 f383 	clz	r3, r3
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	461a      	mov	r2, r3
 8004b82:	2301      	movs	r3, #1
 8004b84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fe fdeb 	bl	8003760 <HAL_GetTick>
 8004b8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fe fde6 	bl	8003760 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e156      	b.n	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	fa93 f2a3 	rbit	r2, r3
 8004bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004bc8:	601a      	str	r2, [r3, #0]
  return result;
 8004bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xe3c>
 8004be8:	4b01      	ldr	r3, [pc, #4]	; (8004bf0 <HAL_RCC_OscConfig+0xe38>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	e02a      	b.n	8004c44 <HAL_RCC_OscConfig+0xe8c>
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bf8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c06:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	fa93 f2a3 	rbit	r2, r3
 8004c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c2c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	fa93 f2a3 	rbit	r2, r3
 8004c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c3a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	4b86      	ldr	r3, [pc, #536]	; (8004e5c <HAL_RCC_OscConfig+0x10a4>)
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004c4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c50:	6011      	str	r1, [r2, #0]
 8004c52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	fa92 f1a2 	rbit	r1, r2
 8004c60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c64:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004c68:	6011      	str	r1, [r2, #0]
  return result;
 8004c6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c6e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	fab2 f282 	clz	r2, r2
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	f042 0220 	orr.w	r2, r2, #32
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	f002 021f 	and.w	r2, r2, #31
 8004c84:	2101      	movs	r1, #1
 8004c86:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f43f af7f 	beq.w	8004b90 <HAL_RCC_OscConfig+0xdd8>
 8004c92:	e0dd      	b.n	8004e50 <HAL_RCC_OscConfig+0x1098>
 8004c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ca6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	fa93 f2a3 	rbit	r2, r3
 8004cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004cb8:	601a      	str	r2, [r3, #0]
  return result;
 8004cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004cc2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fe fd41 	bl	8003760 <HAL_GetTick>
 8004cde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce2:	e009      	b.n	8004cf8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fe fd3c 	bl	8003760 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0ac      	b.n	8004e52 <HAL_RCC_OscConfig+0x109a>
 8004cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cfc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d0a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	fa93 f2a3 	rbit	r2, r3
 8004d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004d1c:	601a      	str	r2, [r3, #0]
  return result;
 8004d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004d26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCC_OscConfig+0xf8a>
 8004d3c:	4b47      	ldr	r3, [pc, #284]	; (8004e5c <HAL_RCC_OscConfig+0x10a4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	e027      	b.n	8004d92 <HAL_RCC_OscConfig+0xfda>
 8004d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d46:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	fa93 f2a3 	rbit	r2, r3
 8004d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d62:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d6c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	fa93 f2a3 	rbit	r2, r3
 8004d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d88:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	4b33      	ldr	r3, [pc, #204]	; (8004e5c <HAL_RCC_OscConfig+0x10a4>)
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004d9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d9e:	6011      	str	r1, [r2, #0]
 8004da0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004da4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	fa92 f1a2 	rbit	r1, r2
 8004dae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004db2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004db6:	6011      	str	r1, [r2, #0]
  return result;
 8004db8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dbc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	fab2 f282 	clz	r2, r2
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	f042 0220 	orr.w	r2, r2, #32
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	f002 021f 	and.w	r2, r2, #31
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d182      	bne.n	8004ce4 <HAL_RCC_OscConfig+0xf2c>
 8004dde:	e037      	b.n	8004e50 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e02e      	b.n	8004e52 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004df4:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <HAL_RCC_OscConfig+0x10a4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <HAL_RCC_OscConfig+0x10a4>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e08:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d117      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004e1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e20:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d10b      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e38:	f003 020f 	and.w	r2, r3, #15
 8004e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000

08004e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b09e      	sub	sp, #120	; 0x78
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e162      	b.n	800513e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e78:	4b90      	ldr	r3, [pc, #576]	; (80050bc <HAL_RCC_ClockConfig+0x25c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d910      	bls.n	8004ea8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b8d      	ldr	r3, [pc, #564]	; (80050bc <HAL_RCC_ClockConfig+0x25c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 0207 	bic.w	r2, r3, #7
 8004e8e:	498b      	ldr	r1, [pc, #556]	; (80050bc <HAL_RCC_ClockConfig+0x25c>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b89      	ldr	r3, [pc, #548]	; (80050bc <HAL_RCC_ClockConfig+0x25c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e14a      	b.n	800513e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb4:	4b82      	ldr	r3, [pc, #520]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	497f      	ldr	r1, [pc, #508]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80dc 	beq.w	800508c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d13c      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xf6>
 8004edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ee0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eec:	fab3 f383 	clz	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d102      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xa6>
 8004f00:	4b6f      	ldr	r3, [pc, #444]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	e00f      	b.n	8004f26 <HAL_RCC_ClockConfig+0xc6>
 8004f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f0e:	fa93 f3a3 	rbit	r3, r3
 8004f12:	667b      	str	r3, [r7, #100]	; 0x64
 8004f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f18:	663b      	str	r3, [r7, #96]	; 0x60
 8004f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f1c:	fa93 f3a3 	rbit	r3, r3
 8004f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f22:	4b67      	ldr	r3, [pc, #412]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f2e:	fa92 f2a2 	rbit	r2, r2
 8004f32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f36:	fab2 f282 	clz	r2, r2
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	f042 0220 	orr.w	r2, r2, #32
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	f002 021f 	and.w	r2, r2, #31
 8004f46:	2101      	movs	r1, #1
 8004f48:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d17b      	bne.n	800504a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e0f3      	b.n	800513e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d13c      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x178>
 8004f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6e:	fab3 f383 	clz	r3, r3
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d102      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x128>
 8004f82:	4b4f      	ldr	r3, [pc, #316]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	e00f      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x148>
 8004f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f90:	fa93 f3a3 	rbit	r3, r3
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
 8004f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa4:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fac:	63ba      	str	r2, [r7, #56]	; 0x38
 8004fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb0:	fa92 f2a2 	rbit	r2, r2
 8004fb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fb8:	fab2 f282 	clz	r2, r2
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	f042 0220 	orr.w	r2, r2, #32
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	f002 021f 	and.w	r2, r2, #31
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f202 	lsl.w	r2, r1, r2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d13a      	bne.n	800504a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0b2      	b.n	800513e <HAL_RCC_ClockConfig+0x2de>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	fa93 f3a3 	rbit	r3, r3
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d102      	bne.n	8005000 <HAL_RCC_ClockConfig+0x1a0>
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	e00d      	b.n	800501c <HAL_RCC_ClockConfig+0x1bc>
 8005000:	2302      	movs	r3, #2
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	fa93 f3a3 	rbit	r3, r3
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
 800500c:	2302      	movs	r3, #2
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	fa93 f3a3 	rbit	r3, r3
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2202      	movs	r2, #2
 800501e:	61ba      	str	r2, [r7, #24]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	fa92 f2a2 	rbit	r2, r2
 8005026:	617a      	str	r2, [r7, #20]
  return result;
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	fab2 f282 	clz	r2, r2
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	f042 0220 	orr.w	r2, r2, #32
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	f002 021f 	and.w	r2, r2, #31
 800503a:	2101      	movs	r1, #1
 800503c:	fa01 f202 	lsl.w	r2, r1, r2
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e079      	b.n	800513e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f023 0203 	bic.w	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	491a      	ldr	r1, [pc, #104]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 8005058:	4313      	orrs	r3, r2
 800505a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800505c:	f7fe fb80 	bl	8003760 <HAL_GetTick>
 8005060:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	e00a      	b.n	800507a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005064:	f7fe fb7c 	bl	8003760 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e061      	b.n	800513e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_RCC_ClockConfig+0x260>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 020c 	and.w	r2, r3, #12
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	429a      	cmp	r2, r3
 800508a:	d1eb      	bne.n	8005064 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCC_ClockConfig+0x25c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d214      	bcs.n	80050c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <HAL_RCC_ClockConfig+0x25c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 0207 	bic.w	r2, r3, #7
 80050a2:	4906      	ldr	r1, [pc, #24]	; (80050bc <HAL_RCC_ClockConfig+0x25c>)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <HAL_RCC_ClockConfig+0x25c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e040      	b.n	800513e <HAL_RCC_ClockConfig+0x2de>
 80050bc:	40022000 	.word	0x40022000
 80050c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_RCC_ClockConfig+0x2e8>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	491a      	ldr	r1, [pc, #104]	; (8005148 <HAL_RCC_ClockConfig+0x2e8>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ee:	4b16      	ldr	r3, [pc, #88]	; (8005148 <HAL_RCC_ClockConfig+0x2e8>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4912      	ldr	r1, [pc, #72]	; (8005148 <HAL_RCC_ClockConfig+0x2e8>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005102:	f000 f829 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005106:	4601      	mov	r1, r0
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <HAL_RCC_ClockConfig+0x2e8>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005110:	22f0      	movs	r2, #240	; 0xf0
 8005112:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	fa92 f2a2 	rbit	r2, r2
 800511a:	60fa      	str	r2, [r7, #12]
  return result;
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	fab2 f282 	clz	r2, r2
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	40d3      	lsrs	r3, r2
 8005126:	4a09      	ldr	r2, [pc, #36]	; (800514c <HAL_RCC_ClockConfig+0x2ec>)
 8005128:	5cd3      	ldrb	r3, [r2, r3]
 800512a:	fa21 f303 	lsr.w	r3, r1, r3
 800512e:	4a08      	ldr	r2, [pc, #32]	; (8005150 <HAL_RCC_ClockConfig+0x2f0>)
 8005130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005132:	4b08      	ldr	r3, [pc, #32]	; (8005154 <HAL_RCC_ClockConfig+0x2f4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc fb2a 	bl	8001790 <HAL_InitTick>
  
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3778      	adds	r7, #120	; 0x78
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000
 800514c:	0800f1b4 	.word	0x0800f1b4
 8005150:	20000060 	.word	0x20000060
 8005154:	20000080 	.word	0x20000080

08005158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	b480      	push	{r7}
 800515a:	b08b      	sub	sp, #44	; 0x2c
 800515c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	2300      	movs	r3, #0
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b04      	cmp	r3, #4
 8005180:	d002      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x30>
 8005182:	2b08      	cmp	r3, #8
 8005184:	d003      	beq.n	800518e <HAL_RCC_GetSysClockFreq+0x36>
 8005186:	e03f      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <HAL_RCC_GetSysClockFreq+0xc8>)
 800518a:	623b      	str	r3, [r7, #32]
      break;
 800518c:	e03f      	b.n	800520e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005194:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005198:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	fa92 f2a2 	rbit	r2, r2
 80051a0:	607a      	str	r2, [r7, #4]
  return result;
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	fab2 f282 	clz	r2, r2
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	40d3      	lsrs	r3, r2
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <HAL_RCC_GetSysClockFreq+0xcc>)
 80051ae:	5cd3      	ldrb	r3, [r2, r3]
 80051b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <HAL_RCC_GetSysClockFreq+0xc4>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	220f      	movs	r2, #15
 80051bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	fa92 f2a2 	rbit	r2, r2
 80051c4:	60fa      	str	r2, [r7, #12]
  return result;
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	fab2 f282 	clz	r2, r2
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	40d3      	lsrs	r3, r2
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051d2:	5cd3      	ldrb	r3, [r2, r3]
 80051d4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051e0:	4a0f      	ldr	r2, [pc, #60]	; (8005220 <HAL_RCC_GetSysClockFreq+0xc8>)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
 80051f0:	e007      	b.n	8005202 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051f2:	4a0b      	ldr	r2, [pc, #44]	; (8005220 <HAL_RCC_GetSysClockFreq+0xc8>)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	623b      	str	r3, [r7, #32]
      break;
 8005206:	e002      	b.n	800520e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetSysClockFreq+0xc8>)
 800520a:	623b      	str	r3, [r7, #32]
      break;
 800520c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800520e:	6a3b      	ldr	r3, [r7, #32]
}
 8005210:	4618      	mov	r0, r3
 8005212:	372c      	adds	r7, #44	; 0x2c
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40021000 	.word	0x40021000
 8005220:	007a1200 	.word	0x007a1200
 8005224:	0800f1cc 	.word	0x0800f1cc
 8005228:	0800f1dc 	.word	0x0800f1dc

0800522c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_RCC_GetHCLKFreq+0x14>)
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20000060 	.word	0x20000060

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800524a:	f7ff ffef 	bl	800522c <HAL_RCC_GetHCLKFreq>
 800524e:	4601      	mov	r1, r0
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005258:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800525c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	fa92 f2a2 	rbit	r2, r2
 8005264:	603a      	str	r2, [r7, #0]
  return result;
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	fab2 f282 	clz	r2, r2
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	40d3      	lsrs	r3, r2
 8005270:	4a04      	ldr	r2, [pc, #16]	; (8005284 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005272:	5cd3      	ldrb	r3, [r2, r3]
 8005274:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40021000 	.word	0x40021000
 8005284:	0800f1c4 	.word	0x0800f1c4

08005288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800528e:	f7ff ffcd 	bl	800522c <HAL_RCC_GetHCLKFreq>
 8005292:	4601      	mov	r1, r0
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800529c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80052a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	fa92 f2a2 	rbit	r2, r2
 80052a8:	603a      	str	r2, [r7, #0]
  return result;
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	fab2 f282 	clz	r2, r2
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	40d3      	lsrs	r3, r2
 80052b4:	4a04      	ldr	r2, [pc, #16]	; (80052c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80052b6:	5cd3      	ldrb	r3, [r2, r3]
 80052b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000
 80052c8:	0800f1c4 	.word	0x0800f1c4

080052cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	220f      	movs	r2, #15
 80052da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052dc:	4b12      	ldr	r3, [pc, #72]	; (8005328 <HAL_RCC_GetClockConfig+0x5c>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0203 	and.w	r2, r3, #3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_RCC_GetClockConfig+0x5c>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_RCC_GetClockConfig+0x5c>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005300:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_RCC_GetClockConfig+0x5c>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	08db      	lsrs	r3, r3, #3
 8005306:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <HAL_RCC_GetClockConfig+0x60>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	601a      	str	r2, [r3, #0]
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
 800532c:	40022000 	.word	0x40022000

08005330 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b092      	sub	sp, #72	; 0x48
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80d4 	beq.w	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005354:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10e      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005360:	4b4b      	ldr	r3, [pc, #300]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	4a4a      	ldr	r2, [pc, #296]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536a:	61d3      	str	r3, [r2, #28]
 800536c:	4b48      	ldr	r3, [pc, #288]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537e:	4b45      	ldr	r3, [pc, #276]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d118      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538a:	4b42      	ldr	r3, [pc, #264]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a41      	ldr	r2, [pc, #260]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005394:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005396:	f7fe f9e3 	bl	8003760 <HAL_GetTick>
 800539a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539c:	e008      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539e:	f7fe f9df 	bl	8003760 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b64      	cmp	r3, #100	; 0x64
 80053aa:	d901      	bls.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e1d6      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b0:	4b38      	ldr	r3, [pc, #224]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053bc:	4b34      	ldr	r3, [pc, #208]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8084 	beq.w	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053d8:	429a      	cmp	r2, r3
 80053da:	d07c      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053dc:	4b2c      	ldr	r3, [pc, #176]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	fa93 f3a3 	rbit	r3, r3
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053f6:	fab3 f383 	clz	r3, r3
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	4b26      	ldr	r3, [pc, #152]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	461a      	mov	r2, r3
 8005406:	2301      	movs	r3, #1
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800540e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	fa93 f3a3 	rbit	r3, r3
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800541a:	fab3 f383 	clz	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800542e:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005432:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d04b      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fe f98f 	bl	8003760 <HAL_GetTick>
 8005442:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005444:	e00a      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005446:	f7fe f98b 	bl	8003760 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e180      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800545c:	2302      	movs	r3, #2
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
 8005468:	2302      	movs	r3, #2
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	fa93 f3a3 	rbit	r3, r3
 8005472:	61fb      	str	r3, [r7, #28]
  return result;
 8005474:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f043 0302 	orr.w	r3, r3, #2
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d108      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800548a:	4b01      	ldr	r3, [pc, #4]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	e00d      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005490:	40021000 	.word	0x40021000
 8005494:	40007000 	.word	0x40007000
 8005498:	10908100 	.word	0x10908100
 800549c:	2302      	movs	r3, #2
 800549e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	fa93 f3a3 	rbit	r3, r3
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	4b9a      	ldr	r3, [pc, #616]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	2202      	movs	r2, #2
 80054ae:	613a      	str	r2, [r7, #16]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	fa92 f2a2 	rbit	r2, r2
 80054b6:	60fa      	str	r2, [r7, #12]
  return result;
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	fab2 f282 	clz	r2, r2
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	f002 021f 	and.w	r2, r2, #31
 80054ca:	2101      	movs	r1, #1
 80054cc:	fa01 f202 	lsl.w	r2, r1, r2
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0b7      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80054d6:	4b8f      	ldr	r3, [pc, #572]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	498c      	ldr	r1, [pc, #560]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d105      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f0:	4b88      	ldr	r3, [pc, #544]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	4a87      	ldr	r2, [pc, #540]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005508:	4b82      	ldr	r3, [pc, #520]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	f023 0203 	bic.w	r2, r3, #3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	497f      	ldr	r1, [pc, #508]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005516:	4313      	orrs	r3, r2
 8005518:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005526:	4b7b      	ldr	r3, [pc, #492]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	4978      	ldr	r1, [pc, #480]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005534:	4313      	orrs	r3, r2
 8005536:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005544:	4b73      	ldr	r3, [pc, #460]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	4970      	ldr	r1, [pc, #448]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005552:	4313      	orrs	r3, r2
 8005554:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005562:	4b6c      	ldr	r3, [pc, #432]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f023 0210 	bic.w	r2, r3, #16
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	4969      	ldr	r1, [pc, #420]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005570:	4313      	orrs	r3, r2
 8005572:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005580:	4b64      	ldr	r3, [pc, #400]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	4961      	ldr	r1, [pc, #388]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800559e:	4b5d      	ldr	r3, [pc, #372]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f023 0220 	bic.w	r2, r3, #32
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	495a      	ldr	r1, [pc, #360]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055bc:	4b55      	ldr	r3, [pc, #340]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	4952      	ldr	r1, [pc, #328]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055da:	4b4e      	ldr	r3, [pc, #312]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	494b      	ldr	r1, [pc, #300]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055f8:	4b46      	ldr	r3, [pc, #280]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	4943      	ldr	r1, [pc, #268]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005616:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	493c      	ldr	r1, [pc, #240]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005624:	4313      	orrs	r3, r2
 8005626:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005634:	4b37      	ldr	r3, [pc, #220]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	4934      	ldr	r1, [pc, #208]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005642:	4313      	orrs	r3, r2
 8005644:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005652:	4b30      	ldr	r3, [pc, #192]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	492d      	ldr	r1, [pc, #180]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005660:	4313      	orrs	r3, r2
 8005662:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005670:	4b28      	ldr	r3, [pc, #160]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	4925      	ldr	r1, [pc, #148]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800568e:	4b21      	ldr	r3, [pc, #132]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	491e      	ldr	r1, [pc, #120]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800569c:	4313      	orrs	r3, r2
 800569e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	4916      	ldr	r1, [pc, #88]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d008      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	490f      	ldr	r1, [pc, #60]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	4907      	ldr	r1, [pc, #28]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005706:	4b03      	ldr	r3, [pc, #12]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	e002      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000
 8005718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571a:	4913      	ldr	r1, [pc, #76]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800571c:	4313      	orrs	r3, r2
 800571e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005738:	490b      	ldr	r1, [pc, #44]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800573a:	4313      	orrs	r3, r2
 800573c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800574a:	4b07      	ldr	r3, [pc, #28]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	4904      	ldr	r1, [pc, #16]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005758:	4313      	orrs	r3, r2
 800575a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3748      	adds	r7, #72	; 0x48
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40021000 	.word	0x40021000

0800576c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e049      	b.n	8005812 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc ff28 	bl	80025e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f001 f916 	bl	80069dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	d001      	beq.n	8005834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e04f      	b.n	80058d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a23      	ldr	r2, [pc, #140]	; (80058e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01d      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d018      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <HAL_TIM_Base_Start_IT+0xd0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d115      	bne.n	80058be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800589a:	4013      	ands	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b06      	cmp	r3, #6
 80058a2:	d015      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0xb4>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058aa:	d011      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	e008      	b.n	80058d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e000      	b.n	80058d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40015000 	.word	0x40015000
 80058f8:	00010007 	.word	0x00010007

080058fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e049      	b.n	80059a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f841 	bl	80059aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f001 f84e 	bl	80069dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <HAL_TIM_PWM_Start+0x24>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e03c      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d109      	bne.n	80059fe <HAL_TIM_PWM_Start+0x3e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	bf14      	ite	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	2300      	moveq	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	e02f      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d109      	bne.n	8005a18 <HAL_TIM_PWM_Start+0x58>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e022      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d109      	bne.n	8005a32 <HAL_TIM_PWM_Start+0x72>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	e015      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d109      	bne.n	8005a4c <HAL_TIM_PWM_Start+0x8c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e008      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e0a1      	b.n	8005baa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xb6>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a74:	e023      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_PWM_Start+0xc6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a84:	e01b      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_PWM_Start+0xd6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a94:	e013      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0xe6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa4:	e00b      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xf6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab4:	e003      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fcea 	bl	80074a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a38      	ldr	r2, [pc, #224]	; (8005bb4 <HAL_TIM_PWM_Start+0x1f4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a37      	ldr	r2, [pc, #220]	; (8005bb8 <HAL_TIM_PWM_Start+0x1f8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a35      	ldr	r2, [pc, #212]	; (8005bbc <HAL_TIM_PWM_Start+0x1fc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <HAL_TIM_PWM_Start+0x200>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a32      	ldr	r2, [pc, #200]	; (8005bc4 <HAL_TIM_PWM_Start+0x204>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a31      	ldr	r2, [pc, #196]	; (8005bc8 <HAL_TIM_PWM_Start+0x208>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x14c>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_TIM_PWM_Start+0x14e>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a23      	ldr	r2, [pc, #140]	; (8005bb4 <HAL_TIM_PWM_Start+0x1f4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d01d      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b34:	d018      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a24      	ldr	r2, [pc, #144]	; (8005bcc <HAL_TIM_PWM_Start+0x20c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <HAL_TIM_PWM_Start+0x210>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <HAL_TIM_PWM_Start+0x1f8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_TIM_PWM_Start+0x1fc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_TIM_PWM_Start+0x208>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d115      	bne.n	8005b94 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <HAL_TIM_PWM_Start+0x214>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d015      	beq.n	8005ba6 <HAL_TIM_PWM_Start+0x1e6>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b80:	d011      	beq.n	8005ba6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b92:	e008      	b.n	8005ba6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e000      	b.n	8005ba8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800
 8005bc8:	40015000 	.word	0x40015000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	00010007 	.word	0x00010007

08005bd8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 fc58 	bl	80074a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a40      	ldr	r2, [pc, #256]	; (8005cf8 <HAL_TIM_PWM_Stop+0x120>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <HAL_TIM_PWM_Stop+0x54>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a3f      	ldr	r2, [pc, #252]	; (8005cfc <HAL_TIM_PWM_Stop+0x124>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_TIM_PWM_Stop+0x54>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3d      	ldr	r2, [pc, #244]	; (8005d00 <HAL_TIM_PWM_Stop+0x128>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIM_PWM_Stop+0x54>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <HAL_TIM_PWM_Stop+0x12c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_TIM_PWM_Stop+0x54>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3a      	ldr	r2, [pc, #232]	; (8005d08 <HAL_TIM_PWM_Stop+0x130>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_PWM_Stop+0x54>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <HAL_TIM_PWM_Stop+0x134>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_PWM_Stop+0x58>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_TIM_PWM_Stop+0x5a>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d017      	beq.n	8005c66 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <HAL_TIM_PWM_Stop+0x8e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6a1a      	ldr	r2, [r3, #32]
 8005c4c:	f240 4344 	movw	r3, #1092	; 0x444
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d107      	bne.n	8005c66 <HAL_TIM_PWM_Stop+0x8e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10f      	bne.n	8005c96 <HAL_TIM_PWM_Stop+0xbe>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	f240 4344 	movw	r3, #1092	; 0x444
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d107      	bne.n	8005c96 <HAL_TIM_PWM_Stop+0xbe>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Stop+0xce>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca4:	e023      	b.n	8005cee <HAL_TIM_PWM_Stop+0x116>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Stop+0xde>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	e01b      	b.n	8005cee <HAL_TIM_PWM_Stop+0x116>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Stop+0xee>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	e013      	b.n	8005cee <HAL_TIM_PWM_Stop+0x116>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b0c      	cmp	r3, #12
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Stop+0xfe>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd4:	e00b      	b.n	8005cee <HAL_TIM_PWM_Stop+0x116>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Stop+0x10e>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce4:	e003      	b.n	8005cee <HAL_TIM_PWM_Stop+0x116>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800
 8005d0c:	40015000 	.word	0x40015000

08005d10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e049      	b.n	8005db6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f841 	bl	8005dbe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f000 fe44 	bl	80069dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_IC_Start_IT+0x1e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	e023      	b.n	8005e3a <HAL_TIM_IC_Start_IT+0x66>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_IC_Start_IT+0x2e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	e01b      	b.n	8005e3a <HAL_TIM_IC_Start_IT+0x66>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_IC_Start_IT+0x3e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	e013      	b.n	8005e3a <HAL_TIM_IC_Start_IT+0x66>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_IC_Start_IT+0x4e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	e00b      	b.n	8005e3a <HAL_TIM_IC_Start_IT+0x66>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d104      	bne.n	8005e32 <HAL_TIM_IC_Start_IT+0x5e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e003      	b.n	8005e3a <HAL_TIM_IC_Start_IT+0x66>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <HAL_TIM_IC_Start_IT+0x78>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e013      	b.n	8005e74 <HAL_TIM_IC_Start_IT+0xa0>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d104      	bne.n	8005e5c <HAL_TIM_IC_Start_IT+0x88>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	e00b      	b.n	8005e74 <HAL_TIM_IC_Start_IT+0xa0>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d104      	bne.n	8005e6c <HAL_TIM_IC_Start_IT+0x98>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e003      	b.n	8005e74 <HAL_TIM_IC_Start_IT+0xa0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d102      	bne.n	8005e82 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e7c:	7b7b      	ldrb	r3, [r7, #13]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d001      	beq.n	8005e86 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e0dd      	b.n	8006042 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_IC_Start_IT+0xc2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e94:	e023      	b.n	8005ede <HAL_TIM_IC_Start_IT+0x10a>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d104      	bne.n	8005ea6 <HAL_TIM_IC_Start_IT+0xd2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea4:	e01b      	b.n	8005ede <HAL_TIM_IC_Start_IT+0x10a>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d104      	bne.n	8005eb6 <HAL_TIM_IC_Start_IT+0xe2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb4:	e013      	b.n	8005ede <HAL_TIM_IC_Start_IT+0x10a>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b0c      	cmp	r3, #12
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIM_IC_Start_IT+0xf2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ec4:	e00b      	b.n	8005ede <HAL_TIM_IC_Start_IT+0x10a>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d104      	bne.n	8005ed6 <HAL_TIM_IC_Start_IT+0x102>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed4:	e003      	b.n	8005ede <HAL_TIM_IC_Start_IT+0x10a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <HAL_TIM_IC_Start_IT+0x11a>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eec:	e013      	b.n	8005f16 <HAL_TIM_IC_Start_IT+0x142>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_IC_Start_IT+0x12a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005efc:	e00b      	b.n	8005f16 <HAL_TIM_IC_Start_IT+0x142>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_IC_Start_IT+0x13a>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f0c:	e003      	b.n	8005f16 <HAL_TIM_IC_Start_IT+0x142>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	d841      	bhi.n	8005fa0 <HAL_TIM_IC_Start_IT+0x1cc>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <HAL_TIM_IC_Start_IT+0x150>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f59 	.word	0x08005f59
 8005f28:	08005fa1 	.word	0x08005fa1
 8005f2c:	08005fa1 	.word	0x08005fa1
 8005f30:	08005fa1 	.word	0x08005fa1
 8005f34:	08005f6b 	.word	0x08005f6b
 8005f38:	08005fa1 	.word	0x08005fa1
 8005f3c:	08005fa1 	.word	0x08005fa1
 8005f40:	08005fa1 	.word	0x08005fa1
 8005f44:	08005f7d 	.word	0x08005f7d
 8005f48:	08005fa1 	.word	0x08005fa1
 8005f4c:	08005fa1 	.word	0x08005fa1
 8005f50:	08005fa1 	.word	0x08005fa1
 8005f54:	08005f8f 	.word	0x08005f8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0202 	orr.w	r2, r2, #2
 8005f66:	60da      	str	r2, [r3, #12]
      break;
 8005f68:	e01d      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0204 	orr.w	r2, r2, #4
 8005f78:	60da      	str	r2, [r3, #12]
      break;
 8005f7a:	e014      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0208 	orr.w	r2, r2, #8
 8005f8a:	60da      	str	r2, [r3, #12]
      break;
 8005f8c:	e00b      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0210 	orr.w	r2, r2, #16
 8005f9c:	60da      	str	r2, [r3, #12]
      break;
 8005f9e:	e002      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d149      	bne.n	8006040 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 fa73 	bl	80074a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a23      	ldr	r2, [pc, #140]	; (800604c <HAL_TIM_IC_Start_IT+0x278>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d01d      	beq.n	8006000 <HAL_TIM_IC_Start_IT+0x22c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fcc:	d018      	beq.n	8006000 <HAL_TIM_IC_Start_IT+0x22c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <HAL_TIM_IC_Start_IT+0x27c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <HAL_TIM_IC_Start_IT+0x22c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <HAL_TIM_IC_Start_IT+0x280>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00e      	beq.n	8006000 <HAL_TIM_IC_Start_IT+0x22c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1c      	ldr	r2, [pc, #112]	; (8006058 <HAL_TIM_IC_Start_IT+0x284>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d009      	beq.n	8006000 <HAL_TIM_IC_Start_IT+0x22c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1a      	ldr	r2, [pc, #104]	; (800605c <HAL_TIM_IC_Start_IT+0x288>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_TIM_IC_Start_IT+0x22c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a19      	ldr	r2, [pc, #100]	; (8006060 <HAL_TIM_IC_Start_IT+0x28c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d115      	bne.n	800602c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	4b17      	ldr	r3, [pc, #92]	; (8006064 <HAL_TIM_IC_Start_IT+0x290>)
 8006008:	4013      	ands	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b06      	cmp	r3, #6
 8006010:	d015      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x26a>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006018:	d011      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0201 	orr.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602a:	e008      	b.n	800603e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e000      	b.n	8006040 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40013400 	.word	0x40013400
 800605c:	40014000 	.word	0x40014000
 8006060:	40015000 	.word	0x40015000
 8006064:	00010007 	.word	0x00010007

08006068 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d841      	bhi.n	8006100 <HAL_TIM_IC_Stop_IT+0x98>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <HAL_TIM_IC_Stop_IT+0x1c>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	080060b9 	.word	0x080060b9
 8006088:	08006101 	.word	0x08006101
 800608c:	08006101 	.word	0x08006101
 8006090:	08006101 	.word	0x08006101
 8006094:	080060cb 	.word	0x080060cb
 8006098:	08006101 	.word	0x08006101
 800609c:	08006101 	.word	0x08006101
 80060a0:	08006101 	.word	0x08006101
 80060a4:	080060dd 	.word	0x080060dd
 80060a8:	08006101 	.word	0x08006101
 80060ac:	08006101 	.word	0x08006101
 80060b0:	08006101 	.word	0x08006101
 80060b4:	080060ef 	.word	0x080060ef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0202 	bic.w	r2, r2, #2
 80060c6:	60da      	str	r2, [r3, #12]
      break;
 80060c8:	e01d      	b.n	8006106 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0204 	bic.w	r2, r2, #4
 80060d8:	60da      	str	r2, [r3, #12]
      break;
 80060da:	e014      	b.n	8006106 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0208 	bic.w	r2, r2, #8
 80060ea:	60da      	str	r2, [r3, #12]
      break;
 80060ec:	e00b      	b.n	8006106 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0210 	bic.w	r2, r2, #16
 80060fc:	60da      	str	r2, [r3, #12]
      break;
 80060fe:	e002      	b.n	8006106 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	73fb      	strb	r3, [r7, #15]
      break;
 8006104:	bf00      	nop
  }

  if (status == HAL_OK)
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d166      	bne.n	80061da <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2200      	movs	r2, #0
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f001 f9c3 	bl	80074a0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	f241 1311 	movw	r3, #4369	; 0x1111
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10f      	bne.n	800614a <HAL_TIM_IC_Stop_IT+0xe2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	f240 4344 	movw	r3, #1092	; 0x444
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <HAL_TIM_IC_Stop_IT+0xe2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <HAL_TIM_IC_Stop_IT+0xf2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006158:	e023      	b.n	80061a2 <HAL_TIM_IC_Stop_IT+0x13a>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b04      	cmp	r3, #4
 800615e:	d104      	bne.n	800616a <HAL_TIM_IC_Stop_IT+0x102>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006168:	e01b      	b.n	80061a2 <HAL_TIM_IC_Stop_IT+0x13a>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d104      	bne.n	800617a <HAL_TIM_IC_Stop_IT+0x112>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006178:	e013      	b.n	80061a2 <HAL_TIM_IC_Stop_IT+0x13a>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d104      	bne.n	800618a <HAL_TIM_IC_Stop_IT+0x122>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006188:	e00b      	b.n	80061a2 <HAL_TIM_IC_Stop_IT+0x13a>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b10      	cmp	r3, #16
 800618e:	d104      	bne.n	800619a <HAL_TIM_IC_Stop_IT+0x132>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006198:	e003      	b.n	80061a2 <HAL_TIM_IC_Stop_IT+0x13a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_IC_Stop_IT+0x14a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b0:	e013      	b.n	80061da <HAL_TIM_IC_Stop_IT+0x172>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_IC_Stop_IT+0x15a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c0:	e00b      	b.n	80061da <HAL_TIM_IC_Stop_IT+0x172>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_IC_Stop_IT+0x16a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061d0:	e003      	b.n	80061da <HAL_TIM_IC_Stop_IT+0x172>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80061da:	7bfb      	ldrb	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d122      	bne.n	8006240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b02      	cmp	r3, #2
 8006206:	d11b      	bne.n	8006240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0202 	mvn.w	r2, #2
 8006210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fd f8e4 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 800622c:	e005      	b.n	800623a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fbb6 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fbbd 	bl	80069b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b04      	cmp	r3, #4
 800624c:	d122      	bne.n	8006294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b04      	cmp	r3, #4
 800625a:	d11b      	bne.n	8006294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0204 	mvn.w	r2, #4
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2202      	movs	r2, #2
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fd f8ba 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fb8c 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fb93 	bl	80069b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d122      	bne.n	80062e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d11b      	bne.n	80062e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0208 	mvn.w	r2, #8
 80062b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2204      	movs	r2, #4
 80062be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fd f890 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 80062d4:	e005      	b.n	80062e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb62 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fb69 	bl	80069b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0310 	and.w	r3, r3, #16
 80062f2:	2b10      	cmp	r3, #16
 80062f4:	d122      	bne.n	800633c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b10      	cmp	r3, #16
 8006302:	d11b      	bne.n	800633c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0210 	mvn.w	r2, #16
 800630c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2208      	movs	r2, #8
 8006312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fd f866 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 8006328:	e005      	b.n	8006336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fb38 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fb3f 	bl	80069b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b01      	cmp	r3, #1
 8006348:	d10e      	bne.n	8006368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b01      	cmp	r3, #1
 8006356:	d107      	bne.n	8006368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0201 	mvn.w	r2, #1
 8006360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb f9d4 	bl	8001710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006372:	2b80      	cmp	r3, #128	; 0x80
 8006374:	d10e      	bne.n	8006394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006380:	2b80      	cmp	r3, #128	; 0x80
 8006382:	d107      	bne.n	8006394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800638c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 f9c8 	bl	8007724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a2:	d10e      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ae:	2b80      	cmp	r3, #128	; 0x80
 80063b0:	d107      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 f9bb 	bl	8007738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d10e      	bne.n	80063ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d107      	bne.n	80063ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 faed 	bl	80069c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d10e      	bne.n	800641a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b20      	cmp	r3, #32
 8006408:	d107      	bne.n	800641a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f06f 0220 	mvn.w	r2, #32
 8006412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 f97b 	bl	8007710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b086      	sub	sp, #24
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_TIM_IC_ConfigChannel+0x1e>
 800643c:	2302      	movs	r3, #2
 800643e:	e088      	b.n	8006552 <HAL_TIM_IC_ConfigChannel+0x130>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d11b      	bne.n	8006486 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800645e:	f000 fe61 	bl	8007124 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 020c 	bic.w	r2, r2, #12
 8006470:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6999      	ldr	r1, [r3, #24]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	619a      	str	r2, [r3, #24]
 8006484:	e060      	b.n	8006548 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d11c      	bne.n	80064c6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800649c:	f000 fedf 	bl	800725e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064ae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6999      	ldr	r1, [r3, #24]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	619a      	str	r2, [r3, #24]
 80064c4:	e040      	b.n	8006548 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d11b      	bne.n	8006504 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80064dc:	f000 ff2c 	bl	8007338 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69da      	ldr	r2, [r3, #28]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 020c 	bic.w	r2, r2, #12
 80064ee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69d9      	ldr	r1, [r3, #28]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	61da      	str	r2, [r3, #28]
 8006502:	e021      	b.n	8006548 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b0c      	cmp	r3, #12
 8006508:	d11c      	bne.n	8006544 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800651a:	f000 ff49 	bl	80073b0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800652c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69d9      	ldr	r1, [r3, #28]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	021a      	lsls	r2, r3, #8
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	61da      	str	r2, [r3, #28]
 8006542:	e001      	b.n	8006548 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006576:	2302      	movs	r3, #2
 8006578:	e0ff      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b14      	cmp	r3, #20
 8006586:	f200 80f0 	bhi.w	800676a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065e5 	.word	0x080065e5
 8006594:	0800676b 	.word	0x0800676b
 8006598:	0800676b 	.word	0x0800676b
 800659c:	0800676b 	.word	0x0800676b
 80065a0:	08006625 	.word	0x08006625
 80065a4:	0800676b 	.word	0x0800676b
 80065a8:	0800676b 	.word	0x0800676b
 80065ac:	0800676b 	.word	0x0800676b
 80065b0:	08006667 	.word	0x08006667
 80065b4:	0800676b 	.word	0x0800676b
 80065b8:	0800676b 	.word	0x0800676b
 80065bc:	0800676b 	.word	0x0800676b
 80065c0:	080066a7 	.word	0x080066a7
 80065c4:	0800676b 	.word	0x0800676b
 80065c8:	0800676b 	.word	0x0800676b
 80065cc:	0800676b 	.word	0x0800676b
 80065d0:	080066e9 	.word	0x080066e9
 80065d4:	0800676b 	.word	0x0800676b
 80065d8:	0800676b 	.word	0x0800676b
 80065dc:	0800676b 	.word	0x0800676b
 80065e0:	08006729 	.word	0x08006729
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fa94 	bl	8006b18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0208 	orr.w	r2, r2, #8
 80065fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0204 	bic.w	r2, r2, #4
 800660e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6999      	ldr	r1, [r3, #24]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	619a      	str	r2, [r3, #24]
      break;
 8006622:	e0a5      	b.n	8006770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fb0e 	bl	8006c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6999      	ldr	r1, [r3, #24]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	021a      	lsls	r2, r3, #8
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	619a      	str	r2, [r3, #24]
      break;
 8006664:	e084      	b.n	8006770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fb81 	bl	8006d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0208 	orr.w	r2, r2, #8
 8006680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0204 	bic.w	r2, r2, #4
 8006690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69d9      	ldr	r1, [r3, #28]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	61da      	str	r2, [r3, #28]
      break;
 80066a4:	e064      	b.n	8006770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fbf3 	bl	8006e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69d9      	ldr	r1, [r3, #28]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	021a      	lsls	r2, r3, #8
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	61da      	str	r2, [r3, #28]
      break;
 80066e6:	e043      	b.n	8006770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fc42 	bl	8006f78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0208 	orr.w	r2, r2, #8
 8006702:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0204 	bic.w	r2, r2, #4
 8006712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006726:	e023      	b.n	8006770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fc8c 	bl	800704c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	021a      	lsls	r2, r3, #8
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006768:	e002      	b.n	8006770 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	75fb      	strb	r3, [r7, #23]
      break;
 800676e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop

08006784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c>
 800679c:	2302      	movs	r3, #2
 800679e:	e0b6      	b.n	800690e <HAL_TIM_ConfigClockSource+0x18a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067dc:	d03e      	beq.n	800685c <HAL_TIM_ConfigClockSource+0xd8>
 80067de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e2:	f200 8087 	bhi.w	80068f4 <HAL_TIM_ConfigClockSource+0x170>
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ea:	f000 8086 	beq.w	80068fa <HAL_TIM_ConfigClockSource+0x176>
 80067ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f2:	d87f      	bhi.n	80068f4 <HAL_TIM_ConfigClockSource+0x170>
 80067f4:	2b70      	cmp	r3, #112	; 0x70
 80067f6:	d01a      	beq.n	800682e <HAL_TIM_ConfigClockSource+0xaa>
 80067f8:	2b70      	cmp	r3, #112	; 0x70
 80067fa:	d87b      	bhi.n	80068f4 <HAL_TIM_ConfigClockSource+0x170>
 80067fc:	2b60      	cmp	r3, #96	; 0x60
 80067fe:	d050      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x11e>
 8006800:	2b60      	cmp	r3, #96	; 0x60
 8006802:	d877      	bhi.n	80068f4 <HAL_TIM_ConfigClockSource+0x170>
 8006804:	2b50      	cmp	r3, #80	; 0x50
 8006806:	d03c      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0xfe>
 8006808:	2b50      	cmp	r3, #80	; 0x50
 800680a:	d873      	bhi.n	80068f4 <HAL_TIM_ConfigClockSource+0x170>
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	d058      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x13e>
 8006810:	2b40      	cmp	r3, #64	; 0x40
 8006812:	d86f      	bhi.n	80068f4 <HAL_TIM_ConfigClockSource+0x170>
 8006814:	2b30      	cmp	r3, #48	; 0x30
 8006816:	d064      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006818:	2b30      	cmp	r3, #48	; 0x30
 800681a:	d86b      	bhi.n	80068f4 <HAL_TIM_ConfigClockSource+0x170>
 800681c:	2b20      	cmp	r3, #32
 800681e:	d060      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006820:	2b20      	cmp	r3, #32
 8006822:	d867      	bhi.n	80068f4 <HAL_TIM_ConfigClockSource+0x170>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05c      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006828:	2b10      	cmp	r3, #16
 800682a:	d05a      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x15e>
 800682c:	e062      	b.n	80068f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800683e:	f000 fe0f 	bl	8007460 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	609a      	str	r2, [r3, #8]
      break;
 800685a:	e04f      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800686c:	f000 fdf8 	bl	8007460 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800687e:	609a      	str	r2, [r3, #8]
      break;
 8006880:	e03c      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800688e:	461a      	mov	r2, r3
 8006890:	f000 fcb6 	bl	8007200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2150      	movs	r1, #80	; 0x50
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fdc5 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 80068a0:	e02c      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ae:	461a      	mov	r2, r3
 80068b0:	f000 fd12 	bl	80072d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2160      	movs	r1, #96	; 0x60
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fdb5 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 80068c0:	e01c      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ce:	461a      	mov	r2, r3
 80068d0:	f000 fc96 	bl	8007200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fda5 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 80068e0:	e00c      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4619      	mov	r1, r3
 80068ec:	4610      	mov	r0, r2
 80068ee:	f000 fd9c 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 80068f2:	e003      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
      break;
 80068f8:	e000      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b0c      	cmp	r3, #12
 800692a:	d831      	bhi.n	8006990 <HAL_TIM_ReadCapturedValue+0x78>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <HAL_TIM_ReadCapturedValue+0x1c>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006969 	.word	0x08006969
 8006938:	08006991 	.word	0x08006991
 800693c:	08006991 	.word	0x08006991
 8006940:	08006991 	.word	0x08006991
 8006944:	08006973 	.word	0x08006973
 8006948:	08006991 	.word	0x08006991
 800694c:	08006991 	.word	0x08006991
 8006950:	08006991 	.word	0x08006991
 8006954:	0800697d 	.word	0x0800697d
 8006958:	08006991 	.word	0x08006991
 800695c:	08006991 	.word	0x08006991
 8006960:	08006991 	.word	0x08006991
 8006964:	08006987 	.word	0x08006987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	60fb      	str	r3, [r7, #12]

      break;
 8006970:	e00f      	b.n	8006992 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	60fb      	str	r3, [r7, #12]

      break;
 800697a:	e00a      	b.n	8006992 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	60fb      	str	r3, [r7, #12]

      break;
 8006984:	e005      	b.n	8006992 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698c:	60fb      	str	r3, [r7, #12]

      break;
 800698e:	e000      	b.n	8006992 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006990:	bf00      	nop
  }

  return tmpreg;
 8006992:	68fb      	ldr	r3, [r7, #12]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a42      	ldr	r2, [pc, #264]	; (8006af8 <TIM_Base_SetConfig+0x11c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fa:	d00f      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3f      	ldr	r2, [pc, #252]	; (8006afc <TIM_Base_SetConfig+0x120>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3e      	ldr	r2, [pc, #248]	; (8006b00 <TIM_Base_SetConfig+0x124>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3d      	ldr	r2, [pc, #244]	; (8006b04 <TIM_Base_SetConfig+0x128>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a3c      	ldr	r2, [pc, #240]	; (8006b08 <TIM_Base_SetConfig+0x12c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a31      	ldr	r2, [pc, #196]	; (8006af8 <TIM_Base_SetConfig+0x11c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01f      	beq.n	8006a76 <TIM_Base_SetConfig+0x9a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d01b      	beq.n	8006a76 <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2e      	ldr	r2, [pc, #184]	; (8006afc <TIM_Base_SetConfig+0x120>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d017      	beq.n	8006a76 <TIM_Base_SetConfig+0x9a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2d      	ldr	r2, [pc, #180]	; (8006b00 <TIM_Base_SetConfig+0x124>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <TIM_Base_SetConfig+0x9a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <TIM_Base_SetConfig+0x128>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00f      	beq.n	8006a76 <TIM_Base_SetConfig+0x9a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a2c      	ldr	r2, [pc, #176]	; (8006b0c <TIM_Base_SetConfig+0x130>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00b      	beq.n	8006a76 <TIM_Base_SetConfig+0x9a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a2b      	ldr	r2, [pc, #172]	; (8006b10 <TIM_Base_SetConfig+0x134>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_Base_SetConfig+0x9a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <TIM_Base_SetConfig+0x138>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_Base_SetConfig+0x9a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a25      	ldr	r2, [pc, #148]	; (8006b08 <TIM_Base_SetConfig+0x12c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d108      	bne.n	8006a88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <TIM_Base_SetConfig+0x11c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d013      	beq.n	8006adc <TIM_Base_SetConfig+0x100>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a13      	ldr	r2, [pc, #76]	; (8006b04 <TIM_Base_SetConfig+0x128>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00f      	beq.n	8006adc <TIM_Base_SetConfig+0x100>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a13      	ldr	r2, [pc, #76]	; (8006b0c <TIM_Base_SetConfig+0x130>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00b      	beq.n	8006adc <TIM_Base_SetConfig+0x100>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a12      	ldr	r2, [pc, #72]	; (8006b10 <TIM_Base_SetConfig+0x134>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d007      	beq.n	8006adc <TIM_Base_SetConfig+0x100>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a11      	ldr	r2, [pc, #68]	; (8006b14 <TIM_Base_SetConfig+0x138>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_Base_SetConfig+0x100>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <TIM_Base_SetConfig+0x12c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d103      	bne.n	8006ae4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	615a      	str	r2, [r3, #20]
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40013400 	.word	0x40013400
 8006b08:	40015000 	.word	0x40015000
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40014400 	.word	0x40014400
 8006b14:	40014800 	.word	0x40014800

08006b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0302 	bic.w	r3, r3, #2
 8006b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a30      	ldr	r2, [pc, #192]	; (8006c34 <TIM_OC1_SetConfig+0x11c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d013      	beq.n	8006ba0 <TIM_OC1_SetConfig+0x88>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a2f      	ldr	r2, [pc, #188]	; (8006c38 <TIM_OC1_SetConfig+0x120>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00f      	beq.n	8006ba0 <TIM_OC1_SetConfig+0x88>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a2e      	ldr	r2, [pc, #184]	; (8006c3c <TIM_OC1_SetConfig+0x124>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00b      	beq.n	8006ba0 <TIM_OC1_SetConfig+0x88>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a2d      	ldr	r2, [pc, #180]	; (8006c40 <TIM_OC1_SetConfig+0x128>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d007      	beq.n	8006ba0 <TIM_OC1_SetConfig+0x88>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a2c      	ldr	r2, [pc, #176]	; (8006c44 <TIM_OC1_SetConfig+0x12c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_OC1_SetConfig+0x88>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a2b      	ldr	r2, [pc, #172]	; (8006c48 <TIM_OC1_SetConfig+0x130>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10c      	bne.n	8006bba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0308 	bic.w	r3, r3, #8
 8006ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f023 0304 	bic.w	r3, r3, #4
 8006bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <TIM_OC1_SetConfig+0x11c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <TIM_OC1_SetConfig+0xd2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <TIM_OC1_SetConfig+0x120>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00f      	beq.n	8006bea <TIM_OC1_SetConfig+0xd2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <TIM_OC1_SetConfig+0x124>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <TIM_OC1_SetConfig+0xd2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1a      	ldr	r2, [pc, #104]	; (8006c40 <TIM_OC1_SetConfig+0x128>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d007      	beq.n	8006bea <TIM_OC1_SetConfig+0xd2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a19      	ldr	r2, [pc, #100]	; (8006c44 <TIM_OC1_SetConfig+0x12c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_OC1_SetConfig+0xd2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a18      	ldr	r2, [pc, #96]	; (8006c48 <TIM_OC1_SetConfig+0x130>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d111      	bne.n	8006c0e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	621a      	str	r2, [r3, #32]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	40012c00 	.word	0x40012c00
 8006c38:	40013400 	.word	0x40013400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800
 8006c48:	40015000 	.word	0x40015000

08006c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0210 	bic.w	r2, r3, #16
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 0320 	bic.w	r3, r3, #32
 8006c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <TIM_OC2_SetConfig+0x110>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d007      	beq.n	8006cc0 <TIM_OC2_SetConfig+0x74>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a2b      	ldr	r2, [pc, #172]	; (8006d60 <TIM_OC2_SetConfig+0x114>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_OC2_SetConfig+0x74>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a2a      	ldr	r2, [pc, #168]	; (8006d64 <TIM_OC2_SetConfig+0x118>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10d      	bne.n	8006cdc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a1f      	ldr	r2, [pc, #124]	; (8006d5c <TIM_OC2_SetConfig+0x110>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d013      	beq.n	8006d0c <TIM_OC2_SetConfig+0xc0>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a1e      	ldr	r2, [pc, #120]	; (8006d60 <TIM_OC2_SetConfig+0x114>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00f      	beq.n	8006d0c <TIM_OC2_SetConfig+0xc0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a1e      	ldr	r2, [pc, #120]	; (8006d68 <TIM_OC2_SetConfig+0x11c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00b      	beq.n	8006d0c <TIM_OC2_SetConfig+0xc0>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <TIM_OC2_SetConfig+0x120>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d007      	beq.n	8006d0c <TIM_OC2_SetConfig+0xc0>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a1c      	ldr	r2, [pc, #112]	; (8006d70 <TIM_OC2_SetConfig+0x124>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC2_SetConfig+0xc0>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a17      	ldr	r2, [pc, #92]	; (8006d64 <TIM_OC2_SetConfig+0x118>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d113      	bne.n	8006d34 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d12:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d1a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40012c00 	.word	0x40012c00
 8006d60:	40013400 	.word	0x40013400
 8006d64:	40015000 	.word	0x40015000
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800

08006d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2b      	ldr	r2, [pc, #172]	; (8006e80 <TIM_OC3_SetConfig+0x10c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d007      	beq.n	8006de6 <TIM_OC3_SetConfig+0x72>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a2a      	ldr	r2, [pc, #168]	; (8006e84 <TIM_OC3_SetConfig+0x110>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d003      	beq.n	8006de6 <TIM_OC3_SetConfig+0x72>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a29      	ldr	r2, [pc, #164]	; (8006e88 <TIM_OC3_SetConfig+0x114>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10d      	bne.n	8006e02 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e00:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <TIM_OC3_SetConfig+0x10c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <TIM_OC3_SetConfig+0xbe>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <TIM_OC3_SetConfig+0x110>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00f      	beq.n	8006e32 <TIM_OC3_SetConfig+0xbe>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <TIM_OC3_SetConfig+0x118>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00b      	beq.n	8006e32 <TIM_OC3_SetConfig+0xbe>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1c      	ldr	r2, [pc, #112]	; (8006e90 <TIM_OC3_SetConfig+0x11c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <TIM_OC3_SetConfig+0xbe>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1b      	ldr	r2, [pc, #108]	; (8006e94 <TIM_OC3_SetConfig+0x120>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_OC3_SetConfig+0xbe>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <TIM_OC3_SetConfig+0x114>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d113      	bne.n	8006e5a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	621a      	str	r2, [r3, #32]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40012c00 	.word	0x40012c00
 8006e84:	40013400 	.word	0x40013400
 8006e88:	40015000 	.word	0x40015000
 8006e8c:	40014000 	.word	0x40014000
 8006e90:	40014400 	.word	0x40014400
 8006e94:	40014800 	.word	0x40014800

08006e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	031b      	lsls	r3, r3, #12
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a1a      	ldr	r2, [pc, #104]	; (8006f60 <TIM_OC4_SetConfig+0xc8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <TIM_OC4_SetConfig+0x8c>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a19      	ldr	r2, [pc, #100]	; (8006f64 <TIM_OC4_SetConfig+0xcc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00f      	beq.n	8006f24 <TIM_OC4_SetConfig+0x8c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <TIM_OC4_SetConfig+0xd0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00b      	beq.n	8006f24 <TIM_OC4_SetConfig+0x8c>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <TIM_OC4_SetConfig+0xd4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <TIM_OC4_SetConfig+0x8c>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <TIM_OC4_SetConfig+0xd8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_OC4_SetConfig+0x8c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a15      	ldr	r2, [pc, #84]	; (8006f74 <TIM_OC4_SetConfig+0xdc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d109      	bne.n	8006f38 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	019b      	lsls	r3, r3, #6
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40013400 	.word	0x40013400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40014400 	.word	0x40014400
 8006f70:	40014800 	.word	0x40014800
 8006f74:	40015000 	.word	0x40015000

08006f78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	041b      	lsls	r3, r3, #16
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a19      	ldr	r2, [pc, #100]	; (8007034 <TIM_OC5_SetConfig+0xbc>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <TIM_OC5_SetConfig+0x82>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a18      	ldr	r2, [pc, #96]	; (8007038 <TIM_OC5_SetConfig+0xc0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00f      	beq.n	8006ffa <TIM_OC5_SetConfig+0x82>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a17      	ldr	r2, [pc, #92]	; (800703c <TIM_OC5_SetConfig+0xc4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00b      	beq.n	8006ffa <TIM_OC5_SetConfig+0x82>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a16      	ldr	r2, [pc, #88]	; (8007040 <TIM_OC5_SetConfig+0xc8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d007      	beq.n	8006ffa <TIM_OC5_SetConfig+0x82>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <TIM_OC5_SetConfig+0xcc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_OC5_SetConfig+0x82>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a14      	ldr	r2, [pc, #80]	; (8007048 <TIM_OC5_SetConfig+0xd0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d109      	bne.n	800700e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007000:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	621a      	str	r2, [r3, #32]
}
 8007028:	bf00      	nop
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40014000 	.word	0x40014000
 8007040:	40014400 	.word	0x40014400
 8007044:	40014800 	.word	0x40014800
 8007048:	40015000 	.word	0x40015000

0800704c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800707a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	021b      	lsls	r3, r3, #8
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	051b      	lsls	r3, r3, #20
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a1a      	ldr	r2, [pc, #104]	; (800710c <TIM_OC6_SetConfig+0xc0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <TIM_OC6_SetConfig+0x84>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a19      	ldr	r2, [pc, #100]	; (8007110 <TIM_OC6_SetConfig+0xc4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00f      	beq.n	80070d0 <TIM_OC6_SetConfig+0x84>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a18      	ldr	r2, [pc, #96]	; (8007114 <TIM_OC6_SetConfig+0xc8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00b      	beq.n	80070d0 <TIM_OC6_SetConfig+0x84>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a17      	ldr	r2, [pc, #92]	; (8007118 <TIM_OC6_SetConfig+0xcc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d007      	beq.n	80070d0 <TIM_OC6_SetConfig+0x84>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a16      	ldr	r2, [pc, #88]	; (800711c <TIM_OC6_SetConfig+0xd0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_OC6_SetConfig+0x84>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <TIM_OC6_SetConfig+0xd4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d109      	bne.n	80070e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	029b      	lsls	r3, r3, #10
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	621a      	str	r2, [r3, #32]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40012c00 	.word	0x40012c00
 8007110:	40013400 	.word	0x40013400
 8007114:	40014000 	.word	0x40014000
 8007118:	40014400 	.word	0x40014400
 800711c:	40014800 	.word	0x40014800
 8007120:	40015000 	.word	0x40015000

08007124 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f023 0201 	bic.w	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <TIM_TI1_SetConfig+0xc4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d017      	beq.n	8007182 <TIM_TI1_SetConfig+0x5e>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007158:	d013      	beq.n	8007182 <TIM_TI1_SetConfig+0x5e>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4a23      	ldr	r2, [pc, #140]	; (80071ec <TIM_TI1_SetConfig+0xc8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00f      	beq.n	8007182 <TIM_TI1_SetConfig+0x5e>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4a22      	ldr	r2, [pc, #136]	; (80071f0 <TIM_TI1_SetConfig+0xcc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00b      	beq.n	8007182 <TIM_TI1_SetConfig+0x5e>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4a21      	ldr	r2, [pc, #132]	; (80071f4 <TIM_TI1_SetConfig+0xd0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d007      	beq.n	8007182 <TIM_TI1_SetConfig+0x5e>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <TIM_TI1_SetConfig+0xd4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_TI1_SetConfig+0x5e>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4a1f      	ldr	r2, [pc, #124]	; (80071fc <TIM_TI1_SetConfig+0xd8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d101      	bne.n	8007186 <TIM_TI1_SetConfig+0x62>
 8007182:	2301      	movs	r3, #1
 8007184:	e000      	b.n	8007188 <TIM_TI1_SetConfig+0x64>
 8007186:	2300      	movs	r3, #0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	e003      	b.n	80071a6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f023 030a 	bic.w	r3, r3, #10
 80071c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f003 030a 	and.w	r3, r3, #10
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40012c00 	.word	0x40012c00
 80071ec:	40000400 	.word	0x40000400
 80071f0:	40000800 	.word	0x40000800
 80071f4:	40013400 	.word	0x40013400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40015000 	.word	0x40015000

08007200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800722a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f023 030a 	bic.w	r3, r3, #10
 800723c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800725e:	b480      	push	{r7}
 8007260:	b087      	sub	sp, #28
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
 800726a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f023 0210 	bic.w	r2, r3, #16
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800729c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	621a      	str	r2, [r3, #32]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	f023 0210 	bic.w	r2, r3, #16
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007302:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	031b      	lsls	r3, r3, #12
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007314:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	621a      	str	r2, [r3, #32]
}
 800732c:	bf00      	nop
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f023 0303 	bic.w	r3, r3, #3
 8007364:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007374:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	b2db      	uxtb	r3, r3
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007388:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	621a      	str	r2, [r3, #32]
}
 80073a4:	bf00      	nop
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	031b      	lsls	r3, r3, #12
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007402:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	031b      	lsls	r3, r3, #12
 8007408:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	f043 0307 	orr.w	r3, r3, #7
 800744c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	609a      	str	r2, [r3, #8]
}
 8007454:	bf00      	nop
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800747a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	021a      	lsls	r2, r3, #8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	431a      	orrs	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4313      	orrs	r3, r2
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	609a      	str	r2, [r3, #8]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	2201      	movs	r2, #1
 80074b4:	fa02 f303 	lsl.w	r3, r2, r3
 80074b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a1a      	ldr	r2, [r3, #32]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	43db      	mvns	r3, r3
 80074c2:	401a      	ands	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1a      	ldr	r2, [r3, #32]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 031f 	and.w	r3, r3, #31
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	fa01 f303 	lsl.w	r3, r1, r3
 80074d8:	431a      	orrs	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	621a      	str	r2, [r3, #32]
}
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
	...

080074ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007500:	2302      	movs	r3, #2
 8007502:	e06d      	b.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a30      	ldr	r2, [pc, #192]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d009      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2f      	ldr	r2, [pc, #188]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2d      	ldr	r2, [pc, #180]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d108      	bne.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007548:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1e      	ldr	r2, [pc, #120]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d01d      	beq.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007580:	d018      	beq.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1c      	ldr	r2, [pc, #112]	; (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d013      	beq.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a1a      	ldr	r2, [pc, #104]	; (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00e      	beq.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d009      	beq.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a16      	ldr	r2, [pc, #88]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d004      	beq.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d10c      	bne.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	40012c00 	.word	0x40012c00
 80075f0:	40013400 	.word	0x40013400
 80075f4:	40015000 	.word	0x40015000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40014000 	.word	0x40014000

08007604 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800761c:	2302      	movs	r3, #2
 800761e:	e06a      	b.n	80076f6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	041b      	lsls	r3, r3, #16
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a19      	ldr	r2, [pc, #100]	; (8007704 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d009      	beq.n	80076b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a17      	ldr	r2, [pc, #92]	; (8007708 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a16      	ldr	r2, [pc, #88]	; (800770c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d115      	bne.n	80076e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	051b      	lsls	r3, r3, #20
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40013400 	.word	0x40013400
 800770c:	40015000 	.word	0x40015000

08007710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e040      	b.n	80077e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fb fa70 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2224      	movs	r2, #36	; 0x24
 8007778:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0201 	bic.w	r2, r2, #1
 8007788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fb76 	bl	8007e7c <UART_SetConfig>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e022      	b.n	80077e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fd3e 	bl	8008224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fdc5 	bl	8008368 <UART_CheckIdleState>
 80077de:	4603      	mov	r3, r0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d132      	bne.n	8007866 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_UART_Receive_IT+0x24>
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e02b      	b.n	8007868 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d018      	beq.n	8007856 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	613b      	str	r3, [r7, #16]
   return(result);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	623b      	str	r3, [r7, #32]
 8007844:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	69f9      	ldr	r1, [r7, #28]
 8007848:	6a3a      	ldr	r2, [r7, #32]
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e6      	bne.n	8007824 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	461a      	mov	r2, r3
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 fe93 	bl	8008588 <UART_Start_Receive_IT>
 8007862:	4603      	mov	r3, r0
 8007864:	e000      	b.n	8007868 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007866:	2302      	movs	r3, #2
  }
}
 8007868:	4618      	mov	r0, r3
 800786a:	3728      	adds	r7, #40	; 0x28
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b0ba      	sub	sp, #232	; 0xe8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007896:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800789a:	f640 030f 	movw	r3, #2063	; 0x80f
 800789e:	4013      	ands	r3, r2
 80078a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d115      	bne.n	80078d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00f      	beq.n	80078d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 82ab 	beq.w	8007e24 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
      }
      return;
 80078d6:	e2a5      	b.n	8007e24 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8117 	beq.w	8007b10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80078e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80078ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80078f2:	4b85      	ldr	r3, [pc, #532]	; (8007b08 <HAL_UART_IRQHandler+0x298>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 810a 	beq.w	8007b10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d011      	beq.n	800792c <HAL_UART_IRQHandler+0xbc>
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2201      	movs	r2, #1
 800791a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007922:	f043 0201 	orr.w	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800792c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d011      	beq.n	800795c <HAL_UART_IRQHandler+0xec>
 8007938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2202      	movs	r2, #2
 800794a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007952:	f043 0204 	orr.w	r2, r3, #4
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d011      	beq.n	800798c <HAL_UART_IRQHandler+0x11c>
 8007968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2204      	movs	r2, #4
 800797a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007982:	f043 0202 	orr.w	r2, r3, #2
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2208      	movs	r2, #8
 80079b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079be:	f043 0208 	orr.w	r2, r3, #8
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d012      	beq.n	80079fa <HAL_UART_IRQHandler+0x18a>
 80079d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00c      	beq.n	80079fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f0:	f043 0220 	orr.w	r2, r3, #32
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8211 	beq.w	8007e28 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00d      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d005      	beq.n	8007a52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d04f      	beq.n	8007af2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fe5e 	bl	8008714 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b40      	cmp	r3, #64	; 0x40
 8007a64:	d141      	bne.n	8007aea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1d9      	bne.n	8007a66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d013      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007abe:	4a13      	ldr	r2, [pc, #76]	; (8007b0c <HAL_UART_IRQHandler+0x29c>)
 8007ac0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fb ff95 	bl	80039f6 <HAL_DMA_Abort_IT>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d017      	beq.n	8007b02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae0:	e00f      	b.n	8007b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f9b4 	bl	8007e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae8:	e00b      	b.n	8007b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9b0 	bl	8007e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af0:	e007      	b.n	8007b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f9ac 	bl	8007e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007b00:	e192      	b.n	8007e28 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b02:	bf00      	nop
    return;
 8007b04:	e190      	b.n	8007e28 <HAL_UART_IRQHandler+0x5b8>
 8007b06:	bf00      	nop
 8007b08:	04000120 	.word	0x04000120
 8007b0c:	080087dd 	.word	0x080087dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	f040 814b 	bne.w	8007db0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1e:	f003 0310 	and.w	r3, r3, #16
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 8144 	beq.w	8007db0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 813d 	beq.w	8007db0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2210      	movs	r2, #16
 8007b3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	f040 80b5 	bne.w	8007cb8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8164 	beq.w	8007e2c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	f080 815c 	bcs.w	8007e2c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	f000 8086 	beq.w	8007c96 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bb8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1da      	bne.n	8007b8a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007bf8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e1      	bne.n	8007bd4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3308      	adds	r3, #8
 8007c16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e3      	bne.n	8007c10 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c66:	f023 0310 	bic.w	r3, r3, #16
 8007c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e4      	bne.n	8007c56 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fb fe77 	bl	8003984 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f8d7 	bl	8007e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cb6:	e0b9      	b.n	8007e2c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 80ab 	beq.w	8007e30 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 80a6 	beq.w	8007e30 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d06:	647b      	str	r3, [r7, #68]	; 0x44
 8007d08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e4      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	623b      	str	r3, [r7, #32]
   return(result);
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	f023 0301 	bic.w	r3, r3, #1
 8007d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3308      	adds	r3, #8
 8007d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e3      	bne.n	8007d1a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f023 0310 	bic.w	r3, r3, #16
 8007d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	69b9      	ldr	r1, [r7, #24]
 8007d8e:	69fa      	ldr	r2, [r7, #28]
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	617b      	str	r3, [r7, #20]
   return(result);
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e4      	bne.n	8007d66 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007da2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f85b 	bl	8007e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dae:	e03f      	b.n	8007e30 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00e      	beq.n	8007dda <HAL_UART_IRQHandler+0x56a>
 8007dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d008      	beq.n	8007dda <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007dd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 feea 	bl	8008bac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dd8:	e02d      	b.n	8007e36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00e      	beq.n	8007e04 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d008      	beq.n	8007e04 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d01c      	beq.n	8007e34 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
    }
    return;
 8007e02:	e017      	b.n	8007e34 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d012      	beq.n	8007e36 <HAL_UART_IRQHandler+0x5c6>
 8007e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00c      	beq.n	8007e36 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fcf3 	bl	8008808 <UART_EndTransmit_IT>
    return;
 8007e22:	e008      	b.n	8007e36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e24:	bf00      	nop
 8007e26:	e006      	b.n	8007e36 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007e28:	bf00      	nop
 8007e2a:	e004      	b.n	8007e36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e2c:	bf00      	nop
 8007e2e:	e002      	b.n	8007e36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007e34:	bf00      	nop
  }

}
 8007e36:	37e8      	adds	r7, #232	; 0xe8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b92      	ldr	r3, [pc, #584]	; (80080f0 <UART_SetConfig+0x274>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	6979      	ldr	r1, [r7, #20]
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a80      	ldr	r2, [pc, #512]	; (80080f4 <UART_SetConfig+0x278>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d120      	bne.n	8007f3a <UART_SetConfig+0xbe>
 8007ef8:	4b7f      	ldr	r3, [pc, #508]	; (80080f8 <UART_SetConfig+0x27c>)
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d817      	bhi.n	8007f34 <UART_SetConfig+0xb8>
 8007f04:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <UART_SetConfig+0x90>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f29 	.word	0x08007f29
 8007f14:	08007f2f 	.word	0x08007f2f
 8007f18:	08007f23 	.word	0x08007f23
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	77fb      	strb	r3, [r7, #31]
 8007f20:	e0b5      	b.n	800808e <UART_SetConfig+0x212>
 8007f22:	2302      	movs	r3, #2
 8007f24:	77fb      	strb	r3, [r7, #31]
 8007f26:	e0b2      	b.n	800808e <UART_SetConfig+0x212>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	77fb      	strb	r3, [r7, #31]
 8007f2c:	e0af      	b.n	800808e <UART_SetConfig+0x212>
 8007f2e:	2308      	movs	r3, #8
 8007f30:	77fb      	strb	r3, [r7, #31]
 8007f32:	e0ac      	b.n	800808e <UART_SetConfig+0x212>
 8007f34:	2310      	movs	r3, #16
 8007f36:	77fb      	strb	r3, [r7, #31]
 8007f38:	e0a9      	b.n	800808e <UART_SetConfig+0x212>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a6f      	ldr	r2, [pc, #444]	; (80080fc <UART_SetConfig+0x280>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d124      	bne.n	8007f8e <UART_SetConfig+0x112>
 8007f44:	4b6c      	ldr	r3, [pc, #432]	; (80080f8 <UART_SetConfig+0x27c>)
 8007f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f50:	d011      	beq.n	8007f76 <UART_SetConfig+0xfa>
 8007f52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f56:	d817      	bhi.n	8007f88 <UART_SetConfig+0x10c>
 8007f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f5c:	d011      	beq.n	8007f82 <UART_SetConfig+0x106>
 8007f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f62:	d811      	bhi.n	8007f88 <UART_SetConfig+0x10c>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <UART_SetConfig+0xf4>
 8007f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f6c:	d006      	beq.n	8007f7c <UART_SetConfig+0x100>
 8007f6e:	e00b      	b.n	8007f88 <UART_SetConfig+0x10c>
 8007f70:	2300      	movs	r3, #0
 8007f72:	77fb      	strb	r3, [r7, #31]
 8007f74:	e08b      	b.n	800808e <UART_SetConfig+0x212>
 8007f76:	2302      	movs	r3, #2
 8007f78:	77fb      	strb	r3, [r7, #31]
 8007f7a:	e088      	b.n	800808e <UART_SetConfig+0x212>
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	77fb      	strb	r3, [r7, #31]
 8007f80:	e085      	b.n	800808e <UART_SetConfig+0x212>
 8007f82:	2308      	movs	r3, #8
 8007f84:	77fb      	strb	r3, [r7, #31]
 8007f86:	e082      	b.n	800808e <UART_SetConfig+0x212>
 8007f88:	2310      	movs	r3, #16
 8007f8a:	77fb      	strb	r3, [r7, #31]
 8007f8c:	e07f      	b.n	800808e <UART_SetConfig+0x212>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a5b      	ldr	r2, [pc, #364]	; (8008100 <UART_SetConfig+0x284>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d124      	bne.n	8007fe2 <UART_SetConfig+0x166>
 8007f98:	4b57      	ldr	r3, [pc, #348]	; (80080f8 <UART_SetConfig+0x27c>)
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007fa0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007fa4:	d011      	beq.n	8007fca <UART_SetConfig+0x14e>
 8007fa6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007faa:	d817      	bhi.n	8007fdc <UART_SetConfig+0x160>
 8007fac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fb0:	d011      	beq.n	8007fd6 <UART_SetConfig+0x15a>
 8007fb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fb6:	d811      	bhi.n	8007fdc <UART_SetConfig+0x160>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <UART_SetConfig+0x148>
 8007fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fc0:	d006      	beq.n	8007fd0 <UART_SetConfig+0x154>
 8007fc2:	e00b      	b.n	8007fdc <UART_SetConfig+0x160>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	77fb      	strb	r3, [r7, #31]
 8007fc8:	e061      	b.n	800808e <UART_SetConfig+0x212>
 8007fca:	2302      	movs	r3, #2
 8007fcc:	77fb      	strb	r3, [r7, #31]
 8007fce:	e05e      	b.n	800808e <UART_SetConfig+0x212>
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	77fb      	strb	r3, [r7, #31]
 8007fd4:	e05b      	b.n	800808e <UART_SetConfig+0x212>
 8007fd6:	2308      	movs	r3, #8
 8007fd8:	77fb      	strb	r3, [r7, #31]
 8007fda:	e058      	b.n	800808e <UART_SetConfig+0x212>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	77fb      	strb	r3, [r7, #31]
 8007fe0:	e055      	b.n	800808e <UART_SetConfig+0x212>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a47      	ldr	r2, [pc, #284]	; (8008104 <UART_SetConfig+0x288>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d124      	bne.n	8008036 <UART_SetConfig+0x1ba>
 8007fec:	4b42      	ldr	r3, [pc, #264]	; (80080f8 <UART_SetConfig+0x27c>)
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007ff4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ff8:	d011      	beq.n	800801e <UART_SetConfig+0x1a2>
 8007ffa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ffe:	d817      	bhi.n	8008030 <UART_SetConfig+0x1b4>
 8008000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008004:	d011      	beq.n	800802a <UART_SetConfig+0x1ae>
 8008006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800800a:	d811      	bhi.n	8008030 <UART_SetConfig+0x1b4>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <UART_SetConfig+0x19c>
 8008010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008014:	d006      	beq.n	8008024 <UART_SetConfig+0x1a8>
 8008016:	e00b      	b.n	8008030 <UART_SetConfig+0x1b4>
 8008018:	2300      	movs	r3, #0
 800801a:	77fb      	strb	r3, [r7, #31]
 800801c:	e037      	b.n	800808e <UART_SetConfig+0x212>
 800801e:	2302      	movs	r3, #2
 8008020:	77fb      	strb	r3, [r7, #31]
 8008022:	e034      	b.n	800808e <UART_SetConfig+0x212>
 8008024:	2304      	movs	r3, #4
 8008026:	77fb      	strb	r3, [r7, #31]
 8008028:	e031      	b.n	800808e <UART_SetConfig+0x212>
 800802a:	2308      	movs	r3, #8
 800802c:	77fb      	strb	r3, [r7, #31]
 800802e:	e02e      	b.n	800808e <UART_SetConfig+0x212>
 8008030:	2310      	movs	r3, #16
 8008032:	77fb      	strb	r3, [r7, #31]
 8008034:	e02b      	b.n	800808e <UART_SetConfig+0x212>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a33      	ldr	r2, [pc, #204]	; (8008108 <UART_SetConfig+0x28c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d124      	bne.n	800808a <UART_SetConfig+0x20e>
 8008040:	4b2d      	ldr	r3, [pc, #180]	; (80080f8 <UART_SetConfig+0x27c>)
 8008042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008044:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800804c:	d011      	beq.n	8008072 <UART_SetConfig+0x1f6>
 800804e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008052:	d817      	bhi.n	8008084 <UART_SetConfig+0x208>
 8008054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008058:	d011      	beq.n	800807e <UART_SetConfig+0x202>
 800805a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800805e:	d811      	bhi.n	8008084 <UART_SetConfig+0x208>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <UART_SetConfig+0x1f0>
 8008064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008068:	d006      	beq.n	8008078 <UART_SetConfig+0x1fc>
 800806a:	e00b      	b.n	8008084 <UART_SetConfig+0x208>
 800806c:	2300      	movs	r3, #0
 800806e:	77fb      	strb	r3, [r7, #31]
 8008070:	e00d      	b.n	800808e <UART_SetConfig+0x212>
 8008072:	2302      	movs	r3, #2
 8008074:	77fb      	strb	r3, [r7, #31]
 8008076:	e00a      	b.n	800808e <UART_SetConfig+0x212>
 8008078:	2304      	movs	r3, #4
 800807a:	77fb      	strb	r3, [r7, #31]
 800807c:	e007      	b.n	800808e <UART_SetConfig+0x212>
 800807e:	2308      	movs	r3, #8
 8008080:	77fb      	strb	r3, [r7, #31]
 8008082:	e004      	b.n	800808e <UART_SetConfig+0x212>
 8008084:	2310      	movs	r3, #16
 8008086:	77fb      	strb	r3, [r7, #31]
 8008088:	e001      	b.n	800808e <UART_SetConfig+0x212>
 800808a:	2310      	movs	r3, #16
 800808c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008096:	d16b      	bne.n	8008170 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008098:	7ffb      	ldrb	r3, [r7, #31]
 800809a:	2b08      	cmp	r3, #8
 800809c:	d838      	bhi.n	8008110 <UART_SetConfig+0x294>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0x228>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080c9 	.word	0x080080c9
 80080a8:	080080d1 	.word	0x080080d1
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	08008111 	.word	0x08008111
 80080b4:	080080df 	.word	0x080080df
 80080b8:	08008111 	.word	0x08008111
 80080bc:	08008111 	.word	0x08008111
 80080c0:	08008111 	.word	0x08008111
 80080c4:	080080e7 	.word	0x080080e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c8:	f7fd f8bc 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80080cc:	61b8      	str	r0, [r7, #24]
        break;
 80080ce:	e024      	b.n	800811a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d0:	f7fd f8da 	bl	8005288 <HAL_RCC_GetPCLK2Freq>
 80080d4:	61b8      	str	r0, [r7, #24]
        break;
 80080d6:	e020      	b.n	800811a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080d8:	4b0c      	ldr	r3, [pc, #48]	; (800810c <UART_SetConfig+0x290>)
 80080da:	61bb      	str	r3, [r7, #24]
        break;
 80080dc:	e01d      	b.n	800811a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080de:	f7fd f83b 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 80080e2:	61b8      	str	r0, [r7, #24]
        break;
 80080e4:	e019      	b.n	800811a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ea:	61bb      	str	r3, [r7, #24]
        break;
 80080ec:	e015      	b.n	800811a <UART_SetConfig+0x29e>
 80080ee:	bf00      	nop
 80080f0:	efff69f3 	.word	0xefff69f3
 80080f4:	40013800 	.word	0x40013800
 80080f8:	40021000 	.word	0x40021000
 80080fc:	40004400 	.word	0x40004400
 8008100:	40004800 	.word	0x40004800
 8008104:	40004c00 	.word	0x40004c00
 8008108:	40005000 	.word	0x40005000
 800810c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	77bb      	strb	r3, [r7, #30]
        break;
 8008118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d073      	beq.n	8008208 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	005a      	lsls	r2, r3, #1
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	441a      	add	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	fbb2 f3f3 	udiv	r3, r2, r3
 8008134:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	2b0f      	cmp	r3, #15
 800813a:	d916      	bls.n	800816a <UART_SetConfig+0x2ee>
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008142:	d212      	bcs.n	800816a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f023 030f 	bic.w	r3, r3, #15
 800814c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	085b      	lsrs	r3, r3, #1
 8008152:	b29b      	uxth	r3, r3
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	b29a      	uxth	r2, r3
 800815a:	89fb      	ldrh	r3, [r7, #14]
 800815c:	4313      	orrs	r3, r2
 800815e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	89fa      	ldrh	r2, [r7, #14]
 8008166:	60da      	str	r2, [r3, #12]
 8008168:	e04e      	b.n	8008208 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	77bb      	strb	r3, [r7, #30]
 800816e:	e04b      	b.n	8008208 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008170:	7ffb      	ldrb	r3, [r7, #31]
 8008172:	2b08      	cmp	r3, #8
 8008174:	d827      	bhi.n	80081c6 <UART_SetConfig+0x34a>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0x300>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081a9 	.word	0x080081a9
 8008184:	080081b1 	.word	0x080081b1
 8008188:	080081c7 	.word	0x080081c7
 800818c:	080081b7 	.word	0x080081b7
 8008190:	080081c7 	.word	0x080081c7
 8008194:	080081c7 	.word	0x080081c7
 8008198:	080081c7 	.word	0x080081c7
 800819c:	080081bf 	.word	0x080081bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a0:	f7fd f850 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80081a4:	61b8      	str	r0, [r7, #24]
        break;
 80081a6:	e013      	b.n	80081d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081a8:	f7fd f86e 	bl	8005288 <HAL_RCC_GetPCLK2Freq>
 80081ac:	61b8      	str	r0, [r7, #24]
        break;
 80081ae:	e00f      	b.n	80081d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081b0:	4b1b      	ldr	r3, [pc, #108]	; (8008220 <UART_SetConfig+0x3a4>)
 80081b2:	61bb      	str	r3, [r7, #24]
        break;
 80081b4:	e00c      	b.n	80081d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081b6:	f7fc ffcf 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 80081ba:	61b8      	str	r0, [r7, #24]
        break;
 80081bc:	e008      	b.n	80081d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c2:	61bb      	str	r3, [r7, #24]
        break;
 80081c4:	e004      	b.n	80081d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	77bb      	strb	r3, [r7, #30]
        break;
 80081ce:	bf00      	nop
    }

    if (pclk != 0U)
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d018      	beq.n	8008208 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	085a      	lsrs	r2, r3, #1
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	441a      	add	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b0f      	cmp	r3, #15
 80081ee:	d909      	bls.n	8008204 <UART_SetConfig+0x388>
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f6:	d205      	bcs.n	8008204 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	e001      	b.n	8008208 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008214:	7fbb      	ldrb	r3, [r7, #30]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	007a1200 	.word	0x007a1200

08008224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	f003 0310 	and.w	r3, r3, #16
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d01a      	beq.n	800833a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008322:	d10a      	bne.n	800833a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	605a      	str	r2, [r3, #4]
  }
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b098      	sub	sp, #96	; 0x60
 800836c:	af02      	add	r7, sp, #8
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008378:	f7fb f9f2 	bl	8003760 <HAL_GetTick>
 800837c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b08      	cmp	r3, #8
 800838a:	d12e      	bne.n	80083ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800838c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008394:	2200      	movs	r2, #0
 8008396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f88c 	bl	80084b8 <UART_WaitOnFlagUntilTimeout>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d021      	beq.n	80083ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ba:	653b      	str	r3, [r7, #80]	; 0x50
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c4:	647b      	str	r3, [r7, #68]	; 0x44
 80083c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e6      	bne.n	80083a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2220      	movs	r2, #32
 80083dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e062      	b.n	80084b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d149      	bne.n	800848c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008400:	2200      	movs	r2, #0
 8008402:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f856 	bl	80084b8 <UART_WaitOnFlagUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d03c      	beq.n	800848c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	623b      	str	r3, [r7, #32]
   return(result);
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008430:	633b      	str	r3, [r7, #48]	; 0x30
 8008432:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	60fb      	str	r3, [r7, #12]
   return(result);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0301 	bic.w	r3, r3, #1
 800845a:	64bb      	str	r3, [r7, #72]	; 0x48
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3308      	adds	r3, #8
 8008462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008464:	61fa      	str	r2, [r7, #28]
 8008466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	69b9      	ldr	r1, [r7, #24]
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	617b      	str	r3, [r7, #20]
   return(result);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e5      	bne.n	8008444 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2220      	movs	r2, #32
 800847c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e011      	b.n	80084b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3758      	adds	r7, #88	; 0x58
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	603b      	str	r3, [r7, #0]
 80084c4:	4613      	mov	r3, r2
 80084c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c8:	e049      	b.n	800855e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d045      	beq.n	800855e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084d2:	f7fb f945 	bl	8003760 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d302      	bcc.n	80084e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e048      	b.n	800857e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d031      	beq.n	800855e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	2b08      	cmp	r3, #8
 8008506:	d110      	bne.n	800852a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2208      	movs	r2, #8
 800850e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f8ff 	bl	8008714 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2208      	movs	r2, #8
 800851a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e029      	b.n	800857e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008538:	d111      	bne.n	800855e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008542:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 f8e5 	bl	8008714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2220      	movs	r2, #32
 800854e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e00f      	b.n	800857e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69da      	ldr	r2, [r3, #28]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4013      	ands	r3, r2
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	bf0c      	ite	eq
 800856e:	2301      	moveq	r3, #1
 8008570:	2300      	movne	r3, #0
 8008572:	b2db      	uxtb	r3, r3
 8008574:	461a      	mov	r2, r3
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	429a      	cmp	r2, r3
 800857a:	d0a6      	beq.n	80084ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
	...

08008588 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008588:	b480      	push	{r7}
 800858a:	b097      	sub	sp, #92	; 0x5c
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	88fa      	ldrh	r2, [r7, #6]
 80085a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ba:	d10e      	bne.n	80085da <UART_Start_Receive_IT+0x52>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d105      	bne.n	80085d0 <UART_Start_Receive_IT+0x48>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085ce:	e02d      	b.n	800862c <UART_Start_Receive_IT+0xa4>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	22ff      	movs	r2, #255	; 0xff
 80085d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085d8:	e028      	b.n	800862c <UART_Start_Receive_IT+0xa4>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10d      	bne.n	80085fe <UART_Start_Receive_IT+0x76>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d104      	bne.n	80085f4 <UART_Start_Receive_IT+0x6c>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	22ff      	movs	r2, #255	; 0xff
 80085ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085f2:	e01b      	b.n	800862c <UART_Start_Receive_IT+0xa4>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	227f      	movs	r2, #127	; 0x7f
 80085f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085fc:	e016      	b.n	800862c <UART_Start_Receive_IT+0xa4>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008606:	d10d      	bne.n	8008624 <UART_Start_Receive_IT+0x9c>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <UART_Start_Receive_IT+0x92>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	227f      	movs	r2, #127	; 0x7f
 8008614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008618:	e008      	b.n	800862c <UART_Start_Receive_IT+0xa4>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	223f      	movs	r2, #63	; 0x3f
 800861e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008622:	e003      	b.n	800862c <UART_Start_Receive_IT+0xa4>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2222      	movs	r2, #34	; 0x22
 8008638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	f043 0301 	orr.w	r3, r3, #1
 8008652:	657b      	str	r3, [r7, #84]	; 0x54
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3308      	adds	r3, #8
 800865a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800865c:	64ba      	str	r2, [r7, #72]	; 0x48
 800865e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800866a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008678:	d107      	bne.n	800868a <UART_Start_Receive_IT+0x102>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d103      	bne.n	800868a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4a21      	ldr	r2, [pc, #132]	; (800870c <UART_Start_Receive_IT+0x184>)
 8008686:	669a      	str	r2, [r3, #104]	; 0x68
 8008688:	e002      	b.n	8008690 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4a20      	ldr	r2, [pc, #128]	; (8008710 <UART_Start_Receive_IT+0x188>)
 800868e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d019      	beq.n	80086cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80086ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b6:	637b      	str	r3, [r7, #52]	; 0x34
 80086b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e6      	bne.n	8008698 <UART_Start_Receive_IT+0x110>
 80086ca:	e018      	b.n	80086fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	613b      	str	r3, [r7, #16]
   return(result);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f043 0320 	orr.w	r3, r3, #32
 80086e0:	653b      	str	r3, [r7, #80]	; 0x50
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ea:	623b      	str	r3, [r7, #32]
 80086ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	69f9      	ldr	r1, [r7, #28]
 80086f0:	6a3a      	ldr	r2, [r7, #32]
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e6      	bne.n	80086cc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	375c      	adds	r7, #92	; 0x5c
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	08008a05 	.word	0x08008a05
 8008710:	0800885d 	.word	0x0800885d

08008714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b095      	sub	sp, #84	; 0x54
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873a:	643b      	str	r3, [r7, #64]	; 0x40
 800873c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e6      	bne.n	800871c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	e853 3f00 	ldrex	r3, [r3]
 800875c:	61fb      	str	r3, [r7, #28]
   return(result);
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f023 0301 	bic.w	r3, r3, #1
 8008764:	64bb      	str	r3, [r7, #72]	; 0x48
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800876e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e5      	bne.n	800874e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008786:	2b01      	cmp	r3, #1
 8008788:	d118      	bne.n	80087bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	60bb      	str	r3, [r7, #8]
   return(result);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f023 0310 	bic.w	r3, r3, #16
 800879e:	647b      	str	r3, [r7, #68]	; 0x44
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	6979      	ldr	r1, [r7, #20]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	613b      	str	r3, [r7, #16]
   return(result);
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80087d0:	bf00      	nop
 80087d2:	3754      	adds	r7, #84	; 0x54
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff fb28 	bl	8007e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	60bb      	str	r3, [r7, #8]
   return(result);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6979      	ldr	r1, [r7, #20]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	613b      	str	r3, [r7, #16]
   return(result);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e6      	bne.n	8008810 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff faf4 	bl	8007e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008854:	bf00      	nop
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b09c      	sub	sp, #112	; 0x70
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800886a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008874:	2b22      	cmp	r3, #34	; 0x22
 8008876:	f040 80b9 	bne.w	80089ec <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008880:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008884:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008888:	b2d9      	uxtb	r1, r3
 800888a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800888e:	b2da      	uxtb	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008894:	400a      	ands	r2, r1
 8008896:	b2d2      	uxtb	r2, r2
 8008898:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 809c 	bne.w	80089fc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80088e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	f023 0301 	bic.w	r3, r3, #1
 800890c:	667b      	str	r3, [r7, #100]	; 0x64
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008916:	647a      	str	r2, [r7, #68]	; 0x44
 8008918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800891c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e5      	bne.n	80088f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d018      	beq.n	800897e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	623b      	str	r3, [r7, #32]
   return(result);
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008960:	663b      	str	r3, [r7, #96]	; 0x60
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800896a:	633b      	str	r3, [r7, #48]	; 0x30
 800896c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e6      	bne.n	800894c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008982:	2b01      	cmp	r3, #1
 8008984:	d12e      	bne.n	80089e4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	60fb      	str	r3, [r7, #12]
   return(result);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f023 0310 	bic.w	r3, r3, #16
 80089a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089aa:	61fb      	str	r3, [r7, #28]
 80089ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	69b9      	ldr	r1, [r7, #24]
 80089b0:	69fa      	ldr	r2, [r7, #28]
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	617b      	str	r3, [r7, #20]
   return(result);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e6      	bne.n	800898c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b10      	cmp	r3, #16
 80089ca:	d103      	bne.n	80089d4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2210      	movs	r2, #16
 80089d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fa41 	bl	8007e64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089e2:	e00b      	b.n	80089fc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fa f9dd 	bl	8002da4 <HAL_UART_RxCpltCallback>
}
 80089ea:	e007      	b.n	80089fc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0208 	orr.w	r2, r2, #8
 80089fa:	619a      	str	r2, [r3, #24]
}
 80089fc:	bf00      	nop
 80089fe:	3770      	adds	r7, #112	; 0x70
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b09c      	sub	sp, #112	; 0x70
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a12:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a1c:	2b22      	cmp	r3, #34	; 0x22
 8008a1e:	f040 80b9 	bne.w	8008b94 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a30:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008a36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a46:	1c9a      	adds	r2, r3, #2
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f040 809c 	bne.w	8008ba4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a80:	667b      	str	r3, [r7, #100]	; 0x64
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a8c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	f023 0301 	bic.w	r3, r3, #1
 8008ab4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008abe:	643a      	str	r2, [r7, #64]	; 0x40
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e5      	bne.n	8008a9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d018      	beq.n	8008b26 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e6      	bne.n	8008af4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d12e      	bne.n	8008b8c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f023 0310 	bic.w	r3, r3, #16
 8008b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b52:	61bb      	str	r3, [r7, #24]
 8008b54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6979      	ldr	r1, [r7, #20]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e6      	bne.n	8008b34 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b10      	cmp	r3, #16
 8008b72:	d103      	bne.n	8008b7c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2210      	movs	r2, #16
 8008b7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7ff f96d 	bl	8007e64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b8a:	e00b      	b.n	8008ba4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7fa f909 	bl	8002da4 <HAL_UART_RxCpltCallback>
}
 8008b92:	e007      	b.n	8008ba4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699a      	ldr	r2, [r3, #24]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0208 	orr.w	r2, r2, #8
 8008ba2:	619a      	str	r2, [r3, #24]
}
 8008ba4:	bf00      	nop
 8008ba6:	3770      	adds	r7, #112	; 0x70
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc6:	f3ef 8305 	mrs	r3, IPSR
 8008bca:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10f      	bne.n	8008bf2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd6:	607b      	str	r3, [r7, #4]
  return(result);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <osKernelInitialize+0x32>
 8008bde:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <osKernelInitialize+0x64>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d109      	bne.n	8008bfa <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008be6:	f3ef 8311 	mrs	r3, BASEPRI
 8008bea:	603b      	str	r3, [r7, #0]
  return(result);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008bf2:	f06f 0305 	mvn.w	r3, #5
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e00c      	b.n	8008c14 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <osKernelInitialize+0x64>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d105      	bne.n	8008c0e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <osKernelInitialize+0x64>)
 8008c04:	2201      	movs	r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e002      	b.n	8008c14 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008c14:	68fb      	ldr	r3, [r7, #12]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	200006e0 	.word	0x200006e0

08008c28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c2e:	f3ef 8305 	mrs	r3, IPSR
 8008c32:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10f      	bne.n	8008c5a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3e:	607b      	str	r3, [r7, #4]
  return(result);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <osKernelStart+0x32>
 8008c46:	4b11      	ldr	r3, [pc, #68]	; (8008c8c <osKernelStart+0x64>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d109      	bne.n	8008c62 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c52:	603b      	str	r3, [r7, #0]
  return(result);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008c5a:	f06f 0305 	mvn.w	r3, #5
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	e00e      	b.n	8008c80 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <osKernelStart+0x64>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d107      	bne.n	8008c7a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008c6a:	4b08      	ldr	r3, [pc, #32]	; (8008c8c <osKernelStart+0x64>)
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008c70:	f001 fdfa 	bl	800a868 <vTaskStartScheduler>
      stat = osOK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	e002      	b.n	8008c80 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008c80:	68fb      	ldr	r3, [r7, #12]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200006e0 	.word	0x200006e0

08008c90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b092      	sub	sp, #72	; 0x48
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca0:	f3ef 8305 	mrs	r3, IPSR
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f040 8094 	bne.w	8008dd6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cae:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb2:	623b      	str	r3, [r7, #32]
  return(result);
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f040 808d 	bne.w	8008dd6 <osThreadNew+0x146>
 8008cbc:	4b48      	ldr	r3, [pc, #288]	; (8008de0 <osThreadNew+0x150>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d106      	bne.n	8008cd2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8008cc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f040 8082 	bne.w	8008dd6 <osThreadNew+0x146>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d07e      	beq.n	8008dd6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008cd8:	2380      	movs	r3, #128	; 0x80
 8008cda:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008cdc:	2318      	movs	r3, #24
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008ce4:	f107 031b 	add.w	r3, r7, #27
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008cea:	f04f 33ff 	mov.w	r3, #4294967295
 8008cee:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d045      	beq.n	8008d82 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <osThreadNew+0x74>
        name = attr->name;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d008      	beq.n	8008d2a <osThreadNew+0x9a>
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	2b38      	cmp	r3, #56	; 0x38
 8008d1c:	d805      	bhi.n	8008d2a <osThreadNew+0x9a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <osThreadNew+0x9e>
        return (NULL);
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e054      	b.n	8008dd8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	089b      	lsrs	r3, r3, #2
 8008d3c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00e      	beq.n	8008d64 <osThreadNew+0xd4>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	2bab      	cmp	r3, #171	; 0xab
 8008d4c:	d90a      	bls.n	8008d64 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d006      	beq.n	8008d64 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <osThreadNew+0xd4>
        mem = 1;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d62:	e010      	b.n	8008d86 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10c      	bne.n	8008d86 <osThreadNew+0xf6>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d108      	bne.n	8008d86 <osThreadNew+0xf6>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d104      	bne.n	8008d86 <osThreadNew+0xf6>
          mem = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d80:	e001      	b.n	8008d86 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d110      	bne.n	8008dae <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d94:	9202      	str	r2, [sp, #8]
 8008d96:	9301      	str	r3, [sp, #4]
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008da0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f001 fa6c 	bl	800a280 <xTaskCreateStatic>
 8008da8:	4603      	mov	r3, r0
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	e013      	b.n	8008dd6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d110      	bne.n	8008dd6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	f107 0314 	add.w	r3, r7, #20
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f001 fab6 	bl	800a338 <xTaskCreate>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d001      	beq.n	8008dd6 <osThreadNew+0x146>
          hTask = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008dd6:	697b      	ldr	r3, [r7, #20]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3738      	adds	r7, #56	; 0x38
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	200006e0 	.word	0x200006e0

08008de4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dea:	f3ef 8305 	mrs	r3, IPSR
 8008dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8008df0:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10f      	bne.n	8008e16 <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008df6:	f3ef 8310 	mrs	r3, PRIMASK
 8008dfa:	607b      	str	r3, [r7, #4]
  return(result);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <osThreadGetId+0x32>
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <osThreadGetId+0x48>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d108      	bne.n	8008e1c <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <osThreadGetId+0x38>
    id = NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	e002      	b.n	8008e22 <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8008e1c:	f002 f9ec 	bl	800b1f8 <xTaskGetCurrentTaskHandle>
 8008e20:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 8008e22:	68fb      	ldr	r3, [r7, #12]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	200006e0 	.word	0x200006e0

08008e30 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e3c:	f3ef 8305 	mrs	r3, IPSR
 8008e40:	617b      	str	r3, [r7, #20]
  return(result);
 8008e42:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10f      	bne.n	8008e68 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e48:	f3ef 8310 	mrs	r3, PRIMASK
 8008e4c:	613b      	str	r3, [r7, #16]
  return(result);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d109      	bne.n	8008e68 <osThreadSuspend+0x38>
 8008e54:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <osThreadSuspend+0x64>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d109      	bne.n	8008e70 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8008e60:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8008e68:	f06f 0305 	mvn.w	r3, #5
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	e00b      	b.n	8008e88 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d103      	bne.n	8008e7e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8008e76:	f06f 0303 	mvn.w	r3, #3
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e004      	b.n	8008e88 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8008e82:	69b8      	ldr	r0, [r7, #24]
 8008e84:	f001 fbe0 	bl	800a648 <vTaskSuspend>
  }

  return (stat);
 8008e88:	69fb      	ldr	r3, [r7, #28]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3720      	adds	r7, #32
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	200006e0 	.word	0x200006e0

08008e98 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ea4:	f3ef 8305 	mrs	r3, IPSR
 8008ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8008eaa:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10f      	bne.n	8008ed0 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb4:	613b      	str	r3, [r7, #16]
  return(result);
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d109      	bne.n	8008ed0 <osThreadResume+0x38>
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <osThreadResume+0x64>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d109      	bne.n	8008ed8 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8008ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <osThreadResume+0x40>
    stat = osErrorISR;
 8008ed0:	f06f 0305 	mvn.w	r3, #5
 8008ed4:	61fb      	str	r3, [r7, #28]
 8008ed6:	e00b      	b.n	8008ef0 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d103      	bne.n	8008ee6 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8008ede:	f06f 0303 	mvn.w	r3, #3
 8008ee2:	61fb      	str	r3, [r7, #28]
 8008ee4:	e004      	b.n	8008ef0 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8008eea:	69b8      	ldr	r0, [r7, #24]
 8008eec:	f001 fc5e 	bl	800a7ac <vTaskResume>
  }

  return (stat);
 8008ef0:	69fb      	ldr	r3, [r7, #28]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3720      	adds	r7, #32
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	200006e0 	.word	0x200006e0

08008f00 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f08:	f3ef 8305 	mrs	r3, IPSR
 8008f0c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f0e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10f      	bne.n	8008f34 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f14:	f3ef 8310 	mrs	r3, PRIMASK
 8008f18:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <osDelay+0x34>
 8008f20:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <osDelay+0x58>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d109      	bne.n	8008f3c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f28:	f3ef 8311 	mrs	r3, BASEPRI
 8008f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <osDelay+0x3c>
    stat = osErrorISR;
 8008f34:	f06f 0305 	mvn.w	r3, #5
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	e007      	b.n	8008f4c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 fb4a 	bl	800a5e0 <vTaskDelay>
    }
  }

  return (stat);
 8008f4c:	697b      	ldr	r3, [r7, #20]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	200006e0 	.word	0x200006e0

08008f5c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f68:	f3ef 8305 	mrs	r3, IPSR
 8008f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d13d      	bne.n	8008ff0 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f74:	f3ef 8310 	mrs	r3, PRIMASK
 8008f78:	613b      	str	r3, [r7, #16]
  return(result);
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d137      	bne.n	8008ff0 <osEventFlagsNew+0x94>
 8008f80:	4b1e      	ldr	r3, [pc, #120]	; (8008ffc <osEventFlagsNew+0xa0>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d105      	bne.n	8008f94 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f88:	f3ef 8311 	mrs	r3, BASEPRI
 8008f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d12d      	bne.n	8008ff0 <osEventFlagsNew+0x94>
    mem = -1;
 8008f94:	f04f 33ff 	mov.w	r3, #4294967295
 8008f98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d015      	beq.n	8008fcc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d006      	beq.n	8008fb6 <osEventFlagsNew+0x5a>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	2b1f      	cmp	r3, #31
 8008fae:	d902      	bls.n	8008fb6 <osEventFlagsNew+0x5a>
        mem = 1;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	61bb      	str	r3, [r7, #24]
 8008fb4:	e00c      	b.n	8008fd0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d108      	bne.n	8008fd0 <osEventFlagsNew+0x74>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <osEventFlagsNew+0x74>
          mem = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	e001      	b.n	8008fd0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d106      	bne.n	8008fe4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f9ae 	bl	800933c <xEventGroupCreateStatic>
 8008fe0:	61f8      	str	r0, [r7, #28]
 8008fe2:	e005      	b.n	8008ff0 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8008fea:	f000 f9de 	bl	80093aa <xEventGroupCreate>
 8008fee:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008ff0:	69fb      	ldr	r3, [r7, #28]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	200006e0 	.word	0x200006e0

08009000 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <osEventFlagsSet+0x1e>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800901e:	f06f 0303 	mvn.w	r3, #3
 8009022:	61fb      	str	r3, [r7, #28]
 8009024:	e03a      	b.n	800909c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009026:	f3ef 8305 	mrs	r3, IPSR
 800902a:	617b      	str	r3, [r7, #20]
  return(result);
 800902c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10f      	bne.n	8009052 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009032:	f3ef 8310 	mrs	r3, PRIMASK
 8009036:	613b      	str	r3, [r7, #16]
  return(result);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d109      	bne.n	8009052 <osEventFlagsSet+0x52>
 800903e:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <osEventFlagsSet+0xa8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b02      	cmp	r3, #2
 8009044:	d123      	bne.n	800908e <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009046:	f3ef 8311 	mrs	r3, BASEPRI
 800904a:	60fb      	str	r3, [r7, #12]
  return(result);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01d      	beq.n	800908e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8009052:	2300      	movs	r3, #0
 8009054:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	461a      	mov	r2, r3
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	69b8      	ldr	r0, [r7, #24]
 8009060:	f000 fad4 	bl	800960c <xEventGroupSetBitsFromISR>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800906a:	f06f 0302 	mvn.w	r3, #2
 800906e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009070:	e013      	b.n	800909a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00e      	beq.n	800909a <osEventFlagsSet+0x9a>
 800907c:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <osEventFlagsSet+0xac>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800908c:	e005      	b.n	800909a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	69b8      	ldr	r0, [r7, #24]
 8009092:	f000 fa15 	bl	80094c0 <xEventGroupSetBits>
 8009096:	61f8      	str	r0, [r7, #28]
 8009098:	e000      	b.n	800909c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800909a:	bf00      	nop
  }

  return (rflags);
 800909c:	69fb      	ldr	r3, [r7, #28]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	200006e0 	.word	0x200006e0
 80090ac:	e000ed04 	.word	0xe000ed04

080090b0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <osEventFlagsClear+0x1e>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80090ce:	f06f 0303 	mvn.w	r3, #3
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	e029      	b.n	800912a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090d6:	f3ef 8305 	mrs	r3, IPSR
 80090da:	617b      	str	r3, [r7, #20]
  return(result);
 80090dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10f      	bne.n	8009102 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090e2:	f3ef 8310 	mrs	r3, PRIMASK
 80090e6:	613b      	str	r3, [r7, #16]
  return(result);
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <osEventFlagsClear+0x52>
 80090ee:	4b11      	ldr	r3, [pc, #68]	; (8009134 <osEventFlagsClear+0x84>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d114      	bne.n	8009120 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090f6:	f3ef 8311 	mrs	r3, BASEPRI
 80090fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00e      	beq.n	8009120 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8009102:	69b8      	ldr	r0, [r7, #24]
 8009104:	f000 f9b8 	bl	8009478 <xEventGroupGetBitsFromISR>
 8009108:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	69b8      	ldr	r0, [r7, #24]
 800910e:	f000 f99f 	bl	8009450 <xEventGroupClearBitsFromISR>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d108      	bne.n	800912a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8009118:	f06f 0302 	mvn.w	r3, #2
 800911c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800911e:	e004      	b.n	800912a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	69b8      	ldr	r0, [r7, #24]
 8009124:	f000 f95b 	bl	80093de <xEventGroupClearBits>
 8009128:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800912a:	69fb      	ldr	r3, [r7, #28]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3720      	adds	r7, #32
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	200006e0 	.word	0x200006e0

08009138 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <osEventFlagsGet+0x18>
    rflags = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]
 800914e:	e01f      	b.n	8009190 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009150:	f3ef 8305 	mrs	r3, IPSR
 8009154:	617b      	str	r3, [r7, #20]
  return(result);
 8009156:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10f      	bne.n	800917c <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800915c:	f3ef 8310 	mrs	r3, PRIMASK
 8009160:	613b      	str	r3, [r7, #16]
  return(result);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <osEventFlagsGet+0x44>
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <osEventFlagsGet+0x64>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d10a      	bne.n	8009186 <osEventFlagsGet+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009170:	f3ef 8311 	mrs	r3, BASEPRI
 8009174:	60fb      	str	r3, [r7, #12]
  return(result);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d004      	beq.n	8009186 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800917c:	69b8      	ldr	r0, [r7, #24]
 800917e:	f000 f97b 	bl	8009478 <xEventGroupGetBitsFromISR>
 8009182:	61f8      	str	r0, [r7, #28]
 8009184:	e004      	b.n	8009190 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8009186:	2100      	movs	r1, #0
 8009188:	69b8      	ldr	r0, [r7, #24]
 800918a:	f000 f928 	bl	80093de <xEventGroupClearBits>
 800918e:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8009190:	69fb      	ldr	r3, [r7, #28]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3720      	adds	r7, #32
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	200006e0 	.word	0x200006e0

080091a0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ac:	f3ef 8305 	mrs	r3, IPSR
 80091b0:	613b      	str	r3, [r7, #16]
  return(result);
 80091b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f040 8085 	bne.w	80092c4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ba:	f3ef 8310 	mrs	r3, PRIMASK
 80091be:	60fb      	str	r3, [r7, #12]
  return(result);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d17e      	bne.n	80092c4 <osMutexNew+0x124>
 80091c6:	4b42      	ldr	r3, [pc, #264]	; (80092d0 <osMutexNew+0x130>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d105      	bne.n	80091da <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091ce:	f3ef 8311 	mrs	r3, BASEPRI
 80091d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d174      	bne.n	80092c4 <osMutexNew+0x124>
    if (attr != NULL) {
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <osMutexNew+0x48>
      type = attr->attr_bits;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	623b      	str	r3, [r7, #32]
 80091e6:	e001      	b.n	80091ec <osMutexNew+0x4c>
    } else {
      type = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <osMutexNew+0x5c>
      rmtx = 1U;
 80091f6:	2301      	movs	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	e001      	b.n	8009200 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	f003 0308 	and.w	r3, r3, #8
 8009206:	2b00      	cmp	r3, #0
 8009208:	d15c      	bne.n	80092c4 <osMutexNew+0x124>
      mem = -1;
 800920a:	f04f 33ff 	mov.w	r3, #4294967295
 800920e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d015      	beq.n	8009242 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d006      	beq.n	800922c <osMutexNew+0x8c>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2b4f      	cmp	r3, #79	; 0x4f
 8009224:	d902      	bls.n	800922c <osMutexNew+0x8c>
          mem = 1;
 8009226:	2301      	movs	r3, #1
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	e00c      	b.n	8009246 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d108      	bne.n	8009246 <osMutexNew+0xa6>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <osMutexNew+0xa6>
            mem = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	61bb      	str	r3, [r7, #24]
 8009240:	e001      	b.n	8009246 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d112      	bne.n	8009272 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d007      	beq.n	8009262 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	4619      	mov	r1, r3
 8009258:	2004      	movs	r0, #4
 800925a:	f000 fc11 	bl	8009a80 <xQueueCreateMutexStatic>
 800925e:	6278      	str	r0, [r7, #36]	; 0x24
 8009260:	e016      	b.n	8009290 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	4619      	mov	r1, r3
 8009268:	2001      	movs	r0, #1
 800926a:	f000 fc09 	bl	8009a80 <xQueueCreateMutexStatic>
 800926e:	6278      	str	r0, [r7, #36]	; 0x24
 8009270:	e00e      	b.n	8009290 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10b      	bne.n	8009290 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d004      	beq.n	8009288 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800927e:	2004      	movs	r0, #4
 8009280:	f000 fbe6 	bl	8009a50 <xQueueCreateMutex>
 8009284:	6278      	str	r0, [r7, #36]	; 0x24
 8009286:	e003      	b.n	8009290 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009288:	2001      	movs	r0, #1
 800928a:	f000 fbe1 	bl	8009a50 <xQueueCreateMutex>
 800928e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00c      	beq.n	80092b0 <osMutexNew+0x110>
        if (attr != NULL) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <osMutexNew+0x104>
          name = attr->name;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e001      	b.n	80092a8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80092a8:	6979      	ldr	r1, [r7, #20]
 80092aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092ac:	f000 ff8a 	bl	800a1c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d006      	beq.n	80092c4 <osMutexNew+0x124>
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3728      	adds	r7, #40	; 0x28
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	200006e0 	.word	0x200006e0

080092d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a07      	ldr	r2, [pc, #28]	; (8009300 <vApplicationGetIdleTaskMemory+0x2c>)
 80092e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	4a06      	ldr	r2, [pc, #24]	; (8009304 <vApplicationGetIdleTaskMemory+0x30>)
 80092ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2280      	movs	r2, #128	; 0x80
 80092f0:	601a      	str	r2, [r3, #0]
}
 80092f2:	bf00      	nop
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	200006e4 	.word	0x200006e4
 8009304:	20000790 	.word	0x20000790

08009308 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a07      	ldr	r2, [pc, #28]	; (8009334 <vApplicationGetTimerTaskMemory+0x2c>)
 8009318:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	4a06      	ldr	r2, [pc, #24]	; (8009338 <vApplicationGetTimerTaskMemory+0x30>)
 800931e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009326:	601a      	str	r2, [r3, #0]
}
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	20000990 	.word	0x20000990
 8009338:	20000a3c 	.word	0x20000a3c

0800933c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800935c:	bf00      	nop
 800935e:	e7fe      	b.n	800935e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009360:	2320      	movs	r3, #32
 8009362:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b20      	cmp	r3, #32
 8009368:	d00a      	beq.n	8009380 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	60fb      	str	r3, [r7, #12]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	3304      	adds	r3, #4
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f94d 	bl	8009634 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2201      	movs	r2, #1
 800939e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80093a0:	697b      	ldr	r3, [r7, #20]
	}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80093b0:	2020      	movs	r0, #32
 80093b2:	f002 fd91 	bl	800bed8 <pvPortMalloc>
 80093b6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f933 	bl	8009634 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80093d4:	687b      	ldr	r3, [r7, #4]
	}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b086      	sub	sp, #24
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <xEventGroupClearBits+0x2a>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	60fb      	str	r3, [r7, #12]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00a      	beq.n	8009428 <xEventGroupClearBits+0x4a>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	60bb      	str	r3, [r7, #8]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8009428:	f002 fc34 	bl	800bc94 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	43db      	mvns	r3, r3
 800943a:	401a      	ands	r2, r3
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8009440:	f002 fc58 	bl	800bcf4 <vPortExitCritical>

	return uxReturn;
 8009444:	693b      	ldr	r3, [r7, #16]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 800945a:	2300      	movs	r3, #0
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4804      	ldr	r0, [pc, #16]	; (8009474 <xEventGroupClearBitsFromISR+0x24>)
 8009462:	f002 facb 	bl	800b9fc <xTimerPendFunctionCallFromISR>
 8009466:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8009468:	68fb      	ldr	r3, [r7, #12]
	}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	080095f1 	.word	0x080095f1

08009478 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8009478:	b480      	push	{r7}
 800947a:	b089      	sub	sp, #36	; 0x24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009484:	f3ef 8211 	mrs	r2, BASEPRI
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	60fa      	str	r2, [r7, #12]
 800949a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800949c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800949e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80094b0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80094b2:	697b      	ldr	r3, [r7, #20]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3724      	adds	r7, #36	; 0x24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08e      	sub	sp, #56	; 0x38
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80094ca:	2300      	movs	r3, #0
 80094cc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10a      	bne.n	80094f2 <xEventGroupSetBits+0x32>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	613b      	str	r3, [r7, #16]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <xEventGroupSetBits+0x52>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	60fb      	str	r3, [r7, #12]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	3304      	adds	r3, #4
 8009516:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	3308      	adds	r3, #8
 800951c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800951e:	f001 fa13 	bl	800a948 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	431a      	orrs	r2, r3
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8009534:	e03c      	b.n	80095b0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8009536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800954c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009554:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d108      	bne.n	8009572 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	4013      	ands	r3, r2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00b      	beq.n	8009584 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800956c:	2301      	movs	r3, #1
 800956e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009570:	e008      	b.n	8009584 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	4013      	ands	r3, r2
 800957a:	69ba      	ldr	r2, [r7, #24]
 800957c:	429a      	cmp	r2, r3
 800957e:	d101      	bne.n	8009584 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009580:	2301      	movs	r3, #1
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	2b00      	cmp	r3, #0
 8009588:	d010      	beq.n	80095ac <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	4313      	orrs	r3, r2
 800959a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80095a4:	4619      	mov	r1, r3
 80095a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80095a8:	f001 fc60 	bl	800ae6c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80095b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d1be      	bne.n	8009536 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	43db      	mvns	r3, r3
 80095c0:	401a      	ands	r2, r3
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80095c6:	f001 f9cd 	bl	800a964 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	681b      	ldr	r3, [r3, #0]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3738      	adds	r7, #56	; 0x38
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff ff6c 	bl	80094c0 <xEventGroupSetBits>
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff feee 	bl	80093de <xEventGroupClearBits>
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	68f9      	ldr	r1, [r7, #12]
 800961e:	4804      	ldr	r0, [pc, #16]	; (8009630 <xEventGroupSetBitsFromISR+0x24>)
 8009620:	f002 f9ec 	bl	800b9fc <xTimerPendFunctionCallFromISR>
 8009624:	6178      	str	r0, [r7, #20]

		return xReturn;
 8009626:	697b      	ldr	r3, [r7, #20]
	}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	080095d7 	.word	0x080095d7

08009634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f103 0208 	add.w	r2, r3, #8
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f103 0208 	add.w	r2, r3, #8
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f103 0208 	add.w	r2, r3, #8
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800968e:	b480      	push	{r7}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	1c5a      	adds	r2, r3, #1
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	601a      	str	r2, [r3, #0]
}
 80096ca:	bf00      	nop
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096d6:	b480      	push	{r7}
 80096d8:	b085      	sub	sp, #20
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ec:	d103      	bne.n	80096f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	e00c      	b.n	8009710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	3308      	adds	r3, #8
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	e002      	b.n	8009704 <vListInsert+0x2e>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	429a      	cmp	r2, r3
 800970e:	d2f6      	bcs.n	80096fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	601a      	str	r2, [r3, #0]
}
 800973c:	bf00      	nop
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	6892      	ldr	r2, [r2, #8]
 800975e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6852      	ldr	r2, [r2, #4]
 8009768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d103      	bne.n	800977c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	689a      	ldr	r2, [r3, #8]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	1e5a      	subs	r2, r3, #1
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <xQueueGenericReset+0x2a>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60bb      	str	r3, [r7, #8]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80097c6:	f002 fa65 	bl	800bc94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097d6:	fb01 f303 	mul.w	r3, r1, r3
 80097da:	441a      	add	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f6:	3b01      	subs	r3, #1
 80097f8:	68f9      	ldr	r1, [r7, #12]
 80097fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097fc:	fb01 f303 	mul.w	r3, r1, r3
 8009800:	441a      	add	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	22ff      	movs	r2, #255	; 0xff
 800980a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	22ff      	movs	r2, #255	; 0xff
 8009812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d114      	bne.n	8009846 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01a      	beq.n	800985a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3310      	adds	r3, #16
 8009828:	4618      	mov	r0, r3
 800982a:	f001 fabb 	bl	800ada4 <xTaskRemoveFromEventList>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d012      	beq.n	800985a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <xQueueGenericReset+0xcc>)
 8009836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	e009      	b.n	800985a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3310      	adds	r3, #16
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fef2 	bl	8009634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3324      	adds	r3, #36	; 0x24
 8009854:	4618      	mov	r0, r3
 8009856:	f7ff feed 	bl	8009634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800985a:	f002 fa4b 	bl	800bcf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800985e:	2301      	movs	r3, #1
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08e      	sub	sp, #56	; 0x38
 8009870:	af02      	add	r7, sp, #8
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <xQueueGenericCreateStatic+0x52>
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <xQueueGenericCreateStatic+0x56>
 80098be:	2301      	movs	r3, #1
 80098c0:	e000      	b.n	80098c4 <xQueueGenericCreateStatic+0x58>
 80098c2:	2300      	movs	r3, #0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	623b      	str	r3, [r7, #32]
}
 80098da:	bf00      	nop
 80098dc:	e7fe      	b.n	80098dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d102      	bne.n	80098ea <xQueueGenericCreateStatic+0x7e>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <xQueueGenericCreateStatic+0x82>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e000      	b.n	80098f0 <xQueueGenericCreateStatic+0x84>
 80098ee:	2300      	movs	r3, #0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10a      	bne.n	800990a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	61fb      	str	r3, [r7, #28]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800990a:	2350      	movs	r3, #80	; 0x50
 800990c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b50      	cmp	r3, #80	; 0x50
 8009912:	d00a      	beq.n	800992a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	61bb      	str	r3, [r7, #24]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00d      	beq.n	8009950 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800993c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	4613      	mov	r3, r2
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	68b9      	ldr	r1, [r7, #8]
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f843 	bl	80099d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009952:	4618      	mov	r0, r3
 8009954:	3730      	adds	r7, #48	; 0x30
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800995a:	b580      	push	{r7, lr}
 800995c:	b08a      	sub	sp, #40	; 0x28
 800995e:	af02      	add	r7, sp, #8
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	4613      	mov	r3, r2
 8009966:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <xQueueGenericCreate+0x2a>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	613b      	str	r3, [r7, #16]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d102      	bne.n	8009990 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800998a:	2300      	movs	r3, #0
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	e004      	b.n	800999a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	fb02 f303 	mul.w	r3, r2, r3
 8009998:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	3350      	adds	r3, #80	; 0x50
 800999e:	4618      	mov	r0, r3
 80099a0:	f002 fa9a 	bl	800bed8 <pvPortMalloc>
 80099a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00f      	beq.n	80099cc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	3350      	adds	r3, #80	; 0x50
 80099b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099ba:	79fa      	ldrb	r2, [r7, #7]
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4613      	mov	r3, r2
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	68b9      	ldr	r1, [r7, #8]
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 f805 	bl	80099d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80099cc:	69bb      	ldr	r3, [r7, #24]
	}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3720      	adds	r7, #32
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	607a      	str	r2, [r7, #4]
 80099e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d103      	bne.n	80099f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	e002      	b.n	80099f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a04:	2101      	movs	r1, #1
 8009a06:	69b8      	ldr	r0, [r7, #24]
 8009a08:	f7ff fec8 	bl	800979c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a14:	bf00      	nop
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00e      	beq.n	8009a48 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2100      	movs	r1, #0
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f838 	bl	8009ab8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	461a      	mov	r2, r3
 8009a66:	6939      	ldr	r1, [r7, #16]
 8009a68:	6978      	ldr	r0, [r7, #20]
 8009a6a:	f7ff ff76 	bl	800995a <xQueueGenericCreate>
 8009a6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff ffd3 	bl	8009a1c <prvInitialiseMutex>

		return pxNewQueue;
 8009a76:	68fb      	ldr	r3, [r7, #12]
	}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	4603      	mov	r3, r0
 8009a88:	6039      	str	r1, [r7, #0]
 8009a8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	2300      	movs	r3, #0
 8009a92:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	6939      	ldr	r1, [r7, #16]
 8009a9e:	6978      	ldr	r0, [r7, #20]
 8009aa0:	f7ff fee4 	bl	800986c <xQueueGenericCreateStatic>
 8009aa4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7ff ffb8 	bl	8009a1c <prvInitialiseMutex>

		return pxNewQueue;
 8009aac:	68fb      	ldr	r3, [r7, #12]
	}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
	...

08009ab8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08e      	sub	sp, #56	; 0x38
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <xQueueGenericSend+0x32>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d103      	bne.n	8009af8 <xQueueGenericSend+0x40>
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <xQueueGenericSend+0x44>
 8009af8:	2301      	movs	r3, #1
 8009afa:	e000      	b.n	8009afe <xQueueGenericSend+0x46>
 8009afc:	2300      	movs	r3, #0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <xQueueGenericSend+0x60>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b14:	bf00      	nop
 8009b16:	e7fe      	b.n	8009b16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d103      	bne.n	8009b26 <xQueueGenericSend+0x6e>
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d101      	bne.n	8009b2a <xQueueGenericSend+0x72>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e000      	b.n	8009b2c <xQueueGenericSend+0x74>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <xQueueGenericSend+0x8e>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	623b      	str	r3, [r7, #32]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b46:	f001 fb67 	bl	800b218 <xTaskGetSchedulerState>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <xQueueGenericSend+0x9e>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <xQueueGenericSend+0xa2>
 8009b56:	2301      	movs	r3, #1
 8009b58:	e000      	b.n	8009b5c <xQueueGenericSend+0xa4>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10a      	bne.n	8009b76 <xQueueGenericSend+0xbe>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	61fb      	str	r3, [r7, #28]
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b76:	f002 f88d 	bl	800bc94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d302      	bcc.n	8009b8c <xQueueGenericSend+0xd4>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d129      	bne.n	8009be0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	68b9      	ldr	r1, [r7, #8]
 8009b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b92:	f000 fa07 	bl	8009fa4 <prvCopyDataToQueue>
 8009b96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d010      	beq.n	8009bc2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	3324      	adds	r3, #36	; 0x24
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f001 f8fd 	bl	800ada4 <xTaskRemoveFromEventList>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d013      	beq.n	8009bd8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009bb0:	4b3f      	ldr	r3, [pc, #252]	; (8009cb0 <xQueueGenericSend+0x1f8>)
 8009bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	e00a      	b.n	8009bd8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d007      	beq.n	8009bd8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009bc8:	4b39      	ldr	r3, [pc, #228]	; (8009cb0 <xQueueGenericSend+0x1f8>)
 8009bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009bd8:	f002 f88c 	bl	800bcf4 <vPortExitCritical>
				return pdPASS;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e063      	b.n	8009ca8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d103      	bne.n	8009bee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009be6:	f002 f885 	bl	800bcf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	e05c      	b.n	8009ca8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d106      	bne.n	8009c02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bf4:	f107 0314 	add.w	r3, r7, #20
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 f999 	bl	800af30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c02:	f002 f877 	bl	800bcf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c06:	f000 fe9f 	bl	800a948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c0a:	f002 f843 	bl	800bc94 <vPortEnterCritical>
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c14:	b25b      	sxtb	r3, r3
 8009c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1a:	d103      	bne.n	8009c24 <xQueueGenericSend+0x16c>
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c2a:	b25b      	sxtb	r3, r3
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d103      	bne.n	8009c3a <xQueueGenericSend+0x182>
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c3a:	f002 f85b 	bl	800bcf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c3e:	1d3a      	adds	r2, r7, #4
 8009c40:	f107 0314 	add.w	r3, r7, #20
 8009c44:	4611      	mov	r1, r2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 f988 	bl	800af5c <xTaskCheckForTimeOut>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d124      	bne.n	8009c9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c54:	f000 fa9e 	bl	800a194 <prvIsQueueFull>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d018      	beq.n	8009c90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	3310      	adds	r3, #16
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	4611      	mov	r1, r2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 f84c 	bl	800ad04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c6e:	f000 fa29 	bl	800a0c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c72:	f000 fe77 	bl	800a964 <xTaskResumeAll>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f47f af7c 	bne.w	8009b76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <xQueueGenericSend+0x1f8>)
 8009c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	e772      	b.n	8009b76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c92:	f000 fa17 	bl	800a0c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c96:	f000 fe65 	bl	800a964 <xTaskResumeAll>
 8009c9a:	e76c      	b.n	8009b76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c9e:	f000 fa11 	bl	800a0c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ca2:	f000 fe5f 	bl	800a964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ca6:	2300      	movs	r3, #0
		}
	}
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3738      	adds	r7, #56	; 0x38
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	e000ed04 	.word	0xe000ed04

08009cb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08e      	sub	sp, #56	; 0x38
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <xQueueGenericSendFromISR+0x3c>
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <xQueueGenericSendFromISR+0x40>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <xQueueGenericSendFromISR+0x42>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	623b      	str	r3, [r7, #32]
}
 8009d0c:	bf00      	nop
 8009d0e:	e7fe      	b.n	8009d0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d103      	bne.n	8009d1e <xQueueGenericSendFromISR+0x6a>
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <xQueueGenericSendFromISR+0x6e>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <xQueueGenericSendFromISR+0x70>
 8009d22:	2300      	movs	r3, #0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10a      	bne.n	8009d3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	61fb      	str	r3, [r7, #28]
}
 8009d3a:	bf00      	nop
 8009d3c:	e7fe      	b.n	8009d3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d3e:	f002 f88b 	bl	800be58 <vPortValidateInterruptPriority>
	__asm volatile
 8009d42:	f3ef 8211 	mrs	r2, BASEPRI
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	61ba      	str	r2, [r7, #24]
 8009d58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d302      	bcc.n	8009d70 <xQueueGenericSendFromISR+0xbc>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d12c      	bne.n	8009dca <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	68b9      	ldr	r1, [r7, #8]
 8009d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d80:	f000 f910 	bl	8009fa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8c:	d112      	bne.n	8009db4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d016      	beq.n	8009dc4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	3324      	adds	r3, #36	; 0x24
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f001 f802 	bl	800ada4 <xTaskRemoveFromEventList>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00e      	beq.n	8009dc4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00b      	beq.n	8009dc4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	e007      	b.n	8009dc4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009db4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009db8:	3301      	adds	r3, #1
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	b25a      	sxtb	r2, r3
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009dc8:	e001      	b.n	8009dce <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f383 8811 	msr	BASEPRI, r3
}
 8009dd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3738      	adds	r7, #56	; 0x38
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08c      	sub	sp, #48	; 0x30
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009df0:	2300      	movs	r3, #0
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <xQueueReceive+0x30>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	623b      	str	r3, [r7, #32]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <xQueueReceive+0x3e>
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <xQueueReceive+0x42>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <xQueueReceive+0x44>
 8009e26:	2300      	movs	r3, #0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <xQueueReceive+0x5e>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	61fb      	str	r3, [r7, #28]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e42:	f001 f9e9 	bl	800b218 <xTaskGetSchedulerState>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <xQueueReceive+0x6e>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <xQueueReceive+0x72>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <xQueueReceive+0x74>
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <xQueueReceive+0x8e>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	61bb      	str	r3, [r7, #24]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e72:	f001 ff0f 	bl	800bc94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d01f      	beq.n	8009ec2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e86:	f000 f8f7 	bl	800a078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	1e5a      	subs	r2, r3, #1
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00f      	beq.n	8009eba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	3310      	adds	r3, #16
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 ff80 	bl	800ada4 <xTaskRemoveFromEventList>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d007      	beq.n	8009eba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009eaa:	4b3d      	ldr	r3, [pc, #244]	; (8009fa0 <xQueueReceive+0x1bc>)
 8009eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009eba:	f001 ff1b 	bl	800bcf4 <vPortExitCritical>
				return pdPASS;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e069      	b.n	8009f96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d103      	bne.n	8009ed0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ec8:	f001 ff14 	bl	800bcf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e062      	b.n	8009f96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d106      	bne.n	8009ee4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ed6:	f107 0310 	add.w	r3, r7, #16
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 f828 	bl	800af30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ee4:	f001 ff06 	bl	800bcf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ee8:	f000 fd2e 	bl	800a948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009eec:	f001 fed2 	bl	800bc94 <vPortEnterCritical>
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ef6:	b25b      	sxtb	r3, r3
 8009ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efc:	d103      	bne.n	8009f06 <xQueueReceive+0x122>
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f0c:	b25b      	sxtb	r3, r3
 8009f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f12:	d103      	bne.n	8009f1c <xQueueReceive+0x138>
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f1c:	f001 feea 	bl	800bcf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f20:	1d3a      	adds	r2, r7, #4
 8009f22:	f107 0310 	add.w	r3, r7, #16
 8009f26:	4611      	mov	r1, r2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 f817 	bl	800af5c <xTaskCheckForTimeOut>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d123      	bne.n	8009f7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f36:	f000 f917 	bl	800a168 <prvIsQueueEmpty>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d017      	beq.n	8009f70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	3324      	adds	r3, #36	; 0x24
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fedb 	bl	800ad04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f50:	f000 f8b8 	bl	800a0c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f54:	f000 fd06 	bl	800a964 <xTaskResumeAll>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d189      	bne.n	8009e72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009f5e:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <xQueueReceive+0x1bc>)
 8009f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	e780      	b.n	8009e72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f72:	f000 f8a7 	bl	800a0c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f76:	f000 fcf5 	bl	800a964 <xTaskResumeAll>
 8009f7a:	e77a      	b.n	8009e72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f7e:	f000 f8a1 	bl	800a0c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f82:	f000 fcef 	bl	800a964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f88:	f000 f8ee 	bl	800a168 <prvIsQueueEmpty>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f43f af6f 	beq.w	8009e72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3730      	adds	r7, #48	; 0x30
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	e000ed04 	.word	0xe000ed04

08009fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10d      	bne.n	8009fde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d14d      	bne.n	800a066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 f940 	bl	800b254 <xTaskPriorityDisinherit>
 8009fd4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	605a      	str	r2, [r3, #4]
 8009fdc:	e043      	b.n	800a066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d119      	bne.n	800a018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6898      	ldr	r0, [r3, #8]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	461a      	mov	r2, r3
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	f003 f88f 	bl	800d112 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffc:	441a      	add	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d32b      	bcc.n	800a066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	609a      	str	r2, [r3, #8]
 800a016:	e026      	b.n	800a066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	68d8      	ldr	r0, [r3, #12]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a020:	461a      	mov	r2, r3
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	f003 f875 	bl	800d112 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a030:	425b      	negs	r3, r3
 800a032:	441a      	add	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d207      	bcs.n	800a054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04c:	425b      	negs	r3, r3
 800a04e:	441a      	add	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b02      	cmp	r3, #2
 800a058:	d105      	bne.n	800a066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	3b01      	subs	r3, #1
 800a064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a06e:	697b      	ldr	r3, [r7, #20]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	d018      	beq.n	800a0bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	441a      	add	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d303      	bcc.n	800a0ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68d9      	ldr	r1, [r3, #12]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6838      	ldr	r0, [r7, #0]
 800a0b8:	f003 f82b 	bl	800d112 <memcpy>
	}
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a0cc:	f001 fde2 	bl	800bc94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0d8:	e011      	b.n	800a0fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d012      	beq.n	800a108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3324      	adds	r3, #36	; 0x24
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 fe5c 	bl	800ada4 <xTaskRemoveFromEventList>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0f2:	f000 ff95 	bl	800b020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	dce9      	bgt.n	800a0da <prvUnlockQueue+0x16>
 800a106:	e000      	b.n	800a10a <prvUnlockQueue+0x46>
					break;
 800a108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	22ff      	movs	r2, #255	; 0xff
 800a10e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a112:	f001 fdef 	bl	800bcf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a116:	f001 fdbd 	bl	800bc94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a122:	e011      	b.n	800a148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d012      	beq.n	800a152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3310      	adds	r3, #16
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fe37 	bl	800ada4 <xTaskRemoveFromEventList>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a13c:	f000 ff70 	bl	800b020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a140:	7bbb      	ldrb	r3, [r7, #14]
 800a142:	3b01      	subs	r3, #1
 800a144:	b2db      	uxtb	r3, r3
 800a146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dce9      	bgt.n	800a124 <prvUnlockQueue+0x60>
 800a150:	e000      	b.n	800a154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	22ff      	movs	r2, #255	; 0xff
 800a158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a15c:	f001 fdca 	bl	800bcf4 <vPortExitCritical>
}
 800a160:	bf00      	nop
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a170:	f001 fd90 	bl	800bc94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d102      	bne.n	800a182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a17c:	2301      	movs	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	e001      	b.n	800a186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a182:	2300      	movs	r3, #0
 800a184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a186:	f001 fdb5 	bl	800bcf4 <vPortExitCritical>

	return xReturn;
 800a18a:	68fb      	ldr	r3, [r7, #12]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a19c:	f001 fd7a 	bl	800bc94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d102      	bne.n	800a1b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e001      	b.n	800a1b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1b6:	f001 fd9d 	bl	800bcf4 <vPortExitCritical>

	return xReturn;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	e014      	b.n	800a1fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a1d4:	4a0f      	ldr	r2, [pc, #60]	; (800a214 <vQueueAddToRegistry+0x50>)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10b      	bne.n	800a1f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a1e0:	490c      	ldr	r1, [pc, #48]	; (800a214 <vQueueAddToRegistry+0x50>)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a1ea:	4a0a      	ldr	r2, [pc, #40]	; (800a214 <vQueueAddToRegistry+0x50>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a1f6:	e006      	b.n	800a206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b07      	cmp	r3, #7
 800a202:	d9e7      	bls.n	800a1d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	20000e3c 	.word	0x20000e3c

0800a218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a228:	f001 fd34 	bl	800bc94 <vPortEnterCritical>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a232:	b25b      	sxtb	r3, r3
 800a234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a238:	d103      	bne.n	800a242 <vQueueWaitForMessageRestricted+0x2a>
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a248:	b25b      	sxtb	r3, r3
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d103      	bne.n	800a258 <vQueueWaitForMessageRestricted+0x40>
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a258:	f001 fd4c 	bl	800bcf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	3324      	adds	r3, #36	; 0x24
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	68b9      	ldr	r1, [r7, #8]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 fd6d 	bl	800ad4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a272:	6978      	ldr	r0, [r7, #20]
 800a274:	f7ff ff26 	bl	800a0c4 <prvUnlockQueue>
	}
 800a278:	bf00      	nop
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08e      	sub	sp, #56	; 0x38
 800a284:	af04      	add	r7, sp, #16
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <xTaskCreateStatic+0x2a>
	__asm volatile
 800a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	623b      	str	r3, [r7, #32]
}
 800a2a6:	bf00      	nop
 800a2a8:	e7fe      	b.n	800a2a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10a      	bne.n	800a2c6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	61fb      	str	r3, [r7, #28]
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2c6:	23ac      	movs	r3, #172	; 0xac
 800a2c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	2bac      	cmp	r3, #172	; 0xac
 800a2ce:	d00a      	beq.n	800a2e6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	61bb      	str	r3, [r7, #24]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01e      	beq.n	800a32a <xTaskCreateStatic+0xaa>
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d01b      	beq.n	800a32a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	2202      	movs	r2, #2
 800a300:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a304:	2300      	movs	r3, #0
 800a306:	9303      	str	r3, [sp, #12]
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	9302      	str	r3, [sp, #8]
 800a30c:	f107 0314 	add.w	r3, r7, #20
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	68b9      	ldr	r1, [r7, #8]
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f851 	bl	800a3c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a324:	f000 f8ec 	bl	800a500 <prvAddNewTaskToReadyList>
 800a328:	e001      	b.n	800a32e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a32e:	697b      	ldr	r3, [r7, #20]
	}
 800a330:	4618      	mov	r0, r3
 800a332:	3728      	adds	r7, #40	; 0x28
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08c      	sub	sp, #48	; 0x30
 800a33c:	af04      	add	r7, sp, #16
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	603b      	str	r3, [r7, #0]
 800a344:	4613      	mov	r3, r2
 800a346:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a348:	88fb      	ldrh	r3, [r7, #6]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4618      	mov	r0, r3
 800a34e:	f001 fdc3 	bl	800bed8 <pvPortMalloc>
 800a352:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00e      	beq.n	800a378 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a35a:	20ac      	movs	r0, #172	; 0xac
 800a35c:	f001 fdbc 	bl	800bed8 <pvPortMalloc>
 800a360:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	631a      	str	r2, [r3, #48]	; 0x30
 800a36e:	e005      	b.n	800a37c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a370:	6978      	ldr	r0, [r7, #20]
 800a372:	f001 fe75 	bl	800c060 <vPortFree>
 800a376:	e001      	b.n	800a37c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d017      	beq.n	800a3b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a38a:	88fa      	ldrh	r2, [r7, #6]
 800a38c:	2300      	movs	r3, #0
 800a38e:	9303      	str	r3, [sp, #12]
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	9302      	str	r3, [sp, #8]
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 f80f 	bl	800a3c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3a6:	69f8      	ldr	r0, [r7, #28]
 800a3a8:	f000 f8aa 	bl	800a500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	e002      	b.n	800a3b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3b8:	69bb      	ldr	r3, [r7, #24]
	}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
 800a3d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	461a      	mov	r2, r3
 800a3dc:	21a5      	movs	r1, #165	; 0xa5
 800a3de:	f002 fdc3 	bl	800cf68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	f023 0307 	bic.w	r3, r3, #7
 800a3fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00a      	beq.n	800a41c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	617b      	str	r3, [r7, #20]
}
 800a418:	bf00      	nop
 800a41a:	e7fe      	b.n	800a41a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a41c:	2300      	movs	r3, #0
 800a41e:	61fb      	str	r3, [r7, #28]
 800a420:	e012      	b.n	800a448 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	4413      	add	r3, r2
 800a428:	7819      	ldrb	r1, [r3, #0]
 800a42a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	4413      	add	r3, r2
 800a430:	3334      	adds	r3, #52	; 0x34
 800a432:	460a      	mov	r2, r1
 800a434:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	4413      	add	r3, r2
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d006      	beq.n	800a450 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	3301      	adds	r3, #1
 800a446:	61fb      	str	r3, [r7, #28]
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	2b13      	cmp	r3, #19
 800a44c:	d9e9      	bls.n	800a422 <prvInitialiseNewTask+0x5e>
 800a44e:	e000      	b.n	800a452 <prvInitialiseNewTask+0x8e>
		{
			break;
 800a450:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	2b37      	cmp	r3, #55	; 0x37
 800a45e:	d901      	bls.n	800a464 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a460:	2337      	movs	r3, #55	; 0x37
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a468:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a46e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	2200      	movs	r2, #0
 800a474:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	3304      	adds	r3, #4
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff f8fa 	bl	8009674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	3318      	adds	r3, #24
 800a484:	4618      	mov	r0, r3
 800a486:	f7ff f8f5 	bl	8009674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a48e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a49e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b2:	3358      	adds	r3, #88	; 0x58
 800a4b4:	224c      	movs	r2, #76	; 0x4c
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f002 fd55 	bl	800cf68 <memset>
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	4a0c      	ldr	r2, [pc, #48]	; (800a4f4 <prvInitialiseNewTask+0x130>)
 800a4c2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	4a0c      	ldr	r2, [pc, #48]	; (800a4f8 <prvInitialiseNewTask+0x134>)
 800a4c8:	661a      	str	r2, [r3, #96]	; 0x60
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	4a0b      	ldr	r2, [pc, #44]	; (800a4fc <prvInitialiseNewTask+0x138>)
 800a4ce:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	68f9      	ldr	r1, [r7, #12]
 800a4d4:	69b8      	ldr	r0, [r7, #24]
 800a4d6:	f001 fab1 	bl	800ba3c <pxPortInitialiseStack>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ec:	bf00      	nop
 800a4ee:	3720      	adds	r7, #32
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	200028c8 	.word	0x200028c8
 800a4f8:	20002930 	.word	0x20002930
 800a4fc:	20002998 	.word	0x20002998

0800a500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a508:	f001 fbc4 	bl	800bc94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a50c:	4b2d      	ldr	r3, [pc, #180]	; (800a5c4 <prvAddNewTaskToReadyList+0xc4>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3301      	adds	r3, #1
 800a512:	4a2c      	ldr	r2, [pc, #176]	; (800a5c4 <prvAddNewTaskToReadyList+0xc4>)
 800a514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a516:	4b2c      	ldr	r3, [pc, #176]	; (800a5c8 <prvAddNewTaskToReadyList+0xc8>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d109      	bne.n	800a532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a51e:	4a2a      	ldr	r2, [pc, #168]	; (800a5c8 <prvAddNewTaskToReadyList+0xc8>)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a524:	4b27      	ldr	r3, [pc, #156]	; (800a5c4 <prvAddNewTaskToReadyList+0xc4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d110      	bne.n	800a54e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a52c:	f000 fd9c 	bl	800b068 <prvInitialiseTaskLists>
 800a530:	e00d      	b.n	800a54e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a532:	4b26      	ldr	r3, [pc, #152]	; (800a5cc <prvAddNewTaskToReadyList+0xcc>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d109      	bne.n	800a54e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a53a:	4b23      	ldr	r3, [pc, #140]	; (800a5c8 <prvAddNewTaskToReadyList+0xc8>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a544:	429a      	cmp	r2, r3
 800a546:	d802      	bhi.n	800a54e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a548:	4a1f      	ldr	r2, [pc, #124]	; (800a5c8 <prvAddNewTaskToReadyList+0xc8>)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a54e:	4b20      	ldr	r3, [pc, #128]	; (800a5d0 <prvAddNewTaskToReadyList+0xd0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3301      	adds	r3, #1
 800a554:	4a1e      	ldr	r2, [pc, #120]	; (800a5d0 <prvAddNewTaskToReadyList+0xd0>)
 800a556:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a558:	4b1d      	ldr	r3, [pc, #116]	; (800a5d0 <prvAddNewTaskToReadyList+0xd0>)
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a564:	4b1b      	ldr	r3, [pc, #108]	; (800a5d4 <prvAddNewTaskToReadyList+0xd4>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d903      	bls.n	800a574 <prvAddNewTaskToReadyList+0x74>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a570:	4a18      	ldr	r2, [pc, #96]	; (800a5d4 <prvAddNewTaskToReadyList+0xd4>)
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a578:	4613      	mov	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4a15      	ldr	r2, [pc, #84]	; (800a5d8 <prvAddNewTaskToReadyList+0xd8>)
 800a582:	441a      	add	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3304      	adds	r3, #4
 800a588:	4619      	mov	r1, r3
 800a58a:	4610      	mov	r0, r2
 800a58c:	f7ff f87f 	bl	800968e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a590:	f001 fbb0 	bl	800bcf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a594:	4b0d      	ldr	r3, [pc, #52]	; (800a5cc <prvAddNewTaskToReadyList+0xcc>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00e      	beq.n	800a5ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <prvAddNewTaskToReadyList+0xc8>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d207      	bcs.n	800a5ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5aa:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <prvAddNewTaskToReadyList+0xdc>)
 800a5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5ba:	bf00      	nop
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20001350 	.word	0x20001350
 800a5c8:	20000e7c 	.word	0x20000e7c
 800a5cc:	2000135c 	.word	0x2000135c
 800a5d0:	2000136c 	.word	0x2000136c
 800a5d4:	20001358 	.word	0x20001358
 800a5d8:	20000e80 	.word	0x20000e80
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d017      	beq.n	800a622 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5f2:	4b13      	ldr	r3, [pc, #76]	; (800a640 <vTaskDelay+0x60>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00a      	beq.n	800a610 <vTaskDelay+0x30>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	60bb      	str	r3, [r7, #8]
}
 800a60c:	bf00      	nop
 800a60e:	e7fe      	b.n	800a60e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a610:	f000 f99a 	bl	800a948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a614:	2100      	movs	r1, #0
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fe8a 	bl	800b330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a61c:	f000 f9a2 	bl	800a964 <xTaskResumeAll>
 800a620:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d107      	bne.n	800a638 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a628:	4b06      	ldr	r3, [pc, #24]	; (800a644 <vTaskDelay+0x64>)
 800a62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a638:	bf00      	nop
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	20001378 	.word	0x20001378
 800a644:	e000ed04 	.word	0xe000ed04

0800a648 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a650:	f001 fb20 	bl	800bc94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d102      	bne.n	800a660 <vTaskSuspend+0x18>
 800a65a:	4b30      	ldr	r3, [pc, #192]	; (800a71c <vTaskSuspend+0xd4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	e000      	b.n	800a662 <vTaskSuspend+0x1a>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3304      	adds	r3, #4
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff f86d 	bl	8009748 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a672:	2b00      	cmp	r3, #0
 800a674:	d004      	beq.n	800a680 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3318      	adds	r3, #24
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff f864 	bl	8009748 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3304      	adds	r3, #4
 800a684:	4619      	mov	r1, r3
 800a686:	4826      	ldr	r0, [pc, #152]	; (800a720 <vTaskSuspend+0xd8>)
 800a688:	f7ff f801 	bl	800968e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b01      	cmp	r3, #1
 800a696:	d103      	bne.n	800a6a0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a6a0:	f001 fb28 	bl	800bcf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a6a4:	4b1f      	ldr	r3, [pc, #124]	; (800a724 <vTaskSuspend+0xdc>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d005      	beq.n	800a6b8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a6ac:	f001 faf2 	bl	800bc94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a6b0:	f000 fd7c 	bl	800b1ac <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a6b4:	f001 fb1e 	bl	800bcf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a6b8:	4b18      	ldr	r3, [pc, #96]	; (800a71c <vTaskSuspend+0xd4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d127      	bne.n	800a712 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a6c2:	4b18      	ldr	r3, [pc, #96]	; (800a724 <vTaskSuspend+0xdc>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d017      	beq.n	800a6fa <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a6ca:	4b17      	ldr	r3, [pc, #92]	; (800a728 <vTaskSuspend+0xe0>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <vTaskSuspend+0xa0>
	__asm volatile
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	60bb      	str	r3, [r7, #8]
}
 800a6e4:	bf00      	nop
 800a6e6:	e7fe      	b.n	800a6e6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a6e8:	4b10      	ldr	r3, [pc, #64]	; (800a72c <vTaskSuspend+0xe4>)
 800a6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6f8:	e00b      	b.n	800a712 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a6fa:	4b09      	ldr	r3, [pc, #36]	; (800a720 <vTaskSuspend+0xd8>)
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <vTaskSuspend+0xe8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d103      	bne.n	800a70e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a706:	4b05      	ldr	r3, [pc, #20]	; (800a71c <vTaskSuspend+0xd4>)
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]
	}
 800a70c:	e001      	b.n	800a712 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a70e:	f000 fa95 	bl	800ac3c <vTaskSwitchContext>
	}
 800a712:	bf00      	nop
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000e7c 	.word	0x20000e7c
 800a720:	2000133c 	.word	0x2000133c
 800a724:	2000135c 	.word	0x2000135c
 800a728:	20001378 	.word	0x20001378
 800a72c:	e000ed04 	.word	0xe000ed04
 800a730:	20001350 	.word	0x20001350

0800a734 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	60fb      	str	r3, [r7, #12]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	4a0f      	ldr	r2, [pc, #60]	; (800a7a4 <prvTaskIsTaskSuspended+0x70>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d101      	bne.n	800a76e <prvTaskIsTaskSuspended+0x3a>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e000      	b.n	800a770 <prvTaskIsTaskSuspended+0x3c>
 800a76e:	2300      	movs	r3, #0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00f      	beq.n	800a794 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a778:	4a0b      	ldr	r2, [pc, #44]	; (800a7a8 <prvTaskIsTaskSuspended+0x74>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d00a      	beq.n	800a794 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <prvTaskIsTaskSuspended+0x56>
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <prvTaskIsTaskSuspended+0x58>
 800a78a:	2300      	movs	r3, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800a790:	2301      	movs	r3, #1
 800a792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a794:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a796:	4618      	mov	r0, r3
 800a798:	371c      	adds	r7, #28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	2000133c 	.word	0x2000133c
 800a7a8:	20001310 	.word	0x20001310

0800a7ac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <vTaskResume+0x28>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	60bb      	str	r3, [r7, #8]
}
 800a7d0:	bf00      	nop
 800a7d2:	e7fe      	b.n	800a7d2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d03a      	beq.n	800a850 <vTaskResume+0xa4>
 800a7da:	4b1f      	ldr	r3, [pc, #124]	; (800a858 <vTaskResume+0xac>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d035      	beq.n	800a850 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a7e4:	f001 fa56 	bl	800bc94 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7ff ffa3 	bl	800a734 <prvTaskIsTaskSuspended>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d02b      	beq.n	800a84c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fe ffa5 	bl	8009748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a802:	4b16      	ldr	r3, [pc, #88]	; (800a85c <vTaskResume+0xb0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d903      	bls.n	800a812 <vTaskResume+0x66>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80e:	4a13      	ldr	r2, [pc, #76]	; (800a85c <vTaskResume+0xb0>)
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4a10      	ldr	r2, [pc, #64]	; (800a860 <vTaskResume+0xb4>)
 800a820:	441a      	add	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	3304      	adds	r3, #4
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7fe ff30 	bl	800968e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <vTaskResume+0xac>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a838:	429a      	cmp	r2, r3
 800a83a:	d307      	bcc.n	800a84c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a83c:	4b09      	ldr	r3, [pc, #36]	; (800a864 <vTaskResume+0xb8>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a84c:	f001 fa52 	bl	800bcf4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a850:	bf00      	nop
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20000e7c 	.word	0x20000e7c
 800a85c:	20001358 	.word	0x20001358
 800a860:	20000e80 	.word	0x20000e80
 800a864:	e000ed04 	.word	0xe000ed04

0800a868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	; 0x28
 800a86c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a876:	463a      	mov	r2, r7
 800a878:	1d39      	adds	r1, r7, #4
 800a87a:	f107 0308 	add.w	r3, r7, #8
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fd28 	bl	80092d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	9202      	str	r2, [sp, #8]
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	2300      	movs	r3, #0
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	460a      	mov	r2, r1
 800a896:	4924      	ldr	r1, [pc, #144]	; (800a928 <vTaskStartScheduler+0xc0>)
 800a898:	4824      	ldr	r0, [pc, #144]	; (800a92c <vTaskStartScheduler+0xc4>)
 800a89a:	f7ff fcf1 	bl	800a280 <xTaskCreateStatic>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4a23      	ldr	r2, [pc, #140]	; (800a930 <vTaskStartScheduler+0xc8>)
 800a8a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8a4:	4b22      	ldr	r3, [pc, #136]	; (800a930 <vTaskStartScheduler+0xc8>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	e001      	b.n	800a8b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d102      	bne.n	800a8c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a8bc:	f000 fd8c 	bl	800b3d8 <xTimerCreateTimerTask>
 800a8c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d11b      	bne.n	800a900 <vTaskStartScheduler+0x98>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	613b      	str	r3, [r7, #16]
}
 800a8da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8dc:	4b15      	ldr	r3, [pc, #84]	; (800a934 <vTaskStartScheduler+0xcc>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3358      	adds	r3, #88	; 0x58
 800a8e2:	4a15      	ldr	r2, [pc, #84]	; (800a938 <vTaskStartScheduler+0xd0>)
 800a8e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8e6:	4b15      	ldr	r3, [pc, #84]	; (800a93c <vTaskStartScheduler+0xd4>)
 800a8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8ee:	4b14      	ldr	r3, [pc, #80]	; (800a940 <vTaskStartScheduler+0xd8>)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a8f4:	4b13      	ldr	r3, [pc, #76]	; (800a944 <vTaskStartScheduler+0xdc>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8fa:	f001 f929 	bl	800bb50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8fe:	e00e      	b.n	800a91e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a906:	d10a      	bne.n	800a91e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	60fb      	str	r3, [r7, #12]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <vTaskStartScheduler+0xb4>
}
 800a91e:	bf00      	nop
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	0800f0dc 	.word	0x0800f0dc
 800a92c:	0800b039 	.word	0x0800b039
 800a930:	20001374 	.word	0x20001374
 800a934:	20000e7c 	.word	0x20000e7c
 800a938:	200000e4 	.word	0x200000e4
 800a93c:	20001370 	.word	0x20001370
 800a940:	2000135c 	.word	0x2000135c
 800a944:	20001354 	.word	0x20001354

0800a948 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a94c:	4b04      	ldr	r3, [pc, #16]	; (800a960 <vTaskSuspendAll+0x18>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3301      	adds	r3, #1
 800a952:	4a03      	ldr	r2, [pc, #12]	; (800a960 <vTaskSuspendAll+0x18>)
 800a954:	6013      	str	r3, [r2, #0]
}
 800a956:	bf00      	nop
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20001378 	.word	0x20001378

0800a964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a96e:	2300      	movs	r3, #0
 800a970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a972:	4b42      	ldr	r3, [pc, #264]	; (800aa7c <xTaskResumeAll+0x118>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10a      	bne.n	800a990 <xTaskResumeAll+0x2c>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	603b      	str	r3, [r7, #0]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a990:	f001 f980 	bl	800bc94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a994:	4b39      	ldr	r3, [pc, #228]	; (800aa7c <xTaskResumeAll+0x118>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3b01      	subs	r3, #1
 800a99a:	4a38      	ldr	r2, [pc, #224]	; (800aa7c <xTaskResumeAll+0x118>)
 800a99c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a99e:	4b37      	ldr	r3, [pc, #220]	; (800aa7c <xTaskResumeAll+0x118>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d162      	bne.n	800aa6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9a6:	4b36      	ldr	r3, [pc, #216]	; (800aa80 <xTaskResumeAll+0x11c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d05e      	beq.n	800aa6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9ae:	e02f      	b.n	800aa10 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a9b0:	4b34      	ldr	r3, [pc, #208]	; (800aa84 <xTaskResumeAll+0x120>)
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3318      	adds	r3, #24
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fec3 	bl	8009748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe febe 	bl	8009748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d0:	4b2d      	ldr	r3, [pc, #180]	; (800aa88 <xTaskResumeAll+0x124>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d903      	bls.n	800a9e0 <xTaskResumeAll+0x7c>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9dc:	4a2a      	ldr	r2, [pc, #168]	; (800aa88 <xTaskResumeAll+0x124>)
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4a27      	ldr	r2, [pc, #156]	; (800aa8c <xTaskResumeAll+0x128>)
 800a9ee:	441a      	add	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	f7fe fe49 	bl	800968e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa00:	4b23      	ldr	r3, [pc, #140]	; (800aa90 <xTaskResumeAll+0x12c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d302      	bcc.n	800aa10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aa0a:	4b22      	ldr	r3, [pc, #136]	; (800aa94 <xTaskResumeAll+0x130>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa10:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <xTaskResumeAll+0x120>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1cb      	bne.n	800a9b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa1e:	f000 fbc5 	bl	800b1ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aa22:	4b1d      	ldr	r3, [pc, #116]	; (800aa98 <xTaskResumeAll+0x134>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d010      	beq.n	800aa50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa2e:	f000 f847 	bl	800aac0 <xTaskIncrementTick>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa38:	4b16      	ldr	r3, [pc, #88]	; (800aa94 <xTaskResumeAll+0x130>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f1      	bne.n	800aa2e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800aa4a:	4b13      	ldr	r3, [pc, #76]	; (800aa98 <xTaskResumeAll+0x134>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa50:	4b10      	ldr	r3, [pc, #64]	; (800aa94 <xTaskResumeAll+0x130>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa5c:	4b0f      	ldr	r3, [pc, #60]	; (800aa9c <xTaskResumeAll+0x138>)
 800aa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa6c:	f001 f942 	bl	800bcf4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa70:	68bb      	ldr	r3, [r7, #8]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20001378 	.word	0x20001378
 800aa80:	20001350 	.word	0x20001350
 800aa84:	20001310 	.word	0x20001310
 800aa88:	20001358 	.word	0x20001358
 800aa8c:	20000e80 	.word	0x20000e80
 800aa90:	20000e7c 	.word	0x20000e7c
 800aa94:	20001364 	.word	0x20001364
 800aa98:	20001360 	.word	0x20001360
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aaa6:	4b05      	ldr	r3, [pc, #20]	; (800aabc <xTaskGetTickCount+0x1c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aaac:	687b      	ldr	r3, [r7, #4]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	20001354 	.word	0x20001354

0800aac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaca:	4b51      	ldr	r3, [pc, #324]	; (800ac10 <xTaskIncrementTick+0x150>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f040 808e 	bne.w	800abf0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aad4:	4b4f      	ldr	r3, [pc, #316]	; (800ac14 <xTaskIncrementTick+0x154>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aadc:	4a4d      	ldr	r2, [pc, #308]	; (800ac14 <xTaskIncrementTick+0x154>)
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d120      	bne.n	800ab2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aae8:	4b4b      	ldr	r3, [pc, #300]	; (800ac18 <xTaskIncrementTick+0x158>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00a      	beq.n	800ab08 <xTaskIncrementTick+0x48>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	603b      	str	r3, [r7, #0]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <xTaskIncrementTick+0x46>
 800ab08:	4b43      	ldr	r3, [pc, #268]	; (800ac18 <xTaskIncrementTick+0x158>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	4b43      	ldr	r3, [pc, #268]	; (800ac1c <xTaskIncrementTick+0x15c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a41      	ldr	r2, [pc, #260]	; (800ac18 <xTaskIncrementTick+0x158>)
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	4a41      	ldr	r2, [pc, #260]	; (800ac1c <xTaskIncrementTick+0x15c>)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	4b40      	ldr	r3, [pc, #256]	; (800ac20 <xTaskIncrementTick+0x160>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3301      	adds	r3, #1
 800ab22:	4a3f      	ldr	r2, [pc, #252]	; (800ac20 <xTaskIncrementTick+0x160>)
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	f000 fb41 	bl	800b1ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab2a:	4b3e      	ldr	r3, [pc, #248]	; (800ac24 <xTaskIncrementTick+0x164>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d34e      	bcc.n	800abd2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab34:	4b38      	ldr	r3, [pc, #224]	; (800ac18 <xTaskIncrementTick+0x158>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <xTaskIncrementTick+0x82>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e000      	b.n	800ab44 <xTaskIncrementTick+0x84>
 800ab42:	2300      	movs	r3, #0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d004      	beq.n	800ab52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab48:	4b36      	ldr	r3, [pc, #216]	; (800ac24 <xTaskIncrementTick+0x164>)
 800ab4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4e:	601a      	str	r2, [r3, #0]
					break;
 800ab50:	e03f      	b.n	800abd2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab52:	4b31      	ldr	r3, [pc, #196]	; (800ac18 <xTaskIncrementTick+0x158>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d203      	bcs.n	800ab72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab6a:	4a2e      	ldr	r2, [pc, #184]	; (800ac24 <xTaskIncrementTick+0x164>)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6013      	str	r3, [r2, #0]
						break;
 800ab70:	e02f      	b.n	800abd2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	3304      	adds	r3, #4
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe fde6 	bl	8009748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	3318      	adds	r3, #24
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe fddd 	bl	8009748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab92:	4b25      	ldr	r3, [pc, #148]	; (800ac28 <xTaskIncrementTick+0x168>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d903      	bls.n	800aba2 <xTaskIncrementTick+0xe2>
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	4a22      	ldr	r2, [pc, #136]	; (800ac28 <xTaskIncrementTick+0x168>)
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba6:	4613      	mov	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4a1f      	ldr	r2, [pc, #124]	; (800ac2c <xTaskIncrementTick+0x16c>)
 800abb0:	441a      	add	r2, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	3304      	adds	r3, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	4610      	mov	r0, r2
 800abba:	f7fe fd68 	bl	800968e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc2:	4b1b      	ldr	r3, [pc, #108]	; (800ac30 <xTaskIncrementTick+0x170>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	429a      	cmp	r2, r3
 800abca:	d3b3      	bcc.n	800ab34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abcc:	2301      	movs	r3, #1
 800abce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abd0:	e7b0      	b.n	800ab34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abd2:	4b17      	ldr	r3, [pc, #92]	; (800ac30 <xTaskIncrementTick+0x170>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd8:	4914      	ldr	r1, [pc, #80]	; (800ac2c <xTaskIncrementTick+0x16c>)
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	440b      	add	r3, r1
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d907      	bls.n	800abfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800abea:	2301      	movs	r3, #1
 800abec:	617b      	str	r3, [r7, #20]
 800abee:	e004      	b.n	800abfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800abf0:	4b10      	ldr	r3, [pc, #64]	; (800ac34 <xTaskIncrementTick+0x174>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3301      	adds	r3, #1
 800abf6:	4a0f      	ldr	r2, [pc, #60]	; (800ac34 <xTaskIncrementTick+0x174>)
 800abf8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800abfa:	4b0f      	ldr	r3, [pc, #60]	; (800ac38 <xTaskIncrementTick+0x178>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ac02:	2301      	movs	r3, #1
 800ac04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ac06:	697b      	ldr	r3, [r7, #20]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	20001378 	.word	0x20001378
 800ac14:	20001354 	.word	0x20001354
 800ac18:	20001308 	.word	0x20001308
 800ac1c:	2000130c 	.word	0x2000130c
 800ac20:	20001368 	.word	0x20001368
 800ac24:	20001370 	.word	0x20001370
 800ac28:	20001358 	.word	0x20001358
 800ac2c:	20000e80 	.word	0x20000e80
 800ac30:	20000e7c 	.word	0x20000e7c
 800ac34:	20001360 	.word	0x20001360
 800ac38:	20001364 	.word	0x20001364

0800ac3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac42:	4b2a      	ldr	r3, [pc, #168]	; (800acec <vTaskSwitchContext+0xb0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac4a:	4b29      	ldr	r3, [pc, #164]	; (800acf0 <vTaskSwitchContext+0xb4>)
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac50:	e046      	b.n	800ace0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ac52:	4b27      	ldr	r3, [pc, #156]	; (800acf0 <vTaskSwitchContext+0xb4>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ac58:	4b26      	ldr	r3, [pc, #152]	; (800acf4 <vTaskSwitchContext+0xb8>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	60fb      	str	r3, [r7, #12]
 800ac5e:	e010      	b.n	800ac82 <vTaskSwitchContext+0x46>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d10a      	bne.n	800ac7c <vTaskSwitchContext+0x40>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	607b      	str	r3, [r7, #4]
}
 800ac78:	bf00      	nop
 800ac7a:	e7fe      	b.n	800ac7a <vTaskSwitchContext+0x3e>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	491d      	ldr	r1, [pc, #116]	; (800acf8 <vTaskSwitchContext+0xbc>)
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	440b      	add	r3, r1
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0e4      	beq.n	800ac60 <vTaskSwitchContext+0x24>
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4a15      	ldr	r2, [pc, #84]	; (800acf8 <vTaskSwitchContext+0xbc>)
 800aca2:	4413      	add	r3, r2
 800aca4:	60bb      	str	r3, [r7, #8]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	605a      	str	r2, [r3, #4]
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	3308      	adds	r3, #8
 800acb8:	429a      	cmp	r2, r3
 800acba:	d104      	bne.n	800acc6 <vTaskSwitchContext+0x8a>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	605a      	str	r2, [r3, #4]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	4a0b      	ldr	r2, [pc, #44]	; (800acfc <vTaskSwitchContext+0xc0>)
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	4a08      	ldr	r2, [pc, #32]	; (800acf4 <vTaskSwitchContext+0xb8>)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acd6:	4b09      	ldr	r3, [pc, #36]	; (800acfc <vTaskSwitchContext+0xc0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3358      	adds	r3, #88	; 0x58
 800acdc:	4a08      	ldr	r2, [pc, #32]	; (800ad00 <vTaskSwitchContext+0xc4>)
 800acde:	6013      	str	r3, [r2, #0]
}
 800ace0:	bf00      	nop
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	20001378 	.word	0x20001378
 800acf0:	20001364 	.word	0x20001364
 800acf4:	20001358 	.word	0x20001358
 800acf8:	20000e80 	.word	0x20000e80
 800acfc:	20000e7c 	.word	0x20000e7c
 800ad00:	200000e4 	.word	0x200000e4

0800ad04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10a      	bne.n	800ad2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	60fb      	str	r3, [r7, #12]
}
 800ad26:	bf00      	nop
 800ad28:	e7fe      	b.n	800ad28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad2a:	4b07      	ldr	r3, [pc, #28]	; (800ad48 <vTaskPlaceOnEventList+0x44>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3318      	adds	r3, #24
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7fe fccf 	bl	80096d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad38:	2101      	movs	r1, #1
 800ad3a:	6838      	ldr	r0, [r7, #0]
 800ad3c:	f000 faf8 	bl	800b330 <prvAddCurrentTaskToDelayedList>
}
 800ad40:	bf00      	nop
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	20000e7c 	.word	0x20000e7c

0800ad4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	617b      	str	r3, [r7, #20]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad74:	4b0a      	ldr	r3, [pc, #40]	; (800ada0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3318      	adds	r3, #24
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f7fe fc86 	bl	800968e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad88:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	68b8      	ldr	r0, [r7, #8]
 800ad92:	f000 facd 	bl	800b330 <prvAddCurrentTaskToDelayedList>
	}
 800ad96:	bf00      	nop
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20000e7c 	.word	0x20000e7c

0800ada4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10a      	bne.n	800add0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	60fb      	str	r3, [r7, #12]
}
 800adcc:	bf00      	nop
 800adce:	e7fe      	b.n	800adce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	3318      	adds	r3, #24
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe fcb7 	bl	8009748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adda:	4b1e      	ldr	r3, [pc, #120]	; (800ae54 <xTaskRemoveFromEventList+0xb0>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d11d      	bne.n	800ae1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	3304      	adds	r3, #4
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe fcae 	bl	8009748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	4b19      	ldr	r3, [pc, #100]	; (800ae58 <xTaskRemoveFromEventList+0xb4>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d903      	bls.n	800ae00 <xTaskRemoveFromEventList+0x5c>
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	4a16      	ldr	r2, [pc, #88]	; (800ae58 <xTaskRemoveFromEventList+0xb4>)
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4a13      	ldr	r2, [pc, #76]	; (800ae5c <xTaskRemoveFromEventList+0xb8>)
 800ae0e:	441a      	add	r2, r3
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	3304      	adds	r3, #4
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f7fe fc39 	bl	800968e <vListInsertEnd>
 800ae1c:	e005      	b.n	800ae2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	3318      	adds	r3, #24
 800ae22:	4619      	mov	r1, r3
 800ae24:	480e      	ldr	r0, [pc, #56]	; (800ae60 <xTaskRemoveFromEventList+0xbc>)
 800ae26:	f7fe fc32 	bl	800968e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2e:	4b0d      	ldr	r3, [pc, #52]	; (800ae64 <xTaskRemoveFromEventList+0xc0>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d905      	bls.n	800ae44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <xTaskRemoveFromEventList+0xc4>)
 800ae3e:	2201      	movs	r2, #1
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	e001      	b.n	800ae48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae44:	2300      	movs	r3, #0
 800ae46:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ae48:	697b      	ldr	r3, [r7, #20]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	20001378 	.word	0x20001378
 800ae58:	20001358 	.word	0x20001358
 800ae5c:	20000e80 	.word	0x20000e80
 800ae60:	20001310 	.word	0x20001310
 800ae64:	20000e7c 	.word	0x20000e7c
 800ae68:	20001364 	.word	0x20001364

0800ae6c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ae76:	4b29      	ldr	r3, [pc, #164]	; (800af1c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10a      	bne.n	800ae94 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	613b      	str	r3, [r7, #16]
}
 800ae90:	bf00      	nop
 800ae92:	e7fe      	b.n	800ae92 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10a      	bne.n	800aec0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	60fb      	str	r3, [r7, #12]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7fe fc41 	bl	8009748 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fe fc3c 	bl	8009748 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4b12      	ldr	r3, [pc, #72]	; (800af20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d903      	bls.n	800aee4 <vTaskRemoveFromUnorderedEventList+0x78>
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a0f      	ldr	r2, [pc, #60]	; (800af20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800aee2:	6013      	str	r3, [r2, #0]
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4a0c      	ldr	r2, [pc, #48]	; (800af24 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800aef2:	441a      	add	r2, r3
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	3304      	adds	r3, #4
 800aef8:	4619      	mov	r1, r3
 800aefa:	4610      	mov	r0, r2
 800aefc:	f7fe fbc7 	bl	800968e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af04:	4b08      	ldr	r3, [pc, #32]	; (800af28 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d902      	bls.n	800af14 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800af0e:	4b07      	ldr	r3, [pc, #28]	; (800af2c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800af10:	2201      	movs	r2, #1
 800af12:	601a      	str	r2, [r3, #0]
	}
}
 800af14:	bf00      	nop
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20001378 	.word	0x20001378
 800af20:	20001358 	.word	0x20001358
 800af24:	20000e80 	.word	0x20000e80
 800af28:	20000e7c 	.word	0x20000e7c
 800af2c:	20001364 	.word	0x20001364

0800af30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af38:	4b06      	ldr	r3, [pc, #24]	; (800af54 <vTaskInternalSetTimeOutState+0x24>)
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af40:	4b05      	ldr	r3, [pc, #20]	; (800af58 <vTaskInternalSetTimeOutState+0x28>)
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	605a      	str	r2, [r3, #4]
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	20001368 	.word	0x20001368
 800af58:	20001354 	.word	0x20001354

0800af5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10a      	bne.n	800af82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	613b      	str	r3, [r7, #16]
}
 800af7e:	bf00      	nop
 800af80:	e7fe      	b.n	800af80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	60fb      	str	r3, [r7, #12]
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800af9e:	f000 fe79 	bl	800bc94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afa2:	4b1d      	ldr	r3, [pc, #116]	; (800b018 <xTaskCheckForTimeOut+0xbc>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afba:	d102      	bne.n	800afc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	61fb      	str	r3, [r7, #28]
 800afc0:	e023      	b.n	800b00a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	4b15      	ldr	r3, [pc, #84]	; (800b01c <xTaskCheckForTimeOut+0xc0>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d007      	beq.n	800afde <xTaskCheckForTimeOut+0x82>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d302      	bcc.n	800afde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afd8:	2301      	movs	r3, #1
 800afda:	61fb      	str	r3, [r7, #28]
 800afdc:	e015      	b.n	800b00a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d20b      	bcs.n	800b000 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7ff ff9b 	bl	800af30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800affa:	2300      	movs	r3, #0
 800affc:	61fb      	str	r3, [r7, #28]
 800affe:	e004      	b.n	800b00a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b006:	2301      	movs	r3, #1
 800b008:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b00a:	f000 fe73 	bl	800bcf4 <vPortExitCritical>

	return xReturn;
 800b00e:	69fb      	ldr	r3, [r7, #28]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3720      	adds	r7, #32
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	20001354 	.word	0x20001354
 800b01c:	20001368 	.word	0x20001368

0800b020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b020:	b480      	push	{r7}
 800b022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b024:	4b03      	ldr	r3, [pc, #12]	; (800b034 <vTaskMissedYield+0x14>)
 800b026:	2201      	movs	r2, #1
 800b028:	601a      	str	r2, [r3, #0]
}
 800b02a:	bf00      	nop
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr
 800b034:	20001364 	.word	0x20001364

0800b038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b040:	f000 f852 	bl	800b0e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b044:	4b06      	ldr	r3, [pc, #24]	; (800b060 <prvIdleTask+0x28>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d9f9      	bls.n	800b040 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b04c:	4b05      	ldr	r3, [pc, #20]	; (800b064 <prvIdleTask+0x2c>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b05c:	e7f0      	b.n	800b040 <prvIdleTask+0x8>
 800b05e:	bf00      	nop
 800b060:	20000e80 	.word	0x20000e80
 800b064:	e000ed04 	.word	0xe000ed04

0800b068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b06e:	2300      	movs	r3, #0
 800b070:	607b      	str	r3, [r7, #4]
 800b072:	e00c      	b.n	800b08e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	4613      	mov	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4a12      	ldr	r2, [pc, #72]	; (800b0c8 <prvInitialiseTaskLists+0x60>)
 800b080:	4413      	add	r3, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fad6 	bl	8009634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3301      	adds	r3, #1
 800b08c:	607b      	str	r3, [r7, #4]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b37      	cmp	r3, #55	; 0x37
 800b092:	d9ef      	bls.n	800b074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b094:	480d      	ldr	r0, [pc, #52]	; (800b0cc <prvInitialiseTaskLists+0x64>)
 800b096:	f7fe facd 	bl	8009634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b09a:	480d      	ldr	r0, [pc, #52]	; (800b0d0 <prvInitialiseTaskLists+0x68>)
 800b09c:	f7fe faca 	bl	8009634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0a0:	480c      	ldr	r0, [pc, #48]	; (800b0d4 <prvInitialiseTaskLists+0x6c>)
 800b0a2:	f7fe fac7 	bl	8009634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0a6:	480c      	ldr	r0, [pc, #48]	; (800b0d8 <prvInitialiseTaskLists+0x70>)
 800b0a8:	f7fe fac4 	bl	8009634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0ac:	480b      	ldr	r0, [pc, #44]	; (800b0dc <prvInitialiseTaskLists+0x74>)
 800b0ae:	f7fe fac1 	bl	8009634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0b2:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <prvInitialiseTaskLists+0x78>)
 800b0b4:	4a05      	ldr	r2, [pc, #20]	; (800b0cc <prvInitialiseTaskLists+0x64>)
 800b0b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0b8:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <prvInitialiseTaskLists+0x7c>)
 800b0ba:	4a05      	ldr	r2, [pc, #20]	; (800b0d0 <prvInitialiseTaskLists+0x68>)
 800b0bc:	601a      	str	r2, [r3, #0]
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000e80 	.word	0x20000e80
 800b0cc:	200012e0 	.word	0x200012e0
 800b0d0:	200012f4 	.word	0x200012f4
 800b0d4:	20001310 	.word	0x20001310
 800b0d8:	20001324 	.word	0x20001324
 800b0dc:	2000133c 	.word	0x2000133c
 800b0e0:	20001308 	.word	0x20001308
 800b0e4:	2000130c 	.word	0x2000130c

0800b0e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0ee:	e019      	b.n	800b124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0f0:	f000 fdd0 	bl	800bc94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b0f4:	4b10      	ldr	r3, [pc, #64]	; (800b138 <prvCheckTasksWaitingTermination+0x50>)
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe fb21 	bl	8009748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b106:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <prvCheckTasksWaitingTermination+0x54>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	4a0b      	ldr	r2, [pc, #44]	; (800b13c <prvCheckTasksWaitingTermination+0x54>)
 800b10e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <prvCheckTasksWaitingTermination+0x58>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3b01      	subs	r3, #1
 800b116:	4a0a      	ldr	r2, [pc, #40]	; (800b140 <prvCheckTasksWaitingTermination+0x58>)
 800b118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b11a:	f000 fdeb 	bl	800bcf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f810 	bl	800b144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b124:	4b06      	ldr	r3, [pc, #24]	; (800b140 <prvCheckTasksWaitingTermination+0x58>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1e1      	bne.n	800b0f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b12c:	bf00      	nop
 800b12e:	bf00      	nop
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20001324 	.word	0x20001324
 800b13c:	20001350 	.word	0x20001350
 800b140:	20001338 	.word	0x20001338

0800b144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3358      	adds	r3, #88	; 0x58
 800b150:	4618      	mov	r0, r3
 800b152:	f001 ff25 	bl	800cfa0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d108      	bne.n	800b172 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b164:	4618      	mov	r0, r3
 800b166:	f000 ff7b 	bl	800c060 <vPortFree>
				vPortFree( pxTCB );
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 ff78 	bl	800c060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b170:	e018      	b.n	800b1a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d103      	bne.n	800b184 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 ff6f 	bl	800c060 <vPortFree>
	}
 800b182:	e00f      	b.n	800b1a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d00a      	beq.n	800b1a4 <prvDeleteTCB+0x60>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60fb      	str	r3, [r7, #12]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <prvDeleteTCB+0x5e>
	}
 800b1a4:	bf00      	nop
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b2:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <prvResetNextTaskUnblockTime+0x44>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <prvResetNextTaskUnblockTime+0x14>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e000      	b.n	800b1c2 <prvResetNextTaskUnblockTime+0x16>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d004      	beq.n	800b1d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1c6:	4b0b      	ldr	r3, [pc, #44]	; (800b1f4 <prvResetNextTaskUnblockTime+0x48>)
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1ce:	e008      	b.n	800b1e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b1d0:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <prvResetNextTaskUnblockTime+0x44>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	4a05      	ldr	r2, [pc, #20]	; (800b1f4 <prvResetNextTaskUnblockTime+0x48>)
 800b1e0:	6013      	str	r3, [r2, #0]
}
 800b1e2:	bf00      	nop
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	20001308 	.word	0x20001308
 800b1f4:	20001370 	.word	0x20001370

0800b1f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b1fe:	4b05      	ldr	r3, [pc, #20]	; (800b214 <xTaskGetCurrentTaskHandle+0x1c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b204:	687b      	ldr	r3, [r7, #4]
	}
 800b206:	4618      	mov	r0, r3
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	20000e7c 	.word	0x20000e7c

0800b218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b21e:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <xTaskGetSchedulerState+0x34>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d102      	bne.n	800b22c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b226:	2301      	movs	r3, #1
 800b228:	607b      	str	r3, [r7, #4]
 800b22a:	e008      	b.n	800b23e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b22c:	4b08      	ldr	r3, [pc, #32]	; (800b250 <xTaskGetSchedulerState+0x38>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d102      	bne.n	800b23a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b234:	2302      	movs	r3, #2
 800b236:	607b      	str	r3, [r7, #4]
 800b238:	e001      	b.n	800b23e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b23a:	2300      	movs	r3, #0
 800b23c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b23e:	687b      	ldr	r3, [r7, #4]
	}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	2000135c 	.word	0x2000135c
 800b250:	20001378 	.word	0x20001378

0800b254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b260:	2300      	movs	r3, #0
 800b262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d056      	beq.n	800b318 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b26a:	4b2e      	ldr	r3, [pc, #184]	; (800b324 <xTaskPriorityDisinherit+0xd0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	429a      	cmp	r2, r3
 800b272:	d00a      	beq.n	800b28a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	60fb      	str	r3, [r7, #12]
}
 800b286:	bf00      	nop
 800b288:	e7fe      	b.n	800b288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10a      	bne.n	800b2a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	60bb      	str	r3, [r7, #8]
}
 800b2a4:	bf00      	nop
 800b2a6:	e7fe      	b.n	800b2a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ac:	1e5a      	subs	r2, r3, #1
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d02c      	beq.n	800b318 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d128      	bne.n	800b318 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe fa3c 	bl	8009748 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e8:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <xTaskPriorityDisinherit+0xd4>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d903      	bls.n	800b2f8 <xTaskPriorityDisinherit+0xa4>
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	4a0c      	ldr	r2, [pc, #48]	; (800b328 <xTaskPriorityDisinherit+0xd4>)
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4a09      	ldr	r2, [pc, #36]	; (800b32c <xTaskPriorityDisinherit+0xd8>)
 800b306:	441a      	add	r2, r3
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f7fe f9bd 	bl	800968e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b318:	697b      	ldr	r3, [r7, #20]
	}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000e7c 	.word	0x20000e7c
 800b328:	20001358 	.word	0x20001358
 800b32c:	20000e80 	.word	0x20000e80

0800b330 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b33a:	4b21      	ldr	r3, [pc, #132]	; (800b3c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b340:	4b20      	ldr	r3, [pc, #128]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3304      	adds	r3, #4
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe f9fe 	bl	8009748 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b352:	d10a      	bne.n	800b36a <prvAddCurrentTaskToDelayedList+0x3a>
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b35a:	4b1a      	ldr	r3, [pc, #104]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3304      	adds	r3, #4
 800b360:	4619      	mov	r1, r3
 800b362:	4819      	ldr	r0, [pc, #100]	; (800b3c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b364:	f7fe f993 	bl	800968e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b368:	e026      	b.n	800b3b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4413      	add	r3, r2
 800b370:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b372:	4b14      	ldr	r3, [pc, #80]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d209      	bcs.n	800b396 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b382:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3304      	adds	r3, #4
 800b38c:	4619      	mov	r1, r3
 800b38e:	4610      	mov	r0, r2
 800b390:	f7fe f9a1 	bl	80096d6 <vListInsert>
}
 800b394:	e010      	b.n	800b3b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b396:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	f7fe f997 	bl	80096d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d202      	bcs.n	800b3b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b3b2:	4a08      	ldr	r2, [pc, #32]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6013      	str	r3, [r2, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20001354 	.word	0x20001354
 800b3c4:	20000e7c 	.word	0x20000e7c
 800b3c8:	2000133c 	.word	0x2000133c
 800b3cc:	2000130c 	.word	0x2000130c
 800b3d0:	20001308 	.word	0x20001308
 800b3d4:	20001370 	.word	0x20001370

0800b3d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b08a      	sub	sp, #40	; 0x28
 800b3dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3e2:	f000 facb 	bl	800b97c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3e6:	4b1c      	ldr	r3, [pc, #112]	; (800b458 <xTimerCreateTimerTask+0x80>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d021      	beq.n	800b432 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3f6:	1d3a      	adds	r2, r7, #4
 800b3f8:	f107 0108 	add.w	r1, r7, #8
 800b3fc:	f107 030c 	add.w	r3, r7, #12
 800b400:	4618      	mov	r0, r3
 800b402:	f7fd ff81 	bl	8009308 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	9202      	str	r2, [sp, #8]
 800b40e:	9301      	str	r3, [sp, #4]
 800b410:	2302      	movs	r3, #2
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	2300      	movs	r3, #0
 800b416:	460a      	mov	r2, r1
 800b418:	4910      	ldr	r1, [pc, #64]	; (800b45c <xTimerCreateTimerTask+0x84>)
 800b41a:	4811      	ldr	r0, [pc, #68]	; (800b460 <xTimerCreateTimerTask+0x88>)
 800b41c:	f7fe ff30 	bl	800a280 <xTaskCreateStatic>
 800b420:	4603      	mov	r3, r0
 800b422:	4a10      	ldr	r2, [pc, #64]	; (800b464 <xTimerCreateTimerTask+0x8c>)
 800b424:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <xTimerCreateTimerTask+0x8c>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b42e:	2301      	movs	r3, #1
 800b430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	613b      	str	r3, [r7, #16]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b44e:	697b      	ldr	r3, [r7, #20]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	200013ac 	.word	0x200013ac
 800b45c:	0800f0e4 	.word	0x0800f0e4
 800b460:	0800b585 	.word	0x0800b585
 800b464:	200013b0 	.word	0x200013b0

0800b468 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08a      	sub	sp, #40	; 0x28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b476:	2300      	movs	r3, #0
 800b478:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10a      	bne.n	800b496 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	623b      	str	r3, [r7, #32]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b496:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <xTimerGenericCommand+0x98>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d02a      	beq.n	800b4f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b05      	cmp	r3, #5
 800b4ae:	dc18      	bgt.n	800b4e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4b0:	f7ff feb2 	bl	800b218 <xTaskGetSchedulerState>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d109      	bne.n	800b4ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4ba:	4b11      	ldr	r3, [pc, #68]	; (800b500 <xTimerGenericCommand+0x98>)
 800b4bc:	6818      	ldr	r0, [r3, #0]
 800b4be:	f107 0110 	add.w	r1, r7, #16
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	f7fe faf7 	bl	8009ab8 <xQueueGenericSend>
 800b4ca:	6278      	str	r0, [r7, #36]	; 0x24
 800b4cc:	e012      	b.n	800b4f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b4ce:	4b0c      	ldr	r3, [pc, #48]	; (800b500 <xTimerGenericCommand+0x98>)
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	f107 0110 	add.w	r1, r7, #16
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f7fe faed 	bl	8009ab8 <xQueueGenericSend>
 800b4de:	6278      	str	r0, [r7, #36]	; 0x24
 800b4e0:	e008      	b.n	800b4f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4e2:	4b07      	ldr	r3, [pc, #28]	; (800b500 <xTimerGenericCommand+0x98>)
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	f107 0110 	add.w	r1, r7, #16
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	f7fe fbe1 	bl	8009cb4 <xQueueGenericSendFromISR>
 800b4f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3728      	adds	r7, #40	; 0x28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	200013ac 	.word	0x200013ac

0800b504 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af02      	add	r7, sp, #8
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b50e:	4b1c      	ldr	r3, [pc, #112]	; (800b580 <prvProcessExpiredTimer+0x7c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fe f913 	bl	8009748 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d122      	bne.n	800b570 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	699a      	ldr	r2, [r3, #24]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	18d1      	adds	r1, r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	683a      	ldr	r2, [r7, #0]
 800b536:	6978      	ldr	r0, [r7, #20]
 800b538:	f000 f8c8 	bl	800b6cc <prvInsertTimerInActiveList>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d016      	beq.n	800b570 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b542:	2300      	movs	r3, #0
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	2300      	movs	r3, #0
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	2100      	movs	r1, #0
 800b54c:	6978      	ldr	r0, [r7, #20]
 800b54e:	f7ff ff8b 	bl	800b468 <xTimerGenericCommand>
 800b552:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	60fb      	str	r3, [r7, #12]
}
 800b56c:	bf00      	nop
 800b56e:	e7fe      	b.n	800b56e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b574:	6978      	ldr	r0, [r7, #20]
 800b576:	4798      	blx	r3
}
 800b578:	bf00      	nop
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	200013a4 	.word	0x200013a4

0800b584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b58c:	f107 0308 	add.w	r3, r7, #8
 800b590:	4618      	mov	r0, r3
 800b592:	f000 f857 	bl	800b644 <prvGetNextExpireTime>
 800b596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	4619      	mov	r1, r3
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f000 f803 	bl	800b5a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5a2:	f000 f8d5 	bl	800b750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5a6:	e7f1      	b.n	800b58c <prvTimerTask+0x8>

0800b5a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5b2:	f7ff f9c9 	bl	800a948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5b6:	f107 0308 	add.w	r3, r7, #8
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 f866 	bl	800b68c <prvSampleTimeNow>
 800b5c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d130      	bne.n	800b62a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10a      	bne.n	800b5e4 <prvProcessTimerOrBlockTask+0x3c>
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d806      	bhi.n	800b5e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5d6:	f7ff f9c5 	bl	800a964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5da:	68f9      	ldr	r1, [r7, #12]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff ff91 	bl	800b504 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5e2:	e024      	b.n	800b62e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d008      	beq.n	800b5fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5ea:	4b13      	ldr	r3, [pc, #76]	; (800b638 <prvProcessTimerOrBlockTask+0x90>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bf0c      	ite	eq
 800b5f4:	2301      	moveq	r3, #1
 800b5f6:	2300      	movne	r3, #0
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <prvProcessTimerOrBlockTask+0x94>)
 800b5fe:	6818      	ldr	r0, [r3, #0]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	4619      	mov	r1, r3
 800b60a:	f7fe fe05 	bl	800a218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b60e:	f7ff f9a9 	bl	800a964 <xTaskResumeAll>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10a      	bne.n	800b62e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b618:	4b09      	ldr	r3, [pc, #36]	; (800b640 <prvProcessTimerOrBlockTask+0x98>)
 800b61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	f3bf 8f6f 	isb	sy
}
 800b628:	e001      	b.n	800b62e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b62a:	f7ff f99b 	bl	800a964 <xTaskResumeAll>
}
 800b62e:	bf00      	nop
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	200013a8 	.word	0x200013a8
 800b63c:	200013ac 	.word	0x200013ac
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b64c:	4b0e      	ldr	r3, [pc, #56]	; (800b688 <prvGetNextExpireTime+0x44>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	bf0c      	ite	eq
 800b656:	2301      	moveq	r3, #1
 800b658:	2300      	movne	r3, #0
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	461a      	mov	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d105      	bne.n	800b676 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b66a:	4b07      	ldr	r3, [pc, #28]	; (800b688 <prvGetNextExpireTime+0x44>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	e001      	b.n	800b67a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b67a:	68fb      	ldr	r3, [r7, #12]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	200013a4 	.word	0x200013a4

0800b68c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b694:	f7ff fa04 	bl	800aaa0 <xTaskGetTickCount>
 800b698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <prvSampleTimeNow+0x3c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d205      	bcs.n	800b6b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6a4:	f000 f908 	bl	800b8b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	e002      	b.n	800b6b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6b6:	4a04      	ldr	r2, [pc, #16]	; (800b6c8 <prvSampleTimeNow+0x3c>)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	200013b4 	.word	0x200013b4

0800b6cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
 800b6d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d812      	bhi.n	800b718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	1ad2      	subs	r2, r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d302      	bcc.n	800b706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b700:	2301      	movs	r3, #1
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	e01b      	b.n	800b73e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b706:	4b10      	ldr	r3, [pc, #64]	; (800b748 <prvInsertTimerInActiveList+0x7c>)
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3304      	adds	r3, #4
 800b70e:	4619      	mov	r1, r3
 800b710:	4610      	mov	r0, r2
 800b712:	f7fd ffe0 	bl	80096d6 <vListInsert>
 800b716:	e012      	b.n	800b73e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d206      	bcs.n	800b72e <prvInsertTimerInActiveList+0x62>
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	429a      	cmp	r2, r3
 800b726:	d302      	bcc.n	800b72e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b728:	2301      	movs	r3, #1
 800b72a:	617b      	str	r3, [r7, #20]
 800b72c:	e007      	b.n	800b73e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b72e:	4b07      	ldr	r3, [pc, #28]	; (800b74c <prvInsertTimerInActiveList+0x80>)
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3304      	adds	r3, #4
 800b736:	4619      	mov	r1, r3
 800b738:	4610      	mov	r0, r2
 800b73a:	f7fd ffcc 	bl	80096d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b73e:	697b      	ldr	r3, [r7, #20]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	200013a8 	.word	0x200013a8
 800b74c:	200013a4 	.word	0x200013a4

0800b750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08e      	sub	sp, #56	; 0x38
 800b754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b756:	e09d      	b.n	800b894 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	da18      	bge.n	800b790 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b75e:	1d3b      	adds	r3, r7, #4
 800b760:	3304      	adds	r3, #4
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10a      	bne.n	800b780 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	61fb      	str	r3, [r7, #28]
}
 800b77c:	bf00      	nop
 800b77e:	e7fe      	b.n	800b77e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b786:	6850      	ldr	r0, [r2, #4]
 800b788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b78a:	6892      	ldr	r2, [r2, #8]
 800b78c:	4611      	mov	r1, r2
 800b78e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	db7e      	blt.n	800b894 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d004      	beq.n	800b7ac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fd ffce 	bl	8009748 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7ac:	463b      	mov	r3, r7
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7ff ff6c 	bl	800b68c <prvSampleTimeNow>
 800b7b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b09      	cmp	r3, #9
 800b7ba:	d86a      	bhi.n	800b892 <prvProcessReceivedCommands+0x142>
 800b7bc:	a201      	add	r2, pc, #4	; (adr r2, 800b7c4 <prvProcessReceivedCommands+0x74>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7ed 	.word	0x0800b7ed
 800b7c8:	0800b7ed 	.word	0x0800b7ed
 800b7cc:	0800b7ed 	.word	0x0800b7ed
 800b7d0:	0800b895 	.word	0x0800b895
 800b7d4:	0800b849 	.word	0x0800b849
 800b7d8:	0800b881 	.word	0x0800b881
 800b7dc:	0800b7ed 	.word	0x0800b7ed
 800b7e0:	0800b7ed 	.word	0x0800b7ed
 800b7e4:	0800b895 	.word	0x0800b895
 800b7e8:	0800b849 	.word	0x0800b849
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	18d1      	adds	r1, r2, r3
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7fa:	f7ff ff67 	bl	800b6cc <prvInsertTimerInActiveList>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d047      	beq.n	800b894 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b80a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d13f      	bne.n	800b894 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	441a      	add	r2, r3
 800b81c:	2300      	movs	r3, #0
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	2300      	movs	r3, #0
 800b822:	2100      	movs	r1, #0
 800b824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b826:	f7ff fe1f 	bl	800b468 <xTimerGenericCommand>
 800b82a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d130      	bne.n	800b894 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	61bb      	str	r3, [r7, #24]
}
 800b844:	bf00      	nop
 800b846:	e7fe      	b.n	800b846 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	617b      	str	r3, [r7, #20]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	699a      	ldr	r2, [r3, #24]
 800b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b872:	18d1      	adds	r1, r2, r3
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b87a:	f7ff ff27 	bl	800b6cc <prvInsertTimerInActiveList>
					break;
 800b87e:	e009      	b.n	800b894 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b886:	2b00      	cmp	r3, #0
 800b888:	d104      	bne.n	800b894 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800b88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b88c:	f000 fbe8 	bl	800c060 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b890:	e000      	b.n	800b894 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800b892:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b894:	4b07      	ldr	r3, [pc, #28]	; (800b8b4 <prvProcessReceivedCommands+0x164>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	1d39      	adds	r1, r7, #4
 800b89a:	2200      	movs	r2, #0
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe faa1 	bl	8009de4 <xQueueReceive>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f47f af57 	bne.w	800b758 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b8aa:	bf00      	nop
 800b8ac:	bf00      	nop
 800b8ae:	3730      	adds	r7, #48	; 0x30
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	200013ac 	.word	0x200013ac

0800b8b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8be:	e045      	b.n	800b94c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8c0:	4b2c      	ldr	r3, [pc, #176]	; (800b974 <prvSwitchTimerLists+0xbc>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8ca:	4b2a      	ldr	r3, [pc, #168]	; (800b974 <prvSwitchTimerLists+0xbc>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fd ff35 	bl	8009748 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	69db      	ldr	r3, [r3, #28]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d12e      	bne.n	800b94c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	699b      	ldr	r3, [r3, #24]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d90e      	bls.n	800b91e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b90c:	4b19      	ldr	r3, [pc, #100]	; (800b974 <prvSwitchTimerLists+0xbc>)
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3304      	adds	r3, #4
 800b914:	4619      	mov	r1, r3
 800b916:	4610      	mov	r0, r2
 800b918:	f7fd fedd 	bl	80096d6 <vListInsert>
 800b91c:	e016      	b.n	800b94c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b91e:	2300      	movs	r3, #0
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	2300      	movs	r3, #0
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	2100      	movs	r1, #0
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f7ff fd9d 	bl	800b468 <xTimerGenericCommand>
 800b92e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10a      	bne.n	800b94c <prvSwitchTimerLists+0x94>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	603b      	str	r3, [r7, #0]
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b94c:	4b09      	ldr	r3, [pc, #36]	; (800b974 <prvSwitchTimerLists+0xbc>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1b4      	bne.n	800b8c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b956:	4b07      	ldr	r3, [pc, #28]	; (800b974 <prvSwitchTimerLists+0xbc>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b95c:	4b06      	ldr	r3, [pc, #24]	; (800b978 <prvSwitchTimerLists+0xc0>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a04      	ldr	r2, [pc, #16]	; (800b974 <prvSwitchTimerLists+0xbc>)
 800b962:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b964:	4a04      	ldr	r2, [pc, #16]	; (800b978 <prvSwitchTimerLists+0xc0>)
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	6013      	str	r3, [r2, #0]
}
 800b96a:	bf00      	nop
 800b96c:	3718      	adds	r7, #24
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	200013a4 	.word	0x200013a4
 800b978:	200013a8 	.word	0x200013a8

0800b97c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b982:	f000 f987 	bl	800bc94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b986:	4b15      	ldr	r3, [pc, #84]	; (800b9dc <prvCheckForValidListAndQueue+0x60>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d120      	bne.n	800b9d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b98e:	4814      	ldr	r0, [pc, #80]	; (800b9e0 <prvCheckForValidListAndQueue+0x64>)
 800b990:	f7fd fe50 	bl	8009634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b994:	4813      	ldr	r0, [pc, #76]	; (800b9e4 <prvCheckForValidListAndQueue+0x68>)
 800b996:	f7fd fe4d 	bl	8009634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b99a:	4b13      	ldr	r3, [pc, #76]	; (800b9e8 <prvCheckForValidListAndQueue+0x6c>)
 800b99c:	4a10      	ldr	r2, [pc, #64]	; (800b9e0 <prvCheckForValidListAndQueue+0x64>)
 800b99e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9a0:	4b12      	ldr	r3, [pc, #72]	; (800b9ec <prvCheckForValidListAndQueue+0x70>)
 800b9a2:	4a10      	ldr	r2, [pc, #64]	; (800b9e4 <prvCheckForValidListAndQueue+0x68>)
 800b9a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	4b11      	ldr	r3, [pc, #68]	; (800b9f0 <prvCheckForValidListAndQueue+0x74>)
 800b9ac:	4a11      	ldr	r2, [pc, #68]	; (800b9f4 <prvCheckForValidListAndQueue+0x78>)
 800b9ae:	2110      	movs	r1, #16
 800b9b0:	200a      	movs	r0, #10
 800b9b2:	f7fd ff5b 	bl	800986c <xQueueGenericCreateStatic>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	4a08      	ldr	r2, [pc, #32]	; (800b9dc <prvCheckForValidListAndQueue+0x60>)
 800b9ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9bc:	4b07      	ldr	r3, [pc, #28]	; (800b9dc <prvCheckForValidListAndQueue+0x60>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d005      	beq.n	800b9d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9c4:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <prvCheckForValidListAndQueue+0x60>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	490b      	ldr	r1, [pc, #44]	; (800b9f8 <prvCheckForValidListAndQueue+0x7c>)
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fe fbfa 	bl	800a1c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9d0:	f000 f990 	bl	800bcf4 <vPortExitCritical>
}
 800b9d4:	bf00      	nop
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	200013ac 	.word	0x200013ac
 800b9e0:	2000137c 	.word	0x2000137c
 800b9e4:	20001390 	.word	0x20001390
 800b9e8:	200013a4 	.word	0x200013a4
 800b9ec:	200013a8 	.word	0x200013a8
 800b9f0:	20001458 	.word	0x20001458
 800b9f4:	200013b8 	.word	0x200013b8
 800b9f8:	0800f0ec 	.word	0x0800f0ec

0800b9fc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b08a      	sub	sp, #40	; 0x28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ba0a:	f06f 0301 	mvn.w	r3, #1
 800ba0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba1c:	4b06      	ldr	r3, [pc, #24]	; (800ba38 <xTimerPendFunctionCallFromISR+0x3c>)
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	f107 0114 	add.w	r1, r7, #20
 800ba24:	2300      	movs	r3, #0
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	f7fe f944 	bl	8009cb4 <xQueueGenericSendFromISR>
 800ba2c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3728      	adds	r7, #40	; 0x28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	200013ac 	.word	0x200013ac

0800ba3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3b04      	subs	r3, #4
 800ba4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3b04      	subs	r3, #4
 800ba5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	f023 0201 	bic.w	r2, r3, #1
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3b04      	subs	r3, #4
 800ba6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba6c:	4a0c      	ldr	r2, [pc, #48]	; (800baa0 <pxPortInitialiseStack+0x64>)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3b14      	subs	r3, #20
 800ba76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3b04      	subs	r3, #4
 800ba82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f06f 0202 	mvn.w	r2, #2
 800ba8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3b20      	subs	r3, #32
 800ba90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba92:	68fb      	ldr	r3, [r7, #12]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	0800baa5 	.word	0x0800baa5

0800baa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800baae:	4b12      	ldr	r3, [pc, #72]	; (800baf8 <prvTaskExitError+0x54>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab6:	d00a      	beq.n	800bace <prvTaskExitError+0x2a>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	60fb      	str	r3, [r7, #12]
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <prvTaskExitError+0x28>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	60bb      	str	r3, [r7, #8]
}
 800bae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bae2:	bf00      	nop
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0fc      	beq.n	800bae4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800baea:	bf00      	nop
 800baec:	bf00      	nop
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	20000088 	.word	0x20000088
 800bafc:	00000000 	.word	0x00000000

0800bb00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb00:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <pxCurrentTCBConst2>)
 800bb02:	6819      	ldr	r1, [r3, #0]
 800bb04:	6808      	ldr	r0, [r1, #0]
 800bb06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0a:	f380 8809 	msr	PSP, r0
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f04f 0000 	mov.w	r0, #0
 800bb16:	f380 8811 	msr	BASEPRI, r0
 800bb1a:	4770      	bx	lr
 800bb1c:	f3af 8000 	nop.w

0800bb20 <pxCurrentTCBConst2>:
 800bb20:	20000e7c 	.word	0x20000e7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb24:	bf00      	nop
 800bb26:	bf00      	nop

0800bb28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb28:	4808      	ldr	r0, [pc, #32]	; (800bb4c <prvPortStartFirstTask+0x24>)
 800bb2a:	6800      	ldr	r0, [r0, #0]
 800bb2c:	6800      	ldr	r0, [r0, #0]
 800bb2e:	f380 8808 	msr	MSP, r0
 800bb32:	f04f 0000 	mov.w	r0, #0
 800bb36:	f380 8814 	msr	CONTROL, r0
 800bb3a:	b662      	cpsie	i
 800bb3c:	b661      	cpsie	f
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	df00      	svc	0
 800bb48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb4a:	bf00      	nop
 800bb4c:	e000ed08 	.word	0xe000ed08

0800bb50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb56:	4b46      	ldr	r3, [pc, #280]	; (800bc70 <xPortStartScheduler+0x120>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a46      	ldr	r2, [pc, #280]	; (800bc74 <xPortStartScheduler+0x124>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d10a      	bne.n	800bb76 <xPortStartScheduler+0x26>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	613b      	str	r3, [r7, #16]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb76:	4b3e      	ldr	r3, [pc, #248]	; (800bc70 <xPortStartScheduler+0x120>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a3f      	ldr	r2, [pc, #252]	; (800bc78 <xPortStartScheduler+0x128>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d10a      	bne.n	800bb96 <xPortStartScheduler+0x46>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	60fb      	str	r3, [r7, #12]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb96:	4b39      	ldr	r3, [pc, #228]	; (800bc7c <xPortStartScheduler+0x12c>)
 800bb98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	22ff      	movs	r2, #255	; 0xff
 800bba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	4b31      	ldr	r3, [pc, #196]	; (800bc80 <xPortStartScheduler+0x130>)
 800bbbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bbbe:	4b31      	ldr	r3, [pc, #196]	; (800bc84 <xPortStartScheduler+0x134>)
 800bbc0:	2207      	movs	r2, #7
 800bbc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbc4:	e009      	b.n	800bbda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bbc6:	4b2f      	ldr	r3, [pc, #188]	; (800bc84 <xPortStartScheduler+0x134>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	4a2d      	ldr	r2, [pc, #180]	; (800bc84 <xPortStartScheduler+0x134>)
 800bbce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbd0:	78fb      	ldrb	r3, [r7, #3]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbda:	78fb      	ldrb	r3, [r7, #3]
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe2:	2b80      	cmp	r3, #128	; 0x80
 800bbe4:	d0ef      	beq.n	800bbc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbe6:	4b27      	ldr	r3, [pc, #156]	; (800bc84 <xPortStartScheduler+0x134>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f1c3 0307 	rsb	r3, r3, #7
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	d00a      	beq.n	800bc08 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	60bb      	str	r3, [r7, #8]
}
 800bc04:	bf00      	nop
 800bc06:	e7fe      	b.n	800bc06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc08:	4b1e      	ldr	r3, [pc, #120]	; (800bc84 <xPortStartScheduler+0x134>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	021b      	lsls	r3, r3, #8
 800bc0e:	4a1d      	ldr	r2, [pc, #116]	; (800bc84 <xPortStartScheduler+0x134>)
 800bc10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc12:	4b1c      	ldr	r3, [pc, #112]	; (800bc84 <xPortStartScheduler+0x134>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc1a:	4a1a      	ldr	r2, [pc, #104]	; (800bc84 <xPortStartScheduler+0x134>)
 800bc1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc26:	4b18      	ldr	r3, [pc, #96]	; (800bc88 <xPortStartScheduler+0x138>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a17      	ldr	r2, [pc, #92]	; (800bc88 <xPortStartScheduler+0x138>)
 800bc2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc32:	4b15      	ldr	r3, [pc, #84]	; (800bc88 <xPortStartScheduler+0x138>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a14      	ldr	r2, [pc, #80]	; (800bc88 <xPortStartScheduler+0x138>)
 800bc38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc3e:	f000 f8dd 	bl	800bdfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc42:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <xPortStartScheduler+0x13c>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc48:	f000 f8fc 	bl	800be44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc4c:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <xPortStartScheduler+0x140>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a0f      	ldr	r2, [pc, #60]	; (800bc90 <xPortStartScheduler+0x140>)
 800bc52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc58:	f7ff ff66 	bl	800bb28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc5c:	f7fe ffee 	bl	800ac3c <vTaskSwitchContext>
	prvTaskExitError();
 800bc60:	f7ff ff20 	bl	800baa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	e000ed00 	.word	0xe000ed00
 800bc74:	410fc271 	.word	0x410fc271
 800bc78:	410fc270 	.word	0x410fc270
 800bc7c:	e000e400 	.word	0xe000e400
 800bc80:	200014a8 	.word	0x200014a8
 800bc84:	200014ac 	.word	0x200014ac
 800bc88:	e000ed20 	.word	0xe000ed20
 800bc8c:	20000088 	.word	0x20000088
 800bc90:	e000ef34 	.word	0xe000ef34

0800bc94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	607b      	str	r3, [r7, #4]
}
 800bcac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bcae:	4b0f      	ldr	r3, [pc, #60]	; (800bcec <vPortEnterCritical+0x58>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	4a0d      	ldr	r2, [pc, #52]	; (800bcec <vPortEnterCritical+0x58>)
 800bcb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bcb8:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <vPortEnterCritical+0x58>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d10f      	bne.n	800bce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bcc0:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <vPortEnterCritical+0x5c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00a      	beq.n	800bce0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	603b      	str	r3, [r7, #0]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <vPortEnterCritical+0x4a>
	}
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	20000088 	.word	0x20000088
 800bcf0:	e000ed04 	.word	0xe000ed04

0800bcf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcfa:	4b12      	ldr	r3, [pc, #72]	; (800bd44 <vPortExitCritical+0x50>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10a      	bne.n	800bd18 <vPortExitCritical+0x24>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	607b      	str	r3, [r7, #4]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd18:	4b0a      	ldr	r3, [pc, #40]	; (800bd44 <vPortExitCritical+0x50>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	4a09      	ldr	r2, [pc, #36]	; (800bd44 <vPortExitCritical+0x50>)
 800bd20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd22:	4b08      	ldr	r3, [pc, #32]	; (800bd44 <vPortExitCritical+0x50>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d105      	bne.n	800bd36 <vPortExitCritical+0x42>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	f383 8811 	msr	BASEPRI, r3
}
 800bd34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd36:	bf00      	nop
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	20000088 	.word	0x20000088
	...

0800bd50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd50:	f3ef 8009 	mrs	r0, PSP
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	4b15      	ldr	r3, [pc, #84]	; (800bdb0 <pxCurrentTCBConst>)
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	f01e 0f10 	tst.w	lr, #16
 800bd60:	bf08      	it	eq
 800bd62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6a:	6010      	str	r0, [r2, #0]
 800bd6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd74:	f380 8811 	msr	BASEPRI, r0
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f7fe ff5c 	bl	800ac3c <vTaskSwitchContext>
 800bd84:	f04f 0000 	mov.w	r0, #0
 800bd88:	f380 8811 	msr	BASEPRI, r0
 800bd8c:	bc09      	pop	{r0, r3}
 800bd8e:	6819      	ldr	r1, [r3, #0]
 800bd90:	6808      	ldr	r0, [r1, #0]
 800bd92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd96:	f01e 0f10 	tst.w	lr, #16
 800bd9a:	bf08      	it	eq
 800bd9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bda0:	f380 8809 	msr	PSP, r0
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	f3af 8000 	nop.w

0800bdb0 <pxCurrentTCBConst>:
 800bdb0:	20000e7c 	.word	0x20000e7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop

0800bdb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	607b      	str	r3, [r7, #4]
}
 800bdd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdd2:	f7fe fe75 	bl	800aac0 <xTaskIncrementTick>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d003      	beq.n	800bde4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bddc:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <SysTick_Handler+0x40>)
 800bdde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	2300      	movs	r3, #0
 800bde6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	f383 8811 	msr	BASEPRI, r3
}
 800bdee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdf0:	bf00      	nop
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	e000ed04 	.word	0xe000ed04

0800bdfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <vPortSetupTimerInterrupt+0x34>)
 800be02:	2200      	movs	r2, #0
 800be04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be06:	4b0b      	ldr	r3, [pc, #44]	; (800be34 <vPortSetupTimerInterrupt+0x38>)
 800be08:	2200      	movs	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be0c:	4b0a      	ldr	r3, [pc, #40]	; (800be38 <vPortSetupTimerInterrupt+0x3c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a0a      	ldr	r2, [pc, #40]	; (800be3c <vPortSetupTimerInterrupt+0x40>)
 800be12:	fba2 2303 	umull	r2, r3, r2, r3
 800be16:	099b      	lsrs	r3, r3, #6
 800be18:	4a09      	ldr	r2, [pc, #36]	; (800be40 <vPortSetupTimerInterrupt+0x44>)
 800be1a:	3b01      	subs	r3, #1
 800be1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be1e:	4b04      	ldr	r3, [pc, #16]	; (800be30 <vPortSetupTimerInterrupt+0x34>)
 800be20:	2207      	movs	r2, #7
 800be22:	601a      	str	r2, [r3, #0]
}
 800be24:	bf00      	nop
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	e000e010 	.word	0xe000e010
 800be34:	e000e018 	.word	0xe000e018
 800be38:	20000060 	.word	0x20000060
 800be3c:	10624dd3 	.word	0x10624dd3
 800be40:	e000e014 	.word	0xe000e014

0800be44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be54 <vPortEnableVFP+0x10>
 800be48:	6801      	ldr	r1, [r0, #0]
 800be4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be4e:	6001      	str	r1, [r0, #0]
 800be50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be52:	bf00      	nop
 800be54:	e000ed88 	.word	0xe000ed88

0800be58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be5e:	f3ef 8305 	mrs	r3, IPSR
 800be62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2b0f      	cmp	r3, #15
 800be68:	d914      	bls.n	800be94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be6a:	4a17      	ldr	r2, [pc, #92]	; (800bec8 <vPortValidateInterruptPriority+0x70>)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4413      	add	r3, r2
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be74:	4b15      	ldr	r3, [pc, #84]	; (800becc <vPortValidateInterruptPriority+0x74>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	7afa      	ldrb	r2, [r7, #11]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d20a      	bcs.n	800be94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	607b      	str	r3, [r7, #4]
}
 800be90:	bf00      	nop
 800be92:	e7fe      	b.n	800be92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be94:	4b0e      	ldr	r3, [pc, #56]	; (800bed0 <vPortValidateInterruptPriority+0x78>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be9c:	4b0d      	ldr	r3, [pc, #52]	; (800bed4 <vPortValidateInterruptPriority+0x7c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d90a      	bls.n	800beba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	603b      	str	r3, [r7, #0]
}
 800beb6:	bf00      	nop
 800beb8:	e7fe      	b.n	800beb8 <vPortValidateInterruptPriority+0x60>
	}
 800beba:	bf00      	nop
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	e000e3f0 	.word	0xe000e3f0
 800becc:	200014a8 	.word	0x200014a8
 800bed0:	e000ed0c 	.word	0xe000ed0c
 800bed4:	200014ac 	.word	0x200014ac

0800bed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08a      	sub	sp, #40	; 0x28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bee0:	2300      	movs	r3, #0
 800bee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bee4:	f7fe fd30 	bl	800a948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bee8:	4b58      	ldr	r3, [pc, #352]	; (800c04c <pvPortMalloc+0x174>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bef0:	f000 f910 	bl	800c114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bef4:	4b56      	ldr	r3, [pc, #344]	; (800c050 <pvPortMalloc+0x178>)
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4013      	ands	r3, r2
 800befc:	2b00      	cmp	r3, #0
 800befe:	f040 808e 	bne.w	800c01e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d01d      	beq.n	800bf44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf08:	2208      	movs	r2, #8
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f003 0307 	and.w	r3, r3, #7
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d014      	beq.n	800bf44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f023 0307 	bic.w	r3, r3, #7
 800bf20:	3308      	adds	r3, #8
 800bf22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f003 0307 	and.w	r3, r3, #7
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00a      	beq.n	800bf44 <pvPortMalloc+0x6c>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	617b      	str	r3, [r7, #20]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d069      	beq.n	800c01e <pvPortMalloc+0x146>
 800bf4a:	4b42      	ldr	r3, [pc, #264]	; (800c054 <pvPortMalloc+0x17c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d864      	bhi.n	800c01e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf54:	4b40      	ldr	r3, [pc, #256]	; (800c058 <pvPortMalloc+0x180>)
 800bf56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf58:	4b3f      	ldr	r3, [pc, #252]	; (800c058 <pvPortMalloc+0x180>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf5e:	e004      	b.n	800bf6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d903      	bls.n	800bf7c <pvPortMalloc+0xa4>
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1f1      	bne.n	800bf60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf7c:	4b33      	ldr	r3, [pc, #204]	; (800c04c <pvPortMalloc+0x174>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d04b      	beq.n	800c01e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2208      	movs	r2, #8
 800bf8c:	4413      	add	r3, r2
 800bf8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	685a      	ldr	r2, [r3, #4]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	1ad2      	subs	r2, r2, r3
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d91f      	bls.n	800bfe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bfa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4413      	add	r3, r2
 800bfae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	f003 0307 	and.w	r3, r3, #7
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00a      	beq.n	800bfd0 <pvPortMalloc+0xf8>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	613b      	str	r3, [r7, #16]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	1ad2      	subs	r2, r2, r3
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfe2:	69b8      	ldr	r0, [r7, #24]
 800bfe4:	f000 f8f8 	bl	800c1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfe8:	4b1a      	ldr	r3, [pc, #104]	; (800c054 <pvPortMalloc+0x17c>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	4a18      	ldr	r2, [pc, #96]	; (800c054 <pvPortMalloc+0x17c>)
 800bff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bff6:	4b17      	ldr	r3, [pc, #92]	; (800c054 <pvPortMalloc+0x17c>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	4b18      	ldr	r3, [pc, #96]	; (800c05c <pvPortMalloc+0x184>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d203      	bcs.n	800c00a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c002:	4b14      	ldr	r3, [pc, #80]	; (800c054 <pvPortMalloc+0x17c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a15      	ldr	r2, [pc, #84]	; (800c05c <pvPortMalloc+0x184>)
 800c008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	4b10      	ldr	r3, [pc, #64]	; (800c050 <pvPortMalloc+0x178>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	431a      	orrs	r2, r3
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c01e:	f7fe fca1 	bl	800a964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	f003 0307 	and.w	r3, r3, #7
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00a      	beq.n	800c042 <pvPortMalloc+0x16a>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	60fb      	str	r3, [r7, #12]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <pvPortMalloc+0x168>
	return pvReturn;
 800c042:	69fb      	ldr	r3, [r7, #28]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3728      	adds	r7, #40	; 0x28
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	200028b8 	.word	0x200028b8
 800c050:	200028c4 	.word	0x200028c4
 800c054:	200028bc 	.word	0x200028bc
 800c058:	200028b0 	.word	0x200028b0
 800c05c:	200028c0 	.word	0x200028c0

0800c060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d048      	beq.n	800c104 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c072:	2308      	movs	r3, #8
 800c074:	425b      	negs	r3, r3
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	4413      	add	r3, r2
 800c07a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	685a      	ldr	r2, [r3, #4]
 800c084:	4b21      	ldr	r3, [pc, #132]	; (800c10c <vPortFree+0xac>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4013      	ands	r3, r2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <vPortFree+0x44>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	60fb      	str	r3, [r7, #12]
}
 800c0a0:	bf00      	nop
 800c0a2:	e7fe      	b.n	800c0a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00a      	beq.n	800c0c2 <vPortFree+0x62>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	60bb      	str	r3, [r7, #8]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	4b11      	ldr	r3, [pc, #68]	; (800c10c <vPortFree+0xac>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d019      	beq.n	800c104 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d115      	bne.n	800c104 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <vPortFree+0xac>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	43db      	mvns	r3, r3
 800c0e2:	401a      	ands	r2, r3
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0e8:	f7fe fc2e 	bl	800a948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <vPortFree+0xb0>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	4a06      	ldr	r2, [pc, #24]	; (800c110 <vPortFree+0xb0>)
 800c0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0fa:	6938      	ldr	r0, [r7, #16]
 800c0fc:	f000 f86c 	bl	800c1d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c100:	f7fe fc30 	bl	800a964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c104:	bf00      	nop
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	200028c4 	.word	0x200028c4
 800c110:	200028bc 	.word	0x200028bc

0800c114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c11a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c120:	4b27      	ldr	r3, [pc, #156]	; (800c1c0 <prvHeapInit+0xac>)
 800c122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3307      	adds	r3, #7
 800c132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f023 0307 	bic.w	r3, r3, #7
 800c13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	4a1f      	ldr	r2, [pc, #124]	; (800c1c0 <prvHeapInit+0xac>)
 800c144:	4413      	add	r3, r2
 800c146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c14c:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <prvHeapInit+0xb0>)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <prvHeapInit+0xb0>)
 800c154:	2200      	movs	r2, #0
 800c156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	4413      	add	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c160:	2208      	movs	r2, #8
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0307 	bic.w	r3, r3, #7
 800c16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4a15      	ldr	r2, [pc, #84]	; (800c1c8 <prvHeapInit+0xb4>)
 800c174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c176:	4b14      	ldr	r3, [pc, #80]	; (800c1c8 <prvHeapInit+0xb4>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2200      	movs	r2, #0
 800c17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c17e:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <prvHeapInit+0xb4>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <prvHeapInit+0xb4>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	4a0a      	ldr	r2, [pc, #40]	; (800c1cc <prvHeapInit+0xb8>)
 800c1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	4a09      	ldr	r2, [pc, #36]	; (800c1d0 <prvHeapInit+0xbc>)
 800c1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1ac:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <prvHeapInit+0xc0>)
 800c1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c1b2:	601a      	str	r2, [r3, #0]
}
 800c1b4:	bf00      	nop
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	200014b0 	.word	0x200014b0
 800c1c4:	200028b0 	.word	0x200028b0
 800c1c8:	200028b8 	.word	0x200028b8
 800c1cc:	200028c0 	.word	0x200028c0
 800c1d0:	200028bc 	.word	0x200028bc
 800c1d4:	200028c4 	.word	0x200028c4

0800c1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1e0:	4b28      	ldr	r3, [pc, #160]	; (800c284 <prvInsertBlockIntoFreeList+0xac>)
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e002      	b.n	800c1ec <prvInsertBlockIntoFreeList+0x14>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d8f7      	bhi.n	800c1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	4413      	add	r3, r2
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	429a      	cmp	r2, r3
 800c206:	d108      	bne.n	800c21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	441a      	add	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	441a      	add	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d118      	bne.n	800c260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b15      	ldr	r3, [pc, #84]	; (800c288 <prvInsertBlockIntoFreeList+0xb0>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d00d      	beq.n	800c256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	441a      	add	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	e008      	b.n	800c268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <prvInsertBlockIntoFreeList+0xb0>)
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e003      	b.n	800c268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d002      	beq.n	800c276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c276:	bf00      	nop
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	200028b0 	.word	0x200028b0
 800c288:	200028b8 	.word	0x200028b8

0800c28c <__cvt>:
 800c28c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c290:	ec55 4b10 	vmov	r4, r5, d0
 800c294:	2d00      	cmp	r5, #0
 800c296:	460e      	mov	r6, r1
 800c298:	4619      	mov	r1, r3
 800c29a:	462b      	mov	r3, r5
 800c29c:	bfbb      	ittet	lt
 800c29e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c2a2:	461d      	movlt	r5, r3
 800c2a4:	2300      	movge	r3, #0
 800c2a6:	232d      	movlt	r3, #45	; 0x2d
 800c2a8:	700b      	strb	r3, [r1, #0]
 800c2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c2b0:	4691      	mov	r9, r2
 800c2b2:	f023 0820 	bic.w	r8, r3, #32
 800c2b6:	bfbc      	itt	lt
 800c2b8:	4622      	movlt	r2, r4
 800c2ba:	4614      	movlt	r4, r2
 800c2bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2c0:	d005      	beq.n	800c2ce <__cvt+0x42>
 800c2c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c2c6:	d100      	bne.n	800c2ca <__cvt+0x3e>
 800c2c8:	3601      	adds	r6, #1
 800c2ca:	2102      	movs	r1, #2
 800c2cc:	e000      	b.n	800c2d0 <__cvt+0x44>
 800c2ce:	2103      	movs	r1, #3
 800c2d0:	ab03      	add	r3, sp, #12
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	ab02      	add	r3, sp, #8
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	ec45 4b10 	vmov	d0, r4, r5
 800c2dc:	4653      	mov	r3, sl
 800c2de:	4632      	mov	r2, r6
 800c2e0:	f000 ffae 	bl	800d240 <_dtoa_r>
 800c2e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	d102      	bne.n	800c2f2 <__cvt+0x66>
 800c2ec:	f019 0f01 	tst.w	r9, #1
 800c2f0:	d022      	beq.n	800c338 <__cvt+0xac>
 800c2f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2f6:	eb07 0906 	add.w	r9, r7, r6
 800c2fa:	d110      	bne.n	800c31e <__cvt+0x92>
 800c2fc:	783b      	ldrb	r3, [r7, #0]
 800c2fe:	2b30      	cmp	r3, #48	; 0x30
 800c300:	d10a      	bne.n	800c318 <__cvt+0x8c>
 800c302:	2200      	movs	r2, #0
 800c304:	2300      	movs	r3, #0
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f4 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c30e:	b918      	cbnz	r0, 800c318 <__cvt+0x8c>
 800c310:	f1c6 0601 	rsb	r6, r6, #1
 800c314:	f8ca 6000 	str.w	r6, [sl]
 800c318:	f8da 3000 	ldr.w	r3, [sl]
 800c31c:	4499      	add	r9, r3
 800c31e:	2200      	movs	r2, #0
 800c320:	2300      	movs	r3, #0
 800c322:	4620      	mov	r0, r4
 800c324:	4629      	mov	r1, r5
 800c326:	f7f4 fbd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c32a:	b108      	cbz	r0, 800c330 <__cvt+0xa4>
 800c32c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c330:	2230      	movs	r2, #48	; 0x30
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	454b      	cmp	r3, r9
 800c336:	d307      	bcc.n	800c348 <__cvt+0xbc>
 800c338:	9b03      	ldr	r3, [sp, #12]
 800c33a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c33c:	1bdb      	subs	r3, r3, r7
 800c33e:	4638      	mov	r0, r7
 800c340:	6013      	str	r3, [r2, #0]
 800c342:	b004      	add	sp, #16
 800c344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c348:	1c59      	adds	r1, r3, #1
 800c34a:	9103      	str	r1, [sp, #12]
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	e7f0      	b.n	800c332 <__cvt+0xa6>

0800c350 <__exponent>:
 800c350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c352:	4603      	mov	r3, r0
 800c354:	2900      	cmp	r1, #0
 800c356:	bfb8      	it	lt
 800c358:	4249      	neglt	r1, r1
 800c35a:	f803 2b02 	strb.w	r2, [r3], #2
 800c35e:	bfb4      	ite	lt
 800c360:	222d      	movlt	r2, #45	; 0x2d
 800c362:	222b      	movge	r2, #43	; 0x2b
 800c364:	2909      	cmp	r1, #9
 800c366:	7042      	strb	r2, [r0, #1]
 800c368:	dd2a      	ble.n	800c3c0 <__exponent+0x70>
 800c36a:	f10d 0207 	add.w	r2, sp, #7
 800c36e:	4617      	mov	r7, r2
 800c370:	260a      	movs	r6, #10
 800c372:	4694      	mov	ip, r2
 800c374:	fb91 f5f6 	sdiv	r5, r1, r6
 800c378:	fb06 1415 	mls	r4, r6, r5, r1
 800c37c:	3430      	adds	r4, #48	; 0x30
 800c37e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c382:	460c      	mov	r4, r1
 800c384:	2c63      	cmp	r4, #99	; 0x63
 800c386:	f102 32ff 	add.w	r2, r2, #4294967295
 800c38a:	4629      	mov	r1, r5
 800c38c:	dcf1      	bgt.n	800c372 <__exponent+0x22>
 800c38e:	3130      	adds	r1, #48	; 0x30
 800c390:	f1ac 0402 	sub.w	r4, ip, #2
 800c394:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c398:	1c41      	adds	r1, r0, #1
 800c39a:	4622      	mov	r2, r4
 800c39c:	42ba      	cmp	r2, r7
 800c39e:	d30a      	bcc.n	800c3b6 <__exponent+0x66>
 800c3a0:	f10d 0209 	add.w	r2, sp, #9
 800c3a4:	eba2 020c 	sub.w	r2, r2, ip
 800c3a8:	42bc      	cmp	r4, r7
 800c3aa:	bf88      	it	hi
 800c3ac:	2200      	movhi	r2, #0
 800c3ae:	4413      	add	r3, r2
 800c3b0:	1a18      	subs	r0, r3, r0
 800c3b2:	b003      	add	sp, #12
 800c3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c3ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c3be:	e7ed      	b.n	800c39c <__exponent+0x4c>
 800c3c0:	2330      	movs	r3, #48	; 0x30
 800c3c2:	3130      	adds	r1, #48	; 0x30
 800c3c4:	7083      	strb	r3, [r0, #2]
 800c3c6:	70c1      	strb	r1, [r0, #3]
 800c3c8:	1d03      	adds	r3, r0, #4
 800c3ca:	e7f1      	b.n	800c3b0 <__exponent+0x60>

0800c3cc <_printf_float>:
 800c3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d0:	ed2d 8b02 	vpush	{d8}
 800c3d4:	b08d      	sub	sp, #52	; 0x34
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c3dc:	4616      	mov	r6, r2
 800c3de:	461f      	mov	r7, r3
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	f000 fdc9 	bl	800cf78 <_localeconv_r>
 800c3e6:	f8d0 a000 	ldr.w	sl, [r0]
 800c3ea:	4650      	mov	r0, sl
 800c3ec:	f7f3 ff48 	bl	8000280 <strlen>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	9305      	str	r3, [sp, #20]
 800c3f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c400:	3307      	adds	r3, #7
 800c402:	f023 0307 	bic.w	r3, r3, #7
 800c406:	f103 0208 	add.w	r2, r3, #8
 800c40a:	f8c8 2000 	str.w	r2, [r8]
 800c40e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c416:	9307      	str	r3, [sp, #28]
 800c418:	f8cd 8018 	str.w	r8, [sp, #24]
 800c41c:	ee08 0a10 	vmov	s16, r0
 800c420:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c428:	4b9e      	ldr	r3, [pc, #632]	; (800c6a4 <_printf_float+0x2d8>)
 800c42a:	f04f 32ff 	mov.w	r2, #4294967295
 800c42e:	f7f4 fb85 	bl	8000b3c <__aeabi_dcmpun>
 800c432:	bb88      	cbnz	r0, 800c498 <_printf_float+0xcc>
 800c434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c438:	4b9a      	ldr	r3, [pc, #616]	; (800c6a4 <_printf_float+0x2d8>)
 800c43a:	f04f 32ff 	mov.w	r2, #4294967295
 800c43e:	f7f4 fb5f 	bl	8000b00 <__aeabi_dcmple>
 800c442:	bb48      	cbnz	r0, 800c498 <_printf_float+0xcc>
 800c444:	2200      	movs	r2, #0
 800c446:	2300      	movs	r3, #0
 800c448:	4640      	mov	r0, r8
 800c44a:	4649      	mov	r1, r9
 800c44c:	f7f4 fb4e 	bl	8000aec <__aeabi_dcmplt>
 800c450:	b110      	cbz	r0, 800c458 <_printf_float+0x8c>
 800c452:	232d      	movs	r3, #45	; 0x2d
 800c454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c458:	4a93      	ldr	r2, [pc, #588]	; (800c6a8 <_printf_float+0x2dc>)
 800c45a:	4b94      	ldr	r3, [pc, #592]	; (800c6ac <_printf_float+0x2e0>)
 800c45c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c460:	bf94      	ite	ls
 800c462:	4690      	movls	r8, r2
 800c464:	4698      	movhi	r8, r3
 800c466:	2303      	movs	r3, #3
 800c468:	6123      	str	r3, [r4, #16]
 800c46a:	9b05      	ldr	r3, [sp, #20]
 800c46c:	f023 0304 	bic.w	r3, r3, #4
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	f04f 0900 	mov.w	r9, #0
 800c476:	9700      	str	r7, [sp, #0]
 800c478:	4633      	mov	r3, r6
 800c47a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c47c:	4621      	mov	r1, r4
 800c47e:	4628      	mov	r0, r5
 800c480:	f000 f9da 	bl	800c838 <_printf_common>
 800c484:	3001      	adds	r0, #1
 800c486:	f040 8090 	bne.w	800c5aa <_printf_float+0x1de>
 800c48a:	f04f 30ff 	mov.w	r0, #4294967295
 800c48e:	b00d      	add	sp, #52	; 0x34
 800c490:	ecbd 8b02 	vpop	{d8}
 800c494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c498:	4642      	mov	r2, r8
 800c49a:	464b      	mov	r3, r9
 800c49c:	4640      	mov	r0, r8
 800c49e:	4649      	mov	r1, r9
 800c4a0:	f7f4 fb4c 	bl	8000b3c <__aeabi_dcmpun>
 800c4a4:	b140      	cbz	r0, 800c4b8 <_printf_float+0xec>
 800c4a6:	464b      	mov	r3, r9
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	bfbc      	itt	lt
 800c4ac:	232d      	movlt	r3, #45	; 0x2d
 800c4ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c4b2:	4a7f      	ldr	r2, [pc, #508]	; (800c6b0 <_printf_float+0x2e4>)
 800c4b4:	4b7f      	ldr	r3, [pc, #508]	; (800c6b4 <_printf_float+0x2e8>)
 800c4b6:	e7d1      	b.n	800c45c <_printf_float+0x90>
 800c4b8:	6863      	ldr	r3, [r4, #4]
 800c4ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c4be:	9206      	str	r2, [sp, #24]
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	d13f      	bne.n	800c544 <_printf_float+0x178>
 800c4c4:	2306      	movs	r3, #6
 800c4c6:	6063      	str	r3, [r4, #4]
 800c4c8:	9b05      	ldr	r3, [sp, #20]
 800c4ca:	6861      	ldr	r1, [r4, #4]
 800c4cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	9303      	str	r3, [sp, #12]
 800c4d4:	ab0a      	add	r3, sp, #40	; 0x28
 800c4d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c4da:	ab09      	add	r3, sp, #36	; 0x24
 800c4dc:	ec49 8b10 	vmov	d0, r8, r9
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	6022      	str	r2, [r4, #0]
 800c4e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f7ff fecf 	bl	800c28c <__cvt>
 800c4ee:	9b06      	ldr	r3, [sp, #24]
 800c4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4f2:	2b47      	cmp	r3, #71	; 0x47
 800c4f4:	4680      	mov	r8, r0
 800c4f6:	d108      	bne.n	800c50a <_printf_float+0x13e>
 800c4f8:	1cc8      	adds	r0, r1, #3
 800c4fa:	db02      	blt.n	800c502 <_printf_float+0x136>
 800c4fc:	6863      	ldr	r3, [r4, #4]
 800c4fe:	4299      	cmp	r1, r3
 800c500:	dd41      	ble.n	800c586 <_printf_float+0x1ba>
 800c502:	f1ab 0302 	sub.w	r3, fp, #2
 800c506:	fa5f fb83 	uxtb.w	fp, r3
 800c50a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c50e:	d820      	bhi.n	800c552 <_printf_float+0x186>
 800c510:	3901      	subs	r1, #1
 800c512:	465a      	mov	r2, fp
 800c514:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c518:	9109      	str	r1, [sp, #36]	; 0x24
 800c51a:	f7ff ff19 	bl	800c350 <__exponent>
 800c51e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c520:	1813      	adds	r3, r2, r0
 800c522:	2a01      	cmp	r2, #1
 800c524:	4681      	mov	r9, r0
 800c526:	6123      	str	r3, [r4, #16]
 800c528:	dc02      	bgt.n	800c530 <_printf_float+0x164>
 800c52a:	6822      	ldr	r2, [r4, #0]
 800c52c:	07d2      	lsls	r2, r2, #31
 800c52e:	d501      	bpl.n	800c534 <_printf_float+0x168>
 800c530:	3301      	adds	r3, #1
 800c532:	6123      	str	r3, [r4, #16]
 800c534:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d09c      	beq.n	800c476 <_printf_float+0xaa>
 800c53c:	232d      	movs	r3, #45	; 0x2d
 800c53e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c542:	e798      	b.n	800c476 <_printf_float+0xaa>
 800c544:	9a06      	ldr	r2, [sp, #24]
 800c546:	2a47      	cmp	r2, #71	; 0x47
 800c548:	d1be      	bne.n	800c4c8 <_printf_float+0xfc>
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1bc      	bne.n	800c4c8 <_printf_float+0xfc>
 800c54e:	2301      	movs	r3, #1
 800c550:	e7b9      	b.n	800c4c6 <_printf_float+0xfa>
 800c552:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c556:	d118      	bne.n	800c58a <_printf_float+0x1be>
 800c558:	2900      	cmp	r1, #0
 800c55a:	6863      	ldr	r3, [r4, #4]
 800c55c:	dd0b      	ble.n	800c576 <_printf_float+0x1aa>
 800c55e:	6121      	str	r1, [r4, #16]
 800c560:	b913      	cbnz	r3, 800c568 <_printf_float+0x19c>
 800c562:	6822      	ldr	r2, [r4, #0]
 800c564:	07d0      	lsls	r0, r2, #31
 800c566:	d502      	bpl.n	800c56e <_printf_float+0x1a2>
 800c568:	3301      	adds	r3, #1
 800c56a:	440b      	add	r3, r1
 800c56c:	6123      	str	r3, [r4, #16]
 800c56e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c570:	f04f 0900 	mov.w	r9, #0
 800c574:	e7de      	b.n	800c534 <_printf_float+0x168>
 800c576:	b913      	cbnz	r3, 800c57e <_printf_float+0x1b2>
 800c578:	6822      	ldr	r2, [r4, #0]
 800c57a:	07d2      	lsls	r2, r2, #31
 800c57c:	d501      	bpl.n	800c582 <_printf_float+0x1b6>
 800c57e:	3302      	adds	r3, #2
 800c580:	e7f4      	b.n	800c56c <_printf_float+0x1a0>
 800c582:	2301      	movs	r3, #1
 800c584:	e7f2      	b.n	800c56c <_printf_float+0x1a0>
 800c586:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c58a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c58c:	4299      	cmp	r1, r3
 800c58e:	db05      	blt.n	800c59c <_printf_float+0x1d0>
 800c590:	6823      	ldr	r3, [r4, #0]
 800c592:	6121      	str	r1, [r4, #16]
 800c594:	07d8      	lsls	r0, r3, #31
 800c596:	d5ea      	bpl.n	800c56e <_printf_float+0x1a2>
 800c598:	1c4b      	adds	r3, r1, #1
 800c59a:	e7e7      	b.n	800c56c <_printf_float+0x1a0>
 800c59c:	2900      	cmp	r1, #0
 800c59e:	bfd4      	ite	le
 800c5a0:	f1c1 0202 	rsble	r2, r1, #2
 800c5a4:	2201      	movgt	r2, #1
 800c5a6:	4413      	add	r3, r2
 800c5a8:	e7e0      	b.n	800c56c <_printf_float+0x1a0>
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	055a      	lsls	r2, r3, #21
 800c5ae:	d407      	bmi.n	800c5c0 <_printf_float+0x1f4>
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	4642      	mov	r2, r8
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	47b8      	blx	r7
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	d12c      	bne.n	800c618 <_printf_float+0x24c>
 800c5be:	e764      	b.n	800c48a <_printf_float+0xbe>
 800c5c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5c4:	f240 80e0 	bls.w	800c788 <_printf_float+0x3bc>
 800c5c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f7f4 fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d034      	beq.n	800c642 <_printf_float+0x276>
 800c5d8:	4a37      	ldr	r2, [pc, #220]	; (800c6b8 <_printf_float+0x2ec>)
 800c5da:	2301      	movs	r3, #1
 800c5dc:	4631      	mov	r1, r6
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b8      	blx	r7
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	f43f af51 	beq.w	800c48a <_printf_float+0xbe>
 800c5e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	db02      	blt.n	800c5f6 <_printf_float+0x22a>
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	07d8      	lsls	r0, r3, #31
 800c5f4:	d510      	bpl.n	800c618 <_printf_float+0x24c>
 800c5f6:	ee18 3a10 	vmov	r3, s16
 800c5fa:	4652      	mov	r2, sl
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	4628      	mov	r0, r5
 800c600:	47b8      	blx	r7
 800c602:	3001      	adds	r0, #1
 800c604:	f43f af41 	beq.w	800c48a <_printf_float+0xbe>
 800c608:	f04f 0800 	mov.w	r8, #0
 800c60c:	f104 091a 	add.w	r9, r4, #26
 800c610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c612:	3b01      	subs	r3, #1
 800c614:	4543      	cmp	r3, r8
 800c616:	dc09      	bgt.n	800c62c <_printf_float+0x260>
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	079b      	lsls	r3, r3, #30
 800c61c:	f100 8107 	bmi.w	800c82e <_printf_float+0x462>
 800c620:	68e0      	ldr	r0, [r4, #12]
 800c622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c624:	4298      	cmp	r0, r3
 800c626:	bfb8      	it	lt
 800c628:	4618      	movlt	r0, r3
 800c62a:	e730      	b.n	800c48e <_printf_float+0xc2>
 800c62c:	2301      	movs	r3, #1
 800c62e:	464a      	mov	r2, r9
 800c630:	4631      	mov	r1, r6
 800c632:	4628      	mov	r0, r5
 800c634:	47b8      	blx	r7
 800c636:	3001      	adds	r0, #1
 800c638:	f43f af27 	beq.w	800c48a <_printf_float+0xbe>
 800c63c:	f108 0801 	add.w	r8, r8, #1
 800c640:	e7e6      	b.n	800c610 <_printf_float+0x244>
 800c642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c644:	2b00      	cmp	r3, #0
 800c646:	dc39      	bgt.n	800c6bc <_printf_float+0x2f0>
 800c648:	4a1b      	ldr	r2, [pc, #108]	; (800c6b8 <_printf_float+0x2ec>)
 800c64a:	2301      	movs	r3, #1
 800c64c:	4631      	mov	r1, r6
 800c64e:	4628      	mov	r0, r5
 800c650:	47b8      	blx	r7
 800c652:	3001      	adds	r0, #1
 800c654:	f43f af19 	beq.w	800c48a <_printf_float+0xbe>
 800c658:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c65c:	4313      	orrs	r3, r2
 800c65e:	d102      	bne.n	800c666 <_printf_float+0x29a>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	07d9      	lsls	r1, r3, #31
 800c664:	d5d8      	bpl.n	800c618 <_printf_float+0x24c>
 800c666:	ee18 3a10 	vmov	r3, s16
 800c66a:	4652      	mov	r2, sl
 800c66c:	4631      	mov	r1, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	47b8      	blx	r7
 800c672:	3001      	adds	r0, #1
 800c674:	f43f af09 	beq.w	800c48a <_printf_float+0xbe>
 800c678:	f04f 0900 	mov.w	r9, #0
 800c67c:	f104 0a1a 	add.w	sl, r4, #26
 800c680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c682:	425b      	negs	r3, r3
 800c684:	454b      	cmp	r3, r9
 800c686:	dc01      	bgt.n	800c68c <_printf_float+0x2c0>
 800c688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c68a:	e792      	b.n	800c5b2 <_printf_float+0x1e6>
 800c68c:	2301      	movs	r3, #1
 800c68e:	4652      	mov	r2, sl
 800c690:	4631      	mov	r1, r6
 800c692:	4628      	mov	r0, r5
 800c694:	47b8      	blx	r7
 800c696:	3001      	adds	r0, #1
 800c698:	f43f aef7 	beq.w	800c48a <_printf_float+0xbe>
 800c69c:	f109 0901 	add.w	r9, r9, #1
 800c6a0:	e7ee      	b.n	800c680 <_printf_float+0x2b4>
 800c6a2:	bf00      	nop
 800c6a4:	7fefffff 	.word	0x7fefffff
 800c6a8:	0800f1ec 	.word	0x0800f1ec
 800c6ac:	0800f1f0 	.word	0x0800f1f0
 800c6b0:	0800f1f4 	.word	0x0800f1f4
 800c6b4:	0800f1f8 	.word	0x0800f1f8
 800c6b8:	0800f1fc 	.word	0x0800f1fc
 800c6bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	bfa8      	it	ge
 800c6c4:	461a      	movge	r2, r3
 800c6c6:	2a00      	cmp	r2, #0
 800c6c8:	4691      	mov	r9, r2
 800c6ca:	dc37      	bgt.n	800c73c <_printf_float+0x370>
 800c6cc:	f04f 0b00 	mov.w	fp, #0
 800c6d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6d4:	f104 021a 	add.w	r2, r4, #26
 800c6d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6da:	9305      	str	r3, [sp, #20]
 800c6dc:	eba3 0309 	sub.w	r3, r3, r9
 800c6e0:	455b      	cmp	r3, fp
 800c6e2:	dc33      	bgt.n	800c74c <_printf_float+0x380>
 800c6e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	db3b      	blt.n	800c764 <_printf_float+0x398>
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	07da      	lsls	r2, r3, #31
 800c6f0:	d438      	bmi.n	800c764 <_printf_float+0x398>
 800c6f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c6f6:	eba2 0903 	sub.w	r9, r2, r3
 800c6fa:	9b05      	ldr	r3, [sp, #20]
 800c6fc:	1ad2      	subs	r2, r2, r3
 800c6fe:	4591      	cmp	r9, r2
 800c700:	bfa8      	it	ge
 800c702:	4691      	movge	r9, r2
 800c704:	f1b9 0f00 	cmp.w	r9, #0
 800c708:	dc35      	bgt.n	800c776 <_printf_float+0x3aa>
 800c70a:	f04f 0800 	mov.w	r8, #0
 800c70e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c712:	f104 0a1a 	add.w	sl, r4, #26
 800c716:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c71a:	1a9b      	subs	r3, r3, r2
 800c71c:	eba3 0309 	sub.w	r3, r3, r9
 800c720:	4543      	cmp	r3, r8
 800c722:	f77f af79 	ble.w	800c618 <_printf_float+0x24c>
 800c726:	2301      	movs	r3, #1
 800c728:	4652      	mov	r2, sl
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	f43f aeaa 	beq.w	800c48a <_printf_float+0xbe>
 800c736:	f108 0801 	add.w	r8, r8, #1
 800c73a:	e7ec      	b.n	800c716 <_printf_float+0x34a>
 800c73c:	4613      	mov	r3, r2
 800c73e:	4631      	mov	r1, r6
 800c740:	4642      	mov	r2, r8
 800c742:	4628      	mov	r0, r5
 800c744:	47b8      	blx	r7
 800c746:	3001      	adds	r0, #1
 800c748:	d1c0      	bne.n	800c6cc <_printf_float+0x300>
 800c74a:	e69e      	b.n	800c48a <_printf_float+0xbe>
 800c74c:	2301      	movs	r3, #1
 800c74e:	4631      	mov	r1, r6
 800c750:	4628      	mov	r0, r5
 800c752:	9205      	str	r2, [sp, #20]
 800c754:	47b8      	blx	r7
 800c756:	3001      	adds	r0, #1
 800c758:	f43f ae97 	beq.w	800c48a <_printf_float+0xbe>
 800c75c:	9a05      	ldr	r2, [sp, #20]
 800c75e:	f10b 0b01 	add.w	fp, fp, #1
 800c762:	e7b9      	b.n	800c6d8 <_printf_float+0x30c>
 800c764:	ee18 3a10 	vmov	r3, s16
 800c768:	4652      	mov	r2, sl
 800c76a:	4631      	mov	r1, r6
 800c76c:	4628      	mov	r0, r5
 800c76e:	47b8      	blx	r7
 800c770:	3001      	adds	r0, #1
 800c772:	d1be      	bne.n	800c6f2 <_printf_float+0x326>
 800c774:	e689      	b.n	800c48a <_printf_float+0xbe>
 800c776:	9a05      	ldr	r2, [sp, #20]
 800c778:	464b      	mov	r3, r9
 800c77a:	4442      	add	r2, r8
 800c77c:	4631      	mov	r1, r6
 800c77e:	4628      	mov	r0, r5
 800c780:	47b8      	blx	r7
 800c782:	3001      	adds	r0, #1
 800c784:	d1c1      	bne.n	800c70a <_printf_float+0x33e>
 800c786:	e680      	b.n	800c48a <_printf_float+0xbe>
 800c788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c78a:	2a01      	cmp	r2, #1
 800c78c:	dc01      	bgt.n	800c792 <_printf_float+0x3c6>
 800c78e:	07db      	lsls	r3, r3, #31
 800c790:	d53a      	bpl.n	800c808 <_printf_float+0x43c>
 800c792:	2301      	movs	r3, #1
 800c794:	4642      	mov	r2, r8
 800c796:	4631      	mov	r1, r6
 800c798:	4628      	mov	r0, r5
 800c79a:	47b8      	blx	r7
 800c79c:	3001      	adds	r0, #1
 800c79e:	f43f ae74 	beq.w	800c48a <_printf_float+0xbe>
 800c7a2:	ee18 3a10 	vmov	r3, s16
 800c7a6:	4652      	mov	r2, sl
 800c7a8:	4631      	mov	r1, r6
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	47b8      	blx	r7
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	f43f ae6b 	beq.w	800c48a <_printf_float+0xbe>
 800c7b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c7c0:	f7f4 f98a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7c4:	b9d8      	cbnz	r0, 800c7fe <_printf_float+0x432>
 800c7c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c7ca:	f108 0201 	add.w	r2, r8, #1
 800c7ce:	4631      	mov	r1, r6
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	47b8      	blx	r7
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	d10e      	bne.n	800c7f6 <_printf_float+0x42a>
 800c7d8:	e657      	b.n	800c48a <_printf_float+0xbe>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	4652      	mov	r2, sl
 800c7de:	4631      	mov	r1, r6
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	47b8      	blx	r7
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	f43f ae50 	beq.w	800c48a <_printf_float+0xbe>
 800c7ea:	f108 0801 	add.w	r8, r8, #1
 800c7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	4543      	cmp	r3, r8
 800c7f4:	dcf1      	bgt.n	800c7da <_printf_float+0x40e>
 800c7f6:	464b      	mov	r3, r9
 800c7f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7fc:	e6da      	b.n	800c5b4 <_printf_float+0x1e8>
 800c7fe:	f04f 0800 	mov.w	r8, #0
 800c802:	f104 0a1a 	add.w	sl, r4, #26
 800c806:	e7f2      	b.n	800c7ee <_printf_float+0x422>
 800c808:	2301      	movs	r3, #1
 800c80a:	4642      	mov	r2, r8
 800c80c:	e7df      	b.n	800c7ce <_printf_float+0x402>
 800c80e:	2301      	movs	r3, #1
 800c810:	464a      	mov	r2, r9
 800c812:	4631      	mov	r1, r6
 800c814:	4628      	mov	r0, r5
 800c816:	47b8      	blx	r7
 800c818:	3001      	adds	r0, #1
 800c81a:	f43f ae36 	beq.w	800c48a <_printf_float+0xbe>
 800c81e:	f108 0801 	add.w	r8, r8, #1
 800c822:	68e3      	ldr	r3, [r4, #12]
 800c824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c826:	1a5b      	subs	r3, r3, r1
 800c828:	4543      	cmp	r3, r8
 800c82a:	dcf0      	bgt.n	800c80e <_printf_float+0x442>
 800c82c:	e6f8      	b.n	800c620 <_printf_float+0x254>
 800c82e:	f04f 0800 	mov.w	r8, #0
 800c832:	f104 0919 	add.w	r9, r4, #25
 800c836:	e7f4      	b.n	800c822 <_printf_float+0x456>

0800c838 <_printf_common>:
 800c838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c83c:	4616      	mov	r6, r2
 800c83e:	4699      	mov	r9, r3
 800c840:	688a      	ldr	r2, [r1, #8]
 800c842:	690b      	ldr	r3, [r1, #16]
 800c844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c848:	4293      	cmp	r3, r2
 800c84a:	bfb8      	it	lt
 800c84c:	4613      	movlt	r3, r2
 800c84e:	6033      	str	r3, [r6, #0]
 800c850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c854:	4607      	mov	r7, r0
 800c856:	460c      	mov	r4, r1
 800c858:	b10a      	cbz	r2, 800c85e <_printf_common+0x26>
 800c85a:	3301      	adds	r3, #1
 800c85c:	6033      	str	r3, [r6, #0]
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	0699      	lsls	r1, r3, #26
 800c862:	bf42      	ittt	mi
 800c864:	6833      	ldrmi	r3, [r6, #0]
 800c866:	3302      	addmi	r3, #2
 800c868:	6033      	strmi	r3, [r6, #0]
 800c86a:	6825      	ldr	r5, [r4, #0]
 800c86c:	f015 0506 	ands.w	r5, r5, #6
 800c870:	d106      	bne.n	800c880 <_printf_common+0x48>
 800c872:	f104 0a19 	add.w	sl, r4, #25
 800c876:	68e3      	ldr	r3, [r4, #12]
 800c878:	6832      	ldr	r2, [r6, #0]
 800c87a:	1a9b      	subs	r3, r3, r2
 800c87c:	42ab      	cmp	r3, r5
 800c87e:	dc26      	bgt.n	800c8ce <_printf_common+0x96>
 800c880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c884:	1e13      	subs	r3, r2, #0
 800c886:	6822      	ldr	r2, [r4, #0]
 800c888:	bf18      	it	ne
 800c88a:	2301      	movne	r3, #1
 800c88c:	0692      	lsls	r2, r2, #26
 800c88e:	d42b      	bmi.n	800c8e8 <_printf_common+0xb0>
 800c890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c894:	4649      	mov	r1, r9
 800c896:	4638      	mov	r0, r7
 800c898:	47c0      	blx	r8
 800c89a:	3001      	adds	r0, #1
 800c89c:	d01e      	beq.n	800c8dc <_printf_common+0xa4>
 800c89e:	6823      	ldr	r3, [r4, #0]
 800c8a0:	6922      	ldr	r2, [r4, #16]
 800c8a2:	f003 0306 	and.w	r3, r3, #6
 800c8a6:	2b04      	cmp	r3, #4
 800c8a8:	bf02      	ittt	eq
 800c8aa:	68e5      	ldreq	r5, [r4, #12]
 800c8ac:	6833      	ldreq	r3, [r6, #0]
 800c8ae:	1aed      	subeq	r5, r5, r3
 800c8b0:	68a3      	ldr	r3, [r4, #8]
 800c8b2:	bf0c      	ite	eq
 800c8b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8b8:	2500      	movne	r5, #0
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	bfc4      	itt	gt
 800c8be:	1a9b      	subgt	r3, r3, r2
 800c8c0:	18ed      	addgt	r5, r5, r3
 800c8c2:	2600      	movs	r6, #0
 800c8c4:	341a      	adds	r4, #26
 800c8c6:	42b5      	cmp	r5, r6
 800c8c8:	d11a      	bne.n	800c900 <_printf_common+0xc8>
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	e008      	b.n	800c8e0 <_printf_common+0xa8>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	4652      	mov	r2, sl
 800c8d2:	4649      	mov	r1, r9
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	47c0      	blx	r8
 800c8d8:	3001      	adds	r0, #1
 800c8da:	d103      	bne.n	800c8e4 <_printf_common+0xac>
 800c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e4:	3501      	adds	r5, #1
 800c8e6:	e7c6      	b.n	800c876 <_printf_common+0x3e>
 800c8e8:	18e1      	adds	r1, r4, r3
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	2030      	movs	r0, #48	; 0x30
 800c8ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8f2:	4422      	add	r2, r4
 800c8f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8fc:	3302      	adds	r3, #2
 800c8fe:	e7c7      	b.n	800c890 <_printf_common+0x58>
 800c900:	2301      	movs	r3, #1
 800c902:	4622      	mov	r2, r4
 800c904:	4649      	mov	r1, r9
 800c906:	4638      	mov	r0, r7
 800c908:	47c0      	blx	r8
 800c90a:	3001      	adds	r0, #1
 800c90c:	d0e6      	beq.n	800c8dc <_printf_common+0xa4>
 800c90e:	3601      	adds	r6, #1
 800c910:	e7d9      	b.n	800c8c6 <_printf_common+0x8e>
	...

0800c914 <_printf_i>:
 800c914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c918:	7e0f      	ldrb	r7, [r1, #24]
 800c91a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c91c:	2f78      	cmp	r7, #120	; 0x78
 800c91e:	4691      	mov	r9, r2
 800c920:	4680      	mov	r8, r0
 800c922:	460c      	mov	r4, r1
 800c924:	469a      	mov	sl, r3
 800c926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c92a:	d807      	bhi.n	800c93c <_printf_i+0x28>
 800c92c:	2f62      	cmp	r7, #98	; 0x62
 800c92e:	d80a      	bhi.n	800c946 <_printf_i+0x32>
 800c930:	2f00      	cmp	r7, #0
 800c932:	f000 80d4 	beq.w	800cade <_printf_i+0x1ca>
 800c936:	2f58      	cmp	r7, #88	; 0x58
 800c938:	f000 80c0 	beq.w	800cabc <_printf_i+0x1a8>
 800c93c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c944:	e03a      	b.n	800c9bc <_printf_i+0xa8>
 800c946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c94a:	2b15      	cmp	r3, #21
 800c94c:	d8f6      	bhi.n	800c93c <_printf_i+0x28>
 800c94e:	a101      	add	r1, pc, #4	; (adr r1, 800c954 <_printf_i+0x40>)
 800c950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c954:	0800c9ad 	.word	0x0800c9ad
 800c958:	0800c9c1 	.word	0x0800c9c1
 800c95c:	0800c93d 	.word	0x0800c93d
 800c960:	0800c93d 	.word	0x0800c93d
 800c964:	0800c93d 	.word	0x0800c93d
 800c968:	0800c93d 	.word	0x0800c93d
 800c96c:	0800c9c1 	.word	0x0800c9c1
 800c970:	0800c93d 	.word	0x0800c93d
 800c974:	0800c93d 	.word	0x0800c93d
 800c978:	0800c93d 	.word	0x0800c93d
 800c97c:	0800c93d 	.word	0x0800c93d
 800c980:	0800cac5 	.word	0x0800cac5
 800c984:	0800c9ed 	.word	0x0800c9ed
 800c988:	0800ca7f 	.word	0x0800ca7f
 800c98c:	0800c93d 	.word	0x0800c93d
 800c990:	0800c93d 	.word	0x0800c93d
 800c994:	0800cae7 	.word	0x0800cae7
 800c998:	0800c93d 	.word	0x0800c93d
 800c99c:	0800c9ed 	.word	0x0800c9ed
 800c9a0:	0800c93d 	.word	0x0800c93d
 800c9a4:	0800c93d 	.word	0x0800c93d
 800c9a8:	0800ca87 	.word	0x0800ca87
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	1d1a      	adds	r2, r3, #4
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	602a      	str	r2, [r5, #0]
 800c9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e09f      	b.n	800cb00 <_printf_i+0x1ec>
 800c9c0:	6820      	ldr	r0, [r4, #0]
 800c9c2:	682b      	ldr	r3, [r5, #0]
 800c9c4:	0607      	lsls	r7, r0, #24
 800c9c6:	f103 0104 	add.w	r1, r3, #4
 800c9ca:	6029      	str	r1, [r5, #0]
 800c9cc:	d501      	bpl.n	800c9d2 <_printf_i+0xbe>
 800c9ce:	681e      	ldr	r6, [r3, #0]
 800c9d0:	e003      	b.n	800c9da <_printf_i+0xc6>
 800c9d2:	0646      	lsls	r6, r0, #25
 800c9d4:	d5fb      	bpl.n	800c9ce <_printf_i+0xba>
 800c9d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c9da:	2e00      	cmp	r6, #0
 800c9dc:	da03      	bge.n	800c9e6 <_printf_i+0xd2>
 800c9de:	232d      	movs	r3, #45	; 0x2d
 800c9e0:	4276      	negs	r6, r6
 800c9e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e6:	485a      	ldr	r0, [pc, #360]	; (800cb50 <_printf_i+0x23c>)
 800c9e8:	230a      	movs	r3, #10
 800c9ea:	e012      	b.n	800ca12 <_printf_i+0xfe>
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	6820      	ldr	r0, [r4, #0]
 800c9f0:	1d19      	adds	r1, r3, #4
 800c9f2:	6029      	str	r1, [r5, #0]
 800c9f4:	0605      	lsls	r5, r0, #24
 800c9f6:	d501      	bpl.n	800c9fc <_printf_i+0xe8>
 800c9f8:	681e      	ldr	r6, [r3, #0]
 800c9fa:	e002      	b.n	800ca02 <_printf_i+0xee>
 800c9fc:	0641      	lsls	r1, r0, #25
 800c9fe:	d5fb      	bpl.n	800c9f8 <_printf_i+0xe4>
 800ca00:	881e      	ldrh	r6, [r3, #0]
 800ca02:	4853      	ldr	r0, [pc, #332]	; (800cb50 <_printf_i+0x23c>)
 800ca04:	2f6f      	cmp	r7, #111	; 0x6f
 800ca06:	bf0c      	ite	eq
 800ca08:	2308      	moveq	r3, #8
 800ca0a:	230a      	movne	r3, #10
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca12:	6865      	ldr	r5, [r4, #4]
 800ca14:	60a5      	str	r5, [r4, #8]
 800ca16:	2d00      	cmp	r5, #0
 800ca18:	bfa2      	ittt	ge
 800ca1a:	6821      	ldrge	r1, [r4, #0]
 800ca1c:	f021 0104 	bicge.w	r1, r1, #4
 800ca20:	6021      	strge	r1, [r4, #0]
 800ca22:	b90e      	cbnz	r6, 800ca28 <_printf_i+0x114>
 800ca24:	2d00      	cmp	r5, #0
 800ca26:	d04b      	beq.n	800cac0 <_printf_i+0x1ac>
 800ca28:	4615      	mov	r5, r2
 800ca2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ca32:	5dc7      	ldrb	r7, [r0, r7]
 800ca34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca38:	4637      	mov	r7, r6
 800ca3a:	42bb      	cmp	r3, r7
 800ca3c:	460e      	mov	r6, r1
 800ca3e:	d9f4      	bls.n	800ca2a <_printf_i+0x116>
 800ca40:	2b08      	cmp	r3, #8
 800ca42:	d10b      	bne.n	800ca5c <_printf_i+0x148>
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	07de      	lsls	r6, r3, #31
 800ca48:	d508      	bpl.n	800ca5c <_printf_i+0x148>
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	6861      	ldr	r1, [r4, #4]
 800ca4e:	4299      	cmp	r1, r3
 800ca50:	bfde      	ittt	le
 800ca52:	2330      	movle	r3, #48	; 0x30
 800ca54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca5c:	1b52      	subs	r2, r2, r5
 800ca5e:	6122      	str	r2, [r4, #16]
 800ca60:	f8cd a000 	str.w	sl, [sp]
 800ca64:	464b      	mov	r3, r9
 800ca66:	aa03      	add	r2, sp, #12
 800ca68:	4621      	mov	r1, r4
 800ca6a:	4640      	mov	r0, r8
 800ca6c:	f7ff fee4 	bl	800c838 <_printf_common>
 800ca70:	3001      	adds	r0, #1
 800ca72:	d14a      	bne.n	800cb0a <_printf_i+0x1f6>
 800ca74:	f04f 30ff 	mov.w	r0, #4294967295
 800ca78:	b004      	add	sp, #16
 800ca7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	f043 0320 	orr.w	r3, r3, #32
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	4833      	ldr	r0, [pc, #204]	; (800cb54 <_printf_i+0x240>)
 800ca88:	2778      	movs	r7, #120	; 0x78
 800ca8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	6829      	ldr	r1, [r5, #0]
 800ca92:	061f      	lsls	r7, r3, #24
 800ca94:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca98:	d402      	bmi.n	800caa0 <_printf_i+0x18c>
 800ca9a:	065f      	lsls	r7, r3, #25
 800ca9c:	bf48      	it	mi
 800ca9e:	b2b6      	uxthmi	r6, r6
 800caa0:	07df      	lsls	r7, r3, #31
 800caa2:	bf48      	it	mi
 800caa4:	f043 0320 	orrmi.w	r3, r3, #32
 800caa8:	6029      	str	r1, [r5, #0]
 800caaa:	bf48      	it	mi
 800caac:	6023      	strmi	r3, [r4, #0]
 800caae:	b91e      	cbnz	r6, 800cab8 <_printf_i+0x1a4>
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	f023 0320 	bic.w	r3, r3, #32
 800cab6:	6023      	str	r3, [r4, #0]
 800cab8:	2310      	movs	r3, #16
 800caba:	e7a7      	b.n	800ca0c <_printf_i+0xf8>
 800cabc:	4824      	ldr	r0, [pc, #144]	; (800cb50 <_printf_i+0x23c>)
 800cabe:	e7e4      	b.n	800ca8a <_printf_i+0x176>
 800cac0:	4615      	mov	r5, r2
 800cac2:	e7bd      	b.n	800ca40 <_printf_i+0x12c>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	6826      	ldr	r6, [r4, #0]
 800cac8:	6961      	ldr	r1, [r4, #20]
 800caca:	1d18      	adds	r0, r3, #4
 800cacc:	6028      	str	r0, [r5, #0]
 800cace:	0635      	lsls	r5, r6, #24
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	d501      	bpl.n	800cad8 <_printf_i+0x1c4>
 800cad4:	6019      	str	r1, [r3, #0]
 800cad6:	e002      	b.n	800cade <_printf_i+0x1ca>
 800cad8:	0670      	lsls	r0, r6, #25
 800cada:	d5fb      	bpl.n	800cad4 <_printf_i+0x1c0>
 800cadc:	8019      	strh	r1, [r3, #0]
 800cade:	2300      	movs	r3, #0
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	4615      	mov	r5, r2
 800cae4:	e7bc      	b.n	800ca60 <_printf_i+0x14c>
 800cae6:	682b      	ldr	r3, [r5, #0]
 800cae8:	1d1a      	adds	r2, r3, #4
 800caea:	602a      	str	r2, [r5, #0]
 800caec:	681d      	ldr	r5, [r3, #0]
 800caee:	6862      	ldr	r2, [r4, #4]
 800caf0:	2100      	movs	r1, #0
 800caf2:	4628      	mov	r0, r5
 800caf4:	f7f3 fb74 	bl	80001e0 <memchr>
 800caf8:	b108      	cbz	r0, 800cafe <_printf_i+0x1ea>
 800cafa:	1b40      	subs	r0, r0, r5
 800cafc:	6060      	str	r0, [r4, #4]
 800cafe:	6863      	ldr	r3, [r4, #4]
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	2300      	movs	r3, #0
 800cb04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb08:	e7aa      	b.n	800ca60 <_printf_i+0x14c>
 800cb0a:	6923      	ldr	r3, [r4, #16]
 800cb0c:	462a      	mov	r2, r5
 800cb0e:	4649      	mov	r1, r9
 800cb10:	4640      	mov	r0, r8
 800cb12:	47d0      	blx	sl
 800cb14:	3001      	adds	r0, #1
 800cb16:	d0ad      	beq.n	800ca74 <_printf_i+0x160>
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	079b      	lsls	r3, r3, #30
 800cb1c:	d413      	bmi.n	800cb46 <_printf_i+0x232>
 800cb1e:	68e0      	ldr	r0, [r4, #12]
 800cb20:	9b03      	ldr	r3, [sp, #12]
 800cb22:	4298      	cmp	r0, r3
 800cb24:	bfb8      	it	lt
 800cb26:	4618      	movlt	r0, r3
 800cb28:	e7a6      	b.n	800ca78 <_printf_i+0x164>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	4632      	mov	r2, r6
 800cb2e:	4649      	mov	r1, r9
 800cb30:	4640      	mov	r0, r8
 800cb32:	47d0      	blx	sl
 800cb34:	3001      	adds	r0, #1
 800cb36:	d09d      	beq.n	800ca74 <_printf_i+0x160>
 800cb38:	3501      	adds	r5, #1
 800cb3a:	68e3      	ldr	r3, [r4, #12]
 800cb3c:	9903      	ldr	r1, [sp, #12]
 800cb3e:	1a5b      	subs	r3, r3, r1
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	dcf2      	bgt.n	800cb2a <_printf_i+0x216>
 800cb44:	e7eb      	b.n	800cb1e <_printf_i+0x20a>
 800cb46:	2500      	movs	r5, #0
 800cb48:	f104 0619 	add.w	r6, r4, #25
 800cb4c:	e7f5      	b.n	800cb3a <_printf_i+0x226>
 800cb4e:	bf00      	nop
 800cb50:	0800f1fe 	.word	0x0800f1fe
 800cb54:	0800f20f 	.word	0x0800f20f

0800cb58 <std>:
 800cb58:	2300      	movs	r3, #0
 800cb5a:	b510      	push	{r4, lr}
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb66:	6083      	str	r3, [r0, #8]
 800cb68:	8181      	strh	r1, [r0, #12]
 800cb6a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb6c:	81c2      	strh	r2, [r0, #14]
 800cb6e:	6183      	str	r3, [r0, #24]
 800cb70:	4619      	mov	r1, r3
 800cb72:	2208      	movs	r2, #8
 800cb74:	305c      	adds	r0, #92	; 0x5c
 800cb76:	f000 f9f7 	bl	800cf68 <memset>
 800cb7a:	4b0d      	ldr	r3, [pc, #52]	; (800cbb0 <std+0x58>)
 800cb7c:	6263      	str	r3, [r4, #36]	; 0x24
 800cb7e:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <std+0x5c>)
 800cb80:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb82:	4b0d      	ldr	r3, [pc, #52]	; (800cbb8 <std+0x60>)
 800cb84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb86:	4b0d      	ldr	r3, [pc, #52]	; (800cbbc <std+0x64>)
 800cb88:	6323      	str	r3, [r4, #48]	; 0x30
 800cb8a:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <std+0x68>)
 800cb8c:	6224      	str	r4, [r4, #32]
 800cb8e:	429c      	cmp	r4, r3
 800cb90:	d006      	beq.n	800cba0 <std+0x48>
 800cb92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cb96:	4294      	cmp	r4, r2
 800cb98:	d002      	beq.n	800cba0 <std+0x48>
 800cb9a:	33d0      	adds	r3, #208	; 0xd0
 800cb9c:	429c      	cmp	r4, r3
 800cb9e:	d105      	bne.n	800cbac <std+0x54>
 800cba0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba8:	f000 bab0 	b.w	800d10c <__retarget_lock_init_recursive>
 800cbac:	bd10      	pop	{r4, pc}
 800cbae:	bf00      	nop
 800cbb0:	0800cdb9 	.word	0x0800cdb9
 800cbb4:	0800cddb 	.word	0x0800cddb
 800cbb8:	0800ce13 	.word	0x0800ce13
 800cbbc:	0800ce37 	.word	0x0800ce37
 800cbc0:	200028c8 	.word	0x200028c8

0800cbc4 <stdio_exit_handler>:
 800cbc4:	4a02      	ldr	r2, [pc, #8]	; (800cbd0 <stdio_exit_handler+0xc>)
 800cbc6:	4903      	ldr	r1, [pc, #12]	; (800cbd4 <stdio_exit_handler+0x10>)
 800cbc8:	4803      	ldr	r0, [pc, #12]	; (800cbd8 <stdio_exit_handler+0x14>)
 800cbca:	f000 b869 	b.w	800cca0 <_fwalk_sglue>
 800cbce:	bf00      	nop
 800cbd0:	2000008c 	.word	0x2000008c
 800cbd4:	0800eab1 	.word	0x0800eab1
 800cbd8:	20000098 	.word	0x20000098

0800cbdc <cleanup_stdio>:
 800cbdc:	6841      	ldr	r1, [r0, #4]
 800cbde:	4b0c      	ldr	r3, [pc, #48]	; (800cc10 <cleanup_stdio+0x34>)
 800cbe0:	4299      	cmp	r1, r3
 800cbe2:	b510      	push	{r4, lr}
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	d001      	beq.n	800cbec <cleanup_stdio+0x10>
 800cbe8:	f001 ff62 	bl	800eab0 <_fflush_r>
 800cbec:	68a1      	ldr	r1, [r4, #8]
 800cbee:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <cleanup_stdio+0x38>)
 800cbf0:	4299      	cmp	r1, r3
 800cbf2:	d002      	beq.n	800cbfa <cleanup_stdio+0x1e>
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f001 ff5b 	bl	800eab0 <_fflush_r>
 800cbfa:	68e1      	ldr	r1, [r4, #12]
 800cbfc:	4b06      	ldr	r3, [pc, #24]	; (800cc18 <cleanup_stdio+0x3c>)
 800cbfe:	4299      	cmp	r1, r3
 800cc00:	d004      	beq.n	800cc0c <cleanup_stdio+0x30>
 800cc02:	4620      	mov	r0, r4
 800cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc08:	f001 bf52 	b.w	800eab0 <_fflush_r>
 800cc0c:	bd10      	pop	{r4, pc}
 800cc0e:	bf00      	nop
 800cc10:	200028c8 	.word	0x200028c8
 800cc14:	20002930 	.word	0x20002930
 800cc18:	20002998 	.word	0x20002998

0800cc1c <global_stdio_init.part.0>:
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <global_stdio_init.part.0+0x30>)
 800cc20:	4c0b      	ldr	r4, [pc, #44]	; (800cc50 <global_stdio_init.part.0+0x34>)
 800cc22:	4a0c      	ldr	r2, [pc, #48]	; (800cc54 <global_stdio_init.part.0+0x38>)
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	4620      	mov	r0, r4
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2104      	movs	r1, #4
 800cc2c:	f7ff ff94 	bl	800cb58 <std>
 800cc30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cc34:	2201      	movs	r2, #1
 800cc36:	2109      	movs	r1, #9
 800cc38:	f7ff ff8e 	bl	800cb58 <std>
 800cc3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cc40:	2202      	movs	r2, #2
 800cc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc46:	2112      	movs	r1, #18
 800cc48:	f7ff bf86 	b.w	800cb58 <std>
 800cc4c:	20002a00 	.word	0x20002a00
 800cc50:	200028c8 	.word	0x200028c8
 800cc54:	0800cbc5 	.word	0x0800cbc5

0800cc58 <__sfp_lock_acquire>:
 800cc58:	4801      	ldr	r0, [pc, #4]	; (800cc60 <__sfp_lock_acquire+0x8>)
 800cc5a:	f000 ba58 	b.w	800d10e <__retarget_lock_acquire_recursive>
 800cc5e:	bf00      	nop
 800cc60:	20002a09 	.word	0x20002a09

0800cc64 <__sfp_lock_release>:
 800cc64:	4801      	ldr	r0, [pc, #4]	; (800cc6c <__sfp_lock_release+0x8>)
 800cc66:	f000 ba53 	b.w	800d110 <__retarget_lock_release_recursive>
 800cc6a:	bf00      	nop
 800cc6c:	20002a09 	.word	0x20002a09

0800cc70 <__sinit>:
 800cc70:	b510      	push	{r4, lr}
 800cc72:	4604      	mov	r4, r0
 800cc74:	f7ff fff0 	bl	800cc58 <__sfp_lock_acquire>
 800cc78:	6a23      	ldr	r3, [r4, #32]
 800cc7a:	b11b      	cbz	r3, 800cc84 <__sinit+0x14>
 800cc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc80:	f7ff bff0 	b.w	800cc64 <__sfp_lock_release>
 800cc84:	4b04      	ldr	r3, [pc, #16]	; (800cc98 <__sinit+0x28>)
 800cc86:	6223      	str	r3, [r4, #32]
 800cc88:	4b04      	ldr	r3, [pc, #16]	; (800cc9c <__sinit+0x2c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1f5      	bne.n	800cc7c <__sinit+0xc>
 800cc90:	f7ff ffc4 	bl	800cc1c <global_stdio_init.part.0>
 800cc94:	e7f2      	b.n	800cc7c <__sinit+0xc>
 800cc96:	bf00      	nop
 800cc98:	0800cbdd 	.word	0x0800cbdd
 800cc9c:	20002a00 	.word	0x20002a00

0800cca0 <_fwalk_sglue>:
 800cca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cca4:	4607      	mov	r7, r0
 800cca6:	4688      	mov	r8, r1
 800cca8:	4614      	mov	r4, r2
 800ccaa:	2600      	movs	r6, #0
 800ccac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccb0:	f1b9 0901 	subs.w	r9, r9, #1
 800ccb4:	d505      	bpl.n	800ccc2 <_fwalk_sglue+0x22>
 800ccb6:	6824      	ldr	r4, [r4, #0]
 800ccb8:	2c00      	cmp	r4, #0
 800ccba:	d1f7      	bne.n	800ccac <_fwalk_sglue+0xc>
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccc2:	89ab      	ldrh	r3, [r5, #12]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d907      	bls.n	800ccd8 <_fwalk_sglue+0x38>
 800ccc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cccc:	3301      	adds	r3, #1
 800ccce:	d003      	beq.n	800ccd8 <_fwalk_sglue+0x38>
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	47c0      	blx	r8
 800ccd6:	4306      	orrs	r6, r0
 800ccd8:	3568      	adds	r5, #104	; 0x68
 800ccda:	e7e9      	b.n	800ccb0 <_fwalk_sglue+0x10>

0800ccdc <iprintf>:
 800ccdc:	b40f      	push	{r0, r1, r2, r3}
 800ccde:	b507      	push	{r0, r1, r2, lr}
 800cce0:	4906      	ldr	r1, [pc, #24]	; (800ccfc <iprintf+0x20>)
 800cce2:	ab04      	add	r3, sp, #16
 800cce4:	6808      	ldr	r0, [r1, #0]
 800cce6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccea:	6881      	ldr	r1, [r0, #8]
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	f001 fd3f 	bl	800e770 <_vfiprintf_r>
 800ccf2:	b003      	add	sp, #12
 800ccf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccf8:	b004      	add	sp, #16
 800ccfa:	4770      	bx	lr
 800ccfc:	200000e4 	.word	0x200000e4

0800cd00 <_puts_r>:
 800cd00:	6a03      	ldr	r3, [r0, #32]
 800cd02:	b570      	push	{r4, r5, r6, lr}
 800cd04:	6884      	ldr	r4, [r0, #8]
 800cd06:	4605      	mov	r5, r0
 800cd08:	460e      	mov	r6, r1
 800cd0a:	b90b      	cbnz	r3, 800cd10 <_puts_r+0x10>
 800cd0c:	f7ff ffb0 	bl	800cc70 <__sinit>
 800cd10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd12:	07db      	lsls	r3, r3, #31
 800cd14:	d405      	bmi.n	800cd22 <_puts_r+0x22>
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	0598      	lsls	r0, r3, #22
 800cd1a:	d402      	bmi.n	800cd22 <_puts_r+0x22>
 800cd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd1e:	f000 f9f6 	bl	800d10e <__retarget_lock_acquire_recursive>
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	0719      	lsls	r1, r3, #28
 800cd26:	d513      	bpl.n	800cd50 <_puts_r+0x50>
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	b18b      	cbz	r3, 800cd50 <_puts_r+0x50>
 800cd2c:	3e01      	subs	r6, #1
 800cd2e:	68a3      	ldr	r3, [r4, #8]
 800cd30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cd34:	3b01      	subs	r3, #1
 800cd36:	60a3      	str	r3, [r4, #8]
 800cd38:	b9e9      	cbnz	r1, 800cd76 <_puts_r+0x76>
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	da2e      	bge.n	800cd9c <_puts_r+0x9c>
 800cd3e:	4622      	mov	r2, r4
 800cd40:	210a      	movs	r1, #10
 800cd42:	4628      	mov	r0, r5
 800cd44:	f000 f87b 	bl	800ce3e <__swbuf_r>
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d007      	beq.n	800cd5c <_puts_r+0x5c>
 800cd4c:	250a      	movs	r5, #10
 800cd4e:	e007      	b.n	800cd60 <_puts_r+0x60>
 800cd50:	4621      	mov	r1, r4
 800cd52:	4628      	mov	r0, r5
 800cd54:	f000 f8b0 	bl	800ceb8 <__swsetup_r>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d0e7      	beq.n	800cd2c <_puts_r+0x2c>
 800cd5c:	f04f 35ff 	mov.w	r5, #4294967295
 800cd60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd62:	07da      	lsls	r2, r3, #31
 800cd64:	d405      	bmi.n	800cd72 <_puts_r+0x72>
 800cd66:	89a3      	ldrh	r3, [r4, #12]
 800cd68:	059b      	lsls	r3, r3, #22
 800cd6a:	d402      	bmi.n	800cd72 <_puts_r+0x72>
 800cd6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd6e:	f000 f9cf 	bl	800d110 <__retarget_lock_release_recursive>
 800cd72:	4628      	mov	r0, r5
 800cd74:	bd70      	pop	{r4, r5, r6, pc}
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	da04      	bge.n	800cd84 <_puts_r+0x84>
 800cd7a:	69a2      	ldr	r2, [r4, #24]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	dc06      	bgt.n	800cd8e <_puts_r+0x8e>
 800cd80:	290a      	cmp	r1, #10
 800cd82:	d004      	beq.n	800cd8e <_puts_r+0x8e>
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	6022      	str	r2, [r4, #0]
 800cd8a:	7019      	strb	r1, [r3, #0]
 800cd8c:	e7cf      	b.n	800cd2e <_puts_r+0x2e>
 800cd8e:	4622      	mov	r2, r4
 800cd90:	4628      	mov	r0, r5
 800cd92:	f000 f854 	bl	800ce3e <__swbuf_r>
 800cd96:	3001      	adds	r0, #1
 800cd98:	d1c9      	bne.n	800cd2e <_puts_r+0x2e>
 800cd9a:	e7df      	b.n	800cd5c <_puts_r+0x5c>
 800cd9c:	6823      	ldr	r3, [r4, #0]
 800cd9e:	250a      	movs	r5, #10
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	6022      	str	r2, [r4, #0]
 800cda4:	701d      	strb	r5, [r3, #0]
 800cda6:	e7db      	b.n	800cd60 <_puts_r+0x60>

0800cda8 <puts>:
 800cda8:	4b02      	ldr	r3, [pc, #8]	; (800cdb4 <puts+0xc>)
 800cdaa:	4601      	mov	r1, r0
 800cdac:	6818      	ldr	r0, [r3, #0]
 800cdae:	f7ff bfa7 	b.w	800cd00 <_puts_r>
 800cdb2:	bf00      	nop
 800cdb4:	200000e4 	.word	0x200000e4

0800cdb8 <__sread>:
 800cdb8:	b510      	push	{r4, lr}
 800cdba:	460c      	mov	r4, r1
 800cdbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc0:	f000 f956 	bl	800d070 <_read_r>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	bfab      	itete	ge
 800cdc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdca:	89a3      	ldrhlt	r3, [r4, #12]
 800cdcc:	181b      	addge	r3, r3, r0
 800cdce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdd2:	bfac      	ite	ge
 800cdd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdd6:	81a3      	strhlt	r3, [r4, #12]
 800cdd8:	bd10      	pop	{r4, pc}

0800cdda <__swrite>:
 800cdda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdde:	461f      	mov	r7, r3
 800cde0:	898b      	ldrh	r3, [r1, #12]
 800cde2:	05db      	lsls	r3, r3, #23
 800cde4:	4605      	mov	r5, r0
 800cde6:	460c      	mov	r4, r1
 800cde8:	4616      	mov	r6, r2
 800cdea:	d505      	bpl.n	800cdf8 <__swrite+0x1e>
 800cdec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f000 f92a 	bl	800d04c <_lseek_r>
 800cdf8:	89a3      	ldrh	r3, [r4, #12]
 800cdfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce02:	81a3      	strh	r3, [r4, #12]
 800ce04:	4632      	mov	r2, r6
 800ce06:	463b      	mov	r3, r7
 800ce08:	4628      	mov	r0, r5
 800ce0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0e:	f000 b941 	b.w	800d094 <_write_r>

0800ce12 <__sseek>:
 800ce12:	b510      	push	{r4, lr}
 800ce14:	460c      	mov	r4, r1
 800ce16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce1a:	f000 f917 	bl	800d04c <_lseek_r>
 800ce1e:	1c43      	adds	r3, r0, #1
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	bf15      	itete	ne
 800ce24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce2e:	81a3      	strheq	r3, [r4, #12]
 800ce30:	bf18      	it	ne
 800ce32:	81a3      	strhne	r3, [r4, #12]
 800ce34:	bd10      	pop	{r4, pc}

0800ce36 <__sclose>:
 800ce36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce3a:	f000 b8a1 	b.w	800cf80 <_close_r>

0800ce3e <__swbuf_r>:
 800ce3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce40:	460e      	mov	r6, r1
 800ce42:	4614      	mov	r4, r2
 800ce44:	4605      	mov	r5, r0
 800ce46:	b118      	cbz	r0, 800ce50 <__swbuf_r+0x12>
 800ce48:	6a03      	ldr	r3, [r0, #32]
 800ce4a:	b90b      	cbnz	r3, 800ce50 <__swbuf_r+0x12>
 800ce4c:	f7ff ff10 	bl	800cc70 <__sinit>
 800ce50:	69a3      	ldr	r3, [r4, #24]
 800ce52:	60a3      	str	r3, [r4, #8]
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	071a      	lsls	r2, r3, #28
 800ce58:	d525      	bpl.n	800cea6 <__swbuf_r+0x68>
 800ce5a:	6923      	ldr	r3, [r4, #16]
 800ce5c:	b31b      	cbz	r3, 800cea6 <__swbuf_r+0x68>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	6922      	ldr	r2, [r4, #16]
 800ce62:	1a98      	subs	r0, r3, r2
 800ce64:	6963      	ldr	r3, [r4, #20]
 800ce66:	b2f6      	uxtb	r6, r6
 800ce68:	4283      	cmp	r3, r0
 800ce6a:	4637      	mov	r7, r6
 800ce6c:	dc04      	bgt.n	800ce78 <__swbuf_r+0x3a>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4628      	mov	r0, r5
 800ce72:	f001 fe1d 	bl	800eab0 <_fflush_r>
 800ce76:	b9e0      	cbnz	r0, 800ceb2 <__swbuf_r+0x74>
 800ce78:	68a3      	ldr	r3, [r4, #8]
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	60a3      	str	r3, [r4, #8]
 800ce7e:	6823      	ldr	r3, [r4, #0]
 800ce80:	1c5a      	adds	r2, r3, #1
 800ce82:	6022      	str	r2, [r4, #0]
 800ce84:	701e      	strb	r6, [r3, #0]
 800ce86:	6962      	ldr	r2, [r4, #20]
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d004      	beq.n	800ce98 <__swbuf_r+0x5a>
 800ce8e:	89a3      	ldrh	r3, [r4, #12]
 800ce90:	07db      	lsls	r3, r3, #31
 800ce92:	d506      	bpl.n	800cea2 <__swbuf_r+0x64>
 800ce94:	2e0a      	cmp	r6, #10
 800ce96:	d104      	bne.n	800cea2 <__swbuf_r+0x64>
 800ce98:	4621      	mov	r1, r4
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f001 fe08 	bl	800eab0 <_fflush_r>
 800cea0:	b938      	cbnz	r0, 800ceb2 <__swbuf_r+0x74>
 800cea2:	4638      	mov	r0, r7
 800cea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cea6:	4621      	mov	r1, r4
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f000 f805 	bl	800ceb8 <__swsetup_r>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d0d5      	beq.n	800ce5e <__swbuf_r+0x20>
 800ceb2:	f04f 37ff 	mov.w	r7, #4294967295
 800ceb6:	e7f4      	b.n	800cea2 <__swbuf_r+0x64>

0800ceb8 <__swsetup_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4b2a      	ldr	r3, [pc, #168]	; (800cf64 <__swsetup_r+0xac>)
 800cebc:	4605      	mov	r5, r0
 800cebe:	6818      	ldr	r0, [r3, #0]
 800cec0:	460c      	mov	r4, r1
 800cec2:	b118      	cbz	r0, 800cecc <__swsetup_r+0x14>
 800cec4:	6a03      	ldr	r3, [r0, #32]
 800cec6:	b90b      	cbnz	r3, 800cecc <__swsetup_r+0x14>
 800cec8:	f7ff fed2 	bl	800cc70 <__sinit>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ced2:	0718      	lsls	r0, r3, #28
 800ced4:	d422      	bmi.n	800cf1c <__swsetup_r+0x64>
 800ced6:	06d9      	lsls	r1, r3, #27
 800ced8:	d407      	bmi.n	800ceea <__swsetup_r+0x32>
 800ceda:	2309      	movs	r3, #9
 800cedc:	602b      	str	r3, [r5, #0]
 800cede:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	f04f 30ff 	mov.w	r0, #4294967295
 800cee8:	e034      	b.n	800cf54 <__swsetup_r+0x9c>
 800ceea:	0758      	lsls	r0, r3, #29
 800ceec:	d512      	bpl.n	800cf14 <__swsetup_r+0x5c>
 800ceee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cef0:	b141      	cbz	r1, 800cf04 <__swsetup_r+0x4c>
 800cef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cef6:	4299      	cmp	r1, r3
 800cef8:	d002      	beq.n	800cf00 <__swsetup_r+0x48>
 800cefa:	4628      	mov	r0, r5
 800cefc:	f000 ff92 	bl	800de24 <_free_r>
 800cf00:	2300      	movs	r3, #0
 800cf02:	6363      	str	r3, [r4, #52]	; 0x34
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	6063      	str	r3, [r4, #4]
 800cf10:	6923      	ldr	r3, [r4, #16]
 800cf12:	6023      	str	r3, [r4, #0]
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	f043 0308 	orr.w	r3, r3, #8
 800cf1a:	81a3      	strh	r3, [r4, #12]
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	b94b      	cbnz	r3, 800cf34 <__swsetup_r+0x7c>
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf2a:	d003      	beq.n	800cf34 <__swsetup_r+0x7c>
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	4628      	mov	r0, r5
 800cf30:	f001 fe0c 	bl	800eb4c <__smakebuf_r>
 800cf34:	89a0      	ldrh	r0, [r4, #12]
 800cf36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf3a:	f010 0301 	ands.w	r3, r0, #1
 800cf3e:	d00a      	beq.n	800cf56 <__swsetup_r+0x9e>
 800cf40:	2300      	movs	r3, #0
 800cf42:	60a3      	str	r3, [r4, #8]
 800cf44:	6963      	ldr	r3, [r4, #20]
 800cf46:	425b      	negs	r3, r3
 800cf48:	61a3      	str	r3, [r4, #24]
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	b943      	cbnz	r3, 800cf60 <__swsetup_r+0xa8>
 800cf4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf52:	d1c4      	bne.n	800cede <__swsetup_r+0x26>
 800cf54:	bd38      	pop	{r3, r4, r5, pc}
 800cf56:	0781      	lsls	r1, r0, #30
 800cf58:	bf58      	it	pl
 800cf5a:	6963      	ldrpl	r3, [r4, #20]
 800cf5c:	60a3      	str	r3, [r4, #8]
 800cf5e:	e7f4      	b.n	800cf4a <__swsetup_r+0x92>
 800cf60:	2000      	movs	r0, #0
 800cf62:	e7f7      	b.n	800cf54 <__swsetup_r+0x9c>
 800cf64:	200000e4 	.word	0x200000e4

0800cf68 <memset>:
 800cf68:	4402      	add	r2, r0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d100      	bne.n	800cf72 <memset+0xa>
 800cf70:	4770      	bx	lr
 800cf72:	f803 1b01 	strb.w	r1, [r3], #1
 800cf76:	e7f9      	b.n	800cf6c <memset+0x4>

0800cf78 <_localeconv_r>:
 800cf78:	4800      	ldr	r0, [pc, #0]	; (800cf7c <_localeconv_r+0x4>)
 800cf7a:	4770      	bx	lr
 800cf7c:	200001d8 	.word	0x200001d8

0800cf80 <_close_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4d06      	ldr	r5, [pc, #24]	; (800cf9c <_close_r+0x1c>)
 800cf84:	2300      	movs	r3, #0
 800cf86:	4604      	mov	r4, r0
 800cf88:	4608      	mov	r0, r1
 800cf8a:	602b      	str	r3, [r5, #0]
 800cf8c:	f7f4 fd81 	bl	8001a92 <_close>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	d102      	bne.n	800cf9a <_close_r+0x1a>
 800cf94:	682b      	ldr	r3, [r5, #0]
 800cf96:	b103      	cbz	r3, 800cf9a <_close_r+0x1a>
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	20002a04 	.word	0x20002a04

0800cfa0 <_reclaim_reent>:
 800cfa0:	4b29      	ldr	r3, [pc, #164]	; (800d048 <_reclaim_reent+0xa8>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4283      	cmp	r3, r0
 800cfa6:	b570      	push	{r4, r5, r6, lr}
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	d04b      	beq.n	800d044 <_reclaim_reent+0xa4>
 800cfac:	69c3      	ldr	r3, [r0, #28]
 800cfae:	b143      	cbz	r3, 800cfc2 <_reclaim_reent+0x22>
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d144      	bne.n	800d040 <_reclaim_reent+0xa0>
 800cfb6:	69e3      	ldr	r3, [r4, #28]
 800cfb8:	6819      	ldr	r1, [r3, #0]
 800cfba:	b111      	cbz	r1, 800cfc2 <_reclaim_reent+0x22>
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f000 ff31 	bl	800de24 <_free_r>
 800cfc2:	6961      	ldr	r1, [r4, #20]
 800cfc4:	b111      	cbz	r1, 800cfcc <_reclaim_reent+0x2c>
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 ff2c 	bl	800de24 <_free_r>
 800cfcc:	69e1      	ldr	r1, [r4, #28]
 800cfce:	b111      	cbz	r1, 800cfd6 <_reclaim_reent+0x36>
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f000 ff27 	bl	800de24 <_free_r>
 800cfd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cfd8:	b111      	cbz	r1, 800cfe0 <_reclaim_reent+0x40>
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 ff22 	bl	800de24 <_free_r>
 800cfe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfe2:	b111      	cbz	r1, 800cfea <_reclaim_reent+0x4a>
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 ff1d 	bl	800de24 <_free_r>
 800cfea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cfec:	b111      	cbz	r1, 800cff4 <_reclaim_reent+0x54>
 800cfee:	4620      	mov	r0, r4
 800cff0:	f000 ff18 	bl	800de24 <_free_r>
 800cff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cff6:	b111      	cbz	r1, 800cffe <_reclaim_reent+0x5e>
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 ff13 	bl	800de24 <_free_r>
 800cffe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d000:	b111      	cbz	r1, 800d008 <_reclaim_reent+0x68>
 800d002:	4620      	mov	r0, r4
 800d004:	f000 ff0e 	bl	800de24 <_free_r>
 800d008:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d00a:	b111      	cbz	r1, 800d012 <_reclaim_reent+0x72>
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 ff09 	bl	800de24 <_free_r>
 800d012:	6a23      	ldr	r3, [r4, #32]
 800d014:	b1b3      	cbz	r3, 800d044 <_reclaim_reent+0xa4>
 800d016:	4620      	mov	r0, r4
 800d018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d01c:	4718      	bx	r3
 800d01e:	5949      	ldr	r1, [r1, r5]
 800d020:	b941      	cbnz	r1, 800d034 <_reclaim_reent+0x94>
 800d022:	3504      	adds	r5, #4
 800d024:	69e3      	ldr	r3, [r4, #28]
 800d026:	2d80      	cmp	r5, #128	; 0x80
 800d028:	68d9      	ldr	r1, [r3, #12]
 800d02a:	d1f8      	bne.n	800d01e <_reclaim_reent+0x7e>
 800d02c:	4620      	mov	r0, r4
 800d02e:	f000 fef9 	bl	800de24 <_free_r>
 800d032:	e7c0      	b.n	800cfb6 <_reclaim_reent+0x16>
 800d034:	680e      	ldr	r6, [r1, #0]
 800d036:	4620      	mov	r0, r4
 800d038:	f000 fef4 	bl	800de24 <_free_r>
 800d03c:	4631      	mov	r1, r6
 800d03e:	e7ef      	b.n	800d020 <_reclaim_reent+0x80>
 800d040:	2500      	movs	r5, #0
 800d042:	e7ef      	b.n	800d024 <_reclaim_reent+0x84>
 800d044:	bd70      	pop	{r4, r5, r6, pc}
 800d046:	bf00      	nop
 800d048:	200000e4 	.word	0x200000e4

0800d04c <_lseek_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4d07      	ldr	r5, [pc, #28]	; (800d06c <_lseek_r+0x20>)
 800d050:	4604      	mov	r4, r0
 800d052:	4608      	mov	r0, r1
 800d054:	4611      	mov	r1, r2
 800d056:	2200      	movs	r2, #0
 800d058:	602a      	str	r2, [r5, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	f7f4 fd40 	bl	8001ae0 <_lseek>
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	d102      	bne.n	800d06a <_lseek_r+0x1e>
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	b103      	cbz	r3, 800d06a <_lseek_r+0x1e>
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	20002a04 	.word	0x20002a04

0800d070 <_read_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4d07      	ldr	r5, [pc, #28]	; (800d090 <_read_r+0x20>)
 800d074:	4604      	mov	r4, r0
 800d076:	4608      	mov	r0, r1
 800d078:	4611      	mov	r1, r2
 800d07a:	2200      	movs	r2, #0
 800d07c:	602a      	str	r2, [r5, #0]
 800d07e:	461a      	mov	r2, r3
 800d080:	f7f4 fcce 	bl	8001a20 <_read>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_read_r+0x1e>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_read_r+0x1e>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	20002a04 	.word	0x20002a04

0800d094 <_write_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4d07      	ldr	r5, [pc, #28]	; (800d0b4 <_write_r+0x20>)
 800d098:	4604      	mov	r4, r0
 800d09a:	4608      	mov	r0, r1
 800d09c:	4611      	mov	r1, r2
 800d09e:	2200      	movs	r2, #0
 800d0a0:	602a      	str	r2, [r5, #0]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	f7f4 fcd9 	bl	8001a5a <_write>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_write_r+0x1e>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_write_r+0x1e>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	20002a04 	.word	0x20002a04

0800d0b8 <__errno>:
 800d0b8:	4b01      	ldr	r3, [pc, #4]	; (800d0c0 <__errno+0x8>)
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	200000e4 	.word	0x200000e4

0800d0c4 <__libc_init_array>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	4d0d      	ldr	r5, [pc, #52]	; (800d0fc <__libc_init_array+0x38>)
 800d0c8:	4c0d      	ldr	r4, [pc, #52]	; (800d100 <__libc_init_array+0x3c>)
 800d0ca:	1b64      	subs	r4, r4, r5
 800d0cc:	10a4      	asrs	r4, r4, #2
 800d0ce:	2600      	movs	r6, #0
 800d0d0:	42a6      	cmp	r6, r4
 800d0d2:	d109      	bne.n	800d0e8 <__libc_init_array+0x24>
 800d0d4:	4d0b      	ldr	r5, [pc, #44]	; (800d104 <__libc_init_array+0x40>)
 800d0d6:	4c0c      	ldr	r4, [pc, #48]	; (800d108 <__libc_init_array+0x44>)
 800d0d8:	f001 fe58 	bl	800ed8c <_init>
 800d0dc:	1b64      	subs	r4, r4, r5
 800d0de:	10a4      	asrs	r4, r4, #2
 800d0e0:	2600      	movs	r6, #0
 800d0e2:	42a6      	cmp	r6, r4
 800d0e4:	d105      	bne.n	800d0f2 <__libc_init_array+0x2e>
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ec:	4798      	blx	r3
 800d0ee:	3601      	adds	r6, #1
 800d0f0:	e7ee      	b.n	800d0d0 <__libc_init_array+0xc>
 800d0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f6:	4798      	blx	r3
 800d0f8:	3601      	adds	r6, #1
 800d0fa:	e7f2      	b.n	800d0e2 <__libc_init_array+0x1e>
 800d0fc:	0800f55c 	.word	0x0800f55c
 800d100:	0800f55c 	.word	0x0800f55c
 800d104:	0800f55c 	.word	0x0800f55c
 800d108:	0800f560 	.word	0x0800f560

0800d10c <__retarget_lock_init_recursive>:
 800d10c:	4770      	bx	lr

0800d10e <__retarget_lock_acquire_recursive>:
 800d10e:	4770      	bx	lr

0800d110 <__retarget_lock_release_recursive>:
 800d110:	4770      	bx	lr

0800d112 <memcpy>:
 800d112:	440a      	add	r2, r1
 800d114:	4291      	cmp	r1, r2
 800d116:	f100 33ff 	add.w	r3, r0, #4294967295
 800d11a:	d100      	bne.n	800d11e <memcpy+0xc>
 800d11c:	4770      	bx	lr
 800d11e:	b510      	push	{r4, lr}
 800d120:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d124:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d128:	4291      	cmp	r1, r2
 800d12a:	d1f9      	bne.n	800d120 <memcpy+0xe>
 800d12c:	bd10      	pop	{r4, pc}

0800d12e <quorem>:
 800d12e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d132:	6903      	ldr	r3, [r0, #16]
 800d134:	690c      	ldr	r4, [r1, #16]
 800d136:	42a3      	cmp	r3, r4
 800d138:	4607      	mov	r7, r0
 800d13a:	db7e      	blt.n	800d23a <quorem+0x10c>
 800d13c:	3c01      	subs	r4, #1
 800d13e:	f101 0814 	add.w	r8, r1, #20
 800d142:	f100 0514 	add.w	r5, r0, #20
 800d146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d154:	3301      	adds	r3, #1
 800d156:	429a      	cmp	r2, r3
 800d158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d15c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d160:	fbb2 f6f3 	udiv	r6, r2, r3
 800d164:	d331      	bcc.n	800d1ca <quorem+0x9c>
 800d166:	f04f 0e00 	mov.w	lr, #0
 800d16a:	4640      	mov	r0, r8
 800d16c:	46ac      	mov	ip, r5
 800d16e:	46f2      	mov	sl, lr
 800d170:	f850 2b04 	ldr.w	r2, [r0], #4
 800d174:	b293      	uxth	r3, r2
 800d176:	fb06 e303 	mla	r3, r6, r3, lr
 800d17a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d17e:	0c1a      	lsrs	r2, r3, #16
 800d180:	b29b      	uxth	r3, r3
 800d182:	ebaa 0303 	sub.w	r3, sl, r3
 800d186:	f8dc a000 	ldr.w	sl, [ip]
 800d18a:	fa13 f38a 	uxtah	r3, r3, sl
 800d18e:	fb06 220e 	mla	r2, r6, lr, r2
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	9b00      	ldr	r3, [sp, #0]
 800d196:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d19a:	b292      	uxth	r2, r2
 800d19c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d1a8:	4581      	cmp	r9, r0
 800d1aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1ae:	f84c 3b04 	str.w	r3, [ip], #4
 800d1b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d1b6:	d2db      	bcs.n	800d170 <quorem+0x42>
 800d1b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d1bc:	b92b      	cbnz	r3, 800d1ca <quorem+0x9c>
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	3b04      	subs	r3, #4
 800d1c2:	429d      	cmp	r5, r3
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	d32c      	bcc.n	800d222 <quorem+0xf4>
 800d1c8:	613c      	str	r4, [r7, #16]
 800d1ca:	4638      	mov	r0, r7
 800d1cc:	f001 f9a6 	bl	800e51c <__mcmp>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	db22      	blt.n	800d21a <quorem+0xec>
 800d1d4:	3601      	adds	r6, #1
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	2000      	movs	r0, #0
 800d1da:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1de:	f8d1 c000 	ldr.w	ip, [r1]
 800d1e2:	b293      	uxth	r3, r2
 800d1e4:	1ac3      	subs	r3, r0, r3
 800d1e6:	0c12      	lsrs	r2, r2, #16
 800d1e8:	fa13 f38c 	uxtah	r3, r3, ip
 800d1ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d1f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1fa:	45c1      	cmp	r9, r8
 800d1fc:	f841 3b04 	str.w	r3, [r1], #4
 800d200:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d204:	d2e9      	bcs.n	800d1da <quorem+0xac>
 800d206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d20a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d20e:	b922      	cbnz	r2, 800d21a <quorem+0xec>
 800d210:	3b04      	subs	r3, #4
 800d212:	429d      	cmp	r5, r3
 800d214:	461a      	mov	r2, r3
 800d216:	d30a      	bcc.n	800d22e <quorem+0x100>
 800d218:	613c      	str	r4, [r7, #16]
 800d21a:	4630      	mov	r0, r6
 800d21c:	b003      	add	sp, #12
 800d21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d222:	6812      	ldr	r2, [r2, #0]
 800d224:	3b04      	subs	r3, #4
 800d226:	2a00      	cmp	r2, #0
 800d228:	d1ce      	bne.n	800d1c8 <quorem+0x9a>
 800d22a:	3c01      	subs	r4, #1
 800d22c:	e7c9      	b.n	800d1c2 <quorem+0x94>
 800d22e:	6812      	ldr	r2, [r2, #0]
 800d230:	3b04      	subs	r3, #4
 800d232:	2a00      	cmp	r2, #0
 800d234:	d1f0      	bne.n	800d218 <quorem+0xea>
 800d236:	3c01      	subs	r4, #1
 800d238:	e7eb      	b.n	800d212 <quorem+0xe4>
 800d23a:	2000      	movs	r0, #0
 800d23c:	e7ee      	b.n	800d21c <quorem+0xee>
	...

0800d240 <_dtoa_r>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	ed2d 8b04 	vpush	{d8-d9}
 800d248:	69c5      	ldr	r5, [r0, #28]
 800d24a:	b093      	sub	sp, #76	; 0x4c
 800d24c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d250:	ec57 6b10 	vmov	r6, r7, d0
 800d254:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d258:	9107      	str	r1, [sp, #28]
 800d25a:	4604      	mov	r4, r0
 800d25c:	920a      	str	r2, [sp, #40]	; 0x28
 800d25e:	930d      	str	r3, [sp, #52]	; 0x34
 800d260:	b975      	cbnz	r5, 800d280 <_dtoa_r+0x40>
 800d262:	2010      	movs	r0, #16
 800d264:	f000 fe2a 	bl	800debc <malloc>
 800d268:	4602      	mov	r2, r0
 800d26a:	61e0      	str	r0, [r4, #28]
 800d26c:	b920      	cbnz	r0, 800d278 <_dtoa_r+0x38>
 800d26e:	4bae      	ldr	r3, [pc, #696]	; (800d528 <_dtoa_r+0x2e8>)
 800d270:	21ef      	movs	r1, #239	; 0xef
 800d272:	48ae      	ldr	r0, [pc, #696]	; (800d52c <_dtoa_r+0x2ec>)
 800d274:	f001 fcd8 	bl	800ec28 <__assert_func>
 800d278:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d27c:	6005      	str	r5, [r0, #0]
 800d27e:	60c5      	str	r5, [r0, #12]
 800d280:	69e3      	ldr	r3, [r4, #28]
 800d282:	6819      	ldr	r1, [r3, #0]
 800d284:	b151      	cbz	r1, 800d29c <_dtoa_r+0x5c>
 800d286:	685a      	ldr	r2, [r3, #4]
 800d288:	604a      	str	r2, [r1, #4]
 800d28a:	2301      	movs	r3, #1
 800d28c:	4093      	lsls	r3, r2
 800d28e:	608b      	str	r3, [r1, #8]
 800d290:	4620      	mov	r0, r4
 800d292:	f000 ff07 	bl	800e0a4 <_Bfree>
 800d296:	69e3      	ldr	r3, [r4, #28]
 800d298:	2200      	movs	r2, #0
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	1e3b      	subs	r3, r7, #0
 800d29e:	bfbb      	ittet	lt
 800d2a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d2a4:	9303      	strlt	r3, [sp, #12]
 800d2a6:	2300      	movge	r3, #0
 800d2a8:	2201      	movlt	r2, #1
 800d2aa:	bfac      	ite	ge
 800d2ac:	f8c8 3000 	strge.w	r3, [r8]
 800d2b0:	f8c8 2000 	strlt.w	r2, [r8]
 800d2b4:	4b9e      	ldr	r3, [pc, #632]	; (800d530 <_dtoa_r+0x2f0>)
 800d2b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d2ba:	ea33 0308 	bics.w	r3, r3, r8
 800d2be:	d11b      	bne.n	800d2f8 <_dtoa_r+0xb8>
 800d2c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d2cc:	4333      	orrs	r3, r6
 800d2ce:	f000 8593 	beq.w	800ddf8 <_dtoa_r+0xbb8>
 800d2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2d4:	b963      	cbnz	r3, 800d2f0 <_dtoa_r+0xb0>
 800d2d6:	4b97      	ldr	r3, [pc, #604]	; (800d534 <_dtoa_r+0x2f4>)
 800d2d8:	e027      	b.n	800d32a <_dtoa_r+0xea>
 800d2da:	4b97      	ldr	r3, [pc, #604]	; (800d538 <_dtoa_r+0x2f8>)
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	3308      	adds	r3, #8
 800d2e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d2e2:	6013      	str	r3, [r2, #0]
 800d2e4:	9800      	ldr	r0, [sp, #0]
 800d2e6:	b013      	add	sp, #76	; 0x4c
 800d2e8:	ecbd 8b04 	vpop	{d8-d9}
 800d2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f0:	4b90      	ldr	r3, [pc, #576]	; (800d534 <_dtoa_r+0x2f4>)
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	3303      	adds	r3, #3
 800d2f6:	e7f3      	b.n	800d2e0 <_dtoa_r+0xa0>
 800d2f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	ec51 0b17 	vmov	r0, r1, d7
 800d302:	eeb0 8a47 	vmov.f32	s16, s14
 800d306:	eef0 8a67 	vmov.f32	s17, s15
 800d30a:	2300      	movs	r3, #0
 800d30c:	f7f3 fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d310:	4681      	mov	r9, r0
 800d312:	b160      	cbz	r0, 800d32e <_dtoa_r+0xee>
 800d314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d316:	2301      	movs	r3, #1
 800d318:	6013      	str	r3, [r2, #0]
 800d31a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 8568 	beq.w	800ddf2 <_dtoa_r+0xbb2>
 800d322:	4b86      	ldr	r3, [pc, #536]	; (800d53c <_dtoa_r+0x2fc>)
 800d324:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d326:	6013      	str	r3, [r2, #0]
 800d328:	3b01      	subs	r3, #1
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	e7da      	b.n	800d2e4 <_dtoa_r+0xa4>
 800d32e:	aa10      	add	r2, sp, #64	; 0x40
 800d330:	a911      	add	r1, sp, #68	; 0x44
 800d332:	4620      	mov	r0, r4
 800d334:	eeb0 0a48 	vmov.f32	s0, s16
 800d338:	eef0 0a68 	vmov.f32	s1, s17
 800d33c:	f001 f994 	bl	800e668 <__d2b>
 800d340:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d344:	4682      	mov	sl, r0
 800d346:	2d00      	cmp	r5, #0
 800d348:	d07f      	beq.n	800d44a <_dtoa_r+0x20a>
 800d34a:	ee18 3a90 	vmov	r3, s17
 800d34e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d352:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d356:	ec51 0b18 	vmov	r0, r1, d8
 800d35a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d35e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d362:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d366:	4619      	mov	r1, r3
 800d368:	2200      	movs	r2, #0
 800d36a:	4b75      	ldr	r3, [pc, #468]	; (800d540 <_dtoa_r+0x300>)
 800d36c:	f7f2 ff94 	bl	8000298 <__aeabi_dsub>
 800d370:	a367      	add	r3, pc, #412	; (adr r3, 800d510 <_dtoa_r+0x2d0>)
 800d372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d376:	f7f3 f947 	bl	8000608 <__aeabi_dmul>
 800d37a:	a367      	add	r3, pc, #412	; (adr r3, 800d518 <_dtoa_r+0x2d8>)
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f2 ff8c 	bl	800029c <__adddf3>
 800d384:	4606      	mov	r6, r0
 800d386:	4628      	mov	r0, r5
 800d388:	460f      	mov	r7, r1
 800d38a:	f7f3 f8d3 	bl	8000534 <__aeabi_i2d>
 800d38e:	a364      	add	r3, pc, #400	; (adr r3, 800d520 <_dtoa_r+0x2e0>)
 800d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d394:	f7f3 f938 	bl	8000608 <__aeabi_dmul>
 800d398:	4602      	mov	r2, r0
 800d39a:	460b      	mov	r3, r1
 800d39c:	4630      	mov	r0, r6
 800d39e:	4639      	mov	r1, r7
 800d3a0:	f7f2 ff7c 	bl	800029c <__adddf3>
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	460f      	mov	r7, r1
 800d3a8:	f7f3 fbde 	bl	8000b68 <__aeabi_d2iz>
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	4683      	mov	fp, r0
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	f7f3 fb99 	bl	8000aec <__aeabi_dcmplt>
 800d3ba:	b148      	cbz	r0, 800d3d0 <_dtoa_r+0x190>
 800d3bc:	4658      	mov	r0, fp
 800d3be:	f7f3 f8b9 	bl	8000534 <__aeabi_i2d>
 800d3c2:	4632      	mov	r2, r6
 800d3c4:	463b      	mov	r3, r7
 800d3c6:	f7f3 fb87 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3ca:	b908      	cbnz	r0, 800d3d0 <_dtoa_r+0x190>
 800d3cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3d0:	f1bb 0f16 	cmp.w	fp, #22
 800d3d4:	d857      	bhi.n	800d486 <_dtoa_r+0x246>
 800d3d6:	4b5b      	ldr	r3, [pc, #364]	; (800d544 <_dtoa_r+0x304>)
 800d3d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e0:	ec51 0b18 	vmov	r0, r1, d8
 800d3e4:	f7f3 fb82 	bl	8000aec <__aeabi_dcmplt>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d04e      	beq.n	800d48a <_dtoa_r+0x24a>
 800d3ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	930c      	str	r3, [sp, #48]	; 0x30
 800d3f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3f6:	1b5b      	subs	r3, r3, r5
 800d3f8:	1e5a      	subs	r2, r3, #1
 800d3fa:	bf45      	ittet	mi
 800d3fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800d400:	9305      	strmi	r3, [sp, #20]
 800d402:	2300      	movpl	r3, #0
 800d404:	2300      	movmi	r3, #0
 800d406:	9206      	str	r2, [sp, #24]
 800d408:	bf54      	ite	pl
 800d40a:	9305      	strpl	r3, [sp, #20]
 800d40c:	9306      	strmi	r3, [sp, #24]
 800d40e:	f1bb 0f00 	cmp.w	fp, #0
 800d412:	db3c      	blt.n	800d48e <_dtoa_r+0x24e>
 800d414:	9b06      	ldr	r3, [sp, #24]
 800d416:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d41a:	445b      	add	r3, fp
 800d41c:	9306      	str	r3, [sp, #24]
 800d41e:	2300      	movs	r3, #0
 800d420:	9308      	str	r3, [sp, #32]
 800d422:	9b07      	ldr	r3, [sp, #28]
 800d424:	2b09      	cmp	r3, #9
 800d426:	d868      	bhi.n	800d4fa <_dtoa_r+0x2ba>
 800d428:	2b05      	cmp	r3, #5
 800d42a:	bfc4      	itt	gt
 800d42c:	3b04      	subgt	r3, #4
 800d42e:	9307      	strgt	r3, [sp, #28]
 800d430:	9b07      	ldr	r3, [sp, #28]
 800d432:	f1a3 0302 	sub.w	r3, r3, #2
 800d436:	bfcc      	ite	gt
 800d438:	2500      	movgt	r5, #0
 800d43a:	2501      	movle	r5, #1
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	f200 8085 	bhi.w	800d54c <_dtoa_r+0x30c>
 800d442:	e8df f003 	tbb	[pc, r3]
 800d446:	3b2e      	.short	0x3b2e
 800d448:	5839      	.short	0x5839
 800d44a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d44e:	441d      	add	r5, r3
 800d450:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d454:	2b20      	cmp	r3, #32
 800d456:	bfc1      	itttt	gt
 800d458:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d45c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d460:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d464:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d468:	bfd6      	itet	le
 800d46a:	f1c3 0320 	rsble	r3, r3, #32
 800d46e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d472:	fa06 f003 	lslle.w	r0, r6, r3
 800d476:	f7f3 f84d 	bl	8000514 <__aeabi_ui2d>
 800d47a:	2201      	movs	r2, #1
 800d47c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d480:	3d01      	subs	r5, #1
 800d482:	920e      	str	r2, [sp, #56]	; 0x38
 800d484:	e76f      	b.n	800d366 <_dtoa_r+0x126>
 800d486:	2301      	movs	r3, #1
 800d488:	e7b3      	b.n	800d3f2 <_dtoa_r+0x1b2>
 800d48a:	900c      	str	r0, [sp, #48]	; 0x30
 800d48c:	e7b2      	b.n	800d3f4 <_dtoa_r+0x1b4>
 800d48e:	9b05      	ldr	r3, [sp, #20]
 800d490:	eba3 030b 	sub.w	r3, r3, fp
 800d494:	9305      	str	r3, [sp, #20]
 800d496:	f1cb 0300 	rsb	r3, fp, #0
 800d49a:	9308      	str	r3, [sp, #32]
 800d49c:	2300      	movs	r3, #0
 800d49e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4a0:	e7bf      	b.n	800d422 <_dtoa_r+0x1e2>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	dc52      	bgt.n	800d552 <_dtoa_r+0x312>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	9304      	str	r3, [sp, #16]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	920a      	str	r2, [sp, #40]	; 0x28
 800d4b6:	e00b      	b.n	800d4d0 <_dtoa_r+0x290>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e7f3      	b.n	800d4a4 <_dtoa_r+0x264>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4c2:	445b      	add	r3, fp
 800d4c4:	9301      	str	r3, [sp, #4]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	9304      	str	r3, [sp, #16]
 800d4cc:	bfb8      	it	lt
 800d4ce:	2301      	movlt	r3, #1
 800d4d0:	69e0      	ldr	r0, [r4, #28]
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	2204      	movs	r2, #4
 800d4d6:	f102 0614 	add.w	r6, r2, #20
 800d4da:	429e      	cmp	r6, r3
 800d4dc:	d93d      	bls.n	800d55a <_dtoa_r+0x31a>
 800d4de:	6041      	str	r1, [r0, #4]
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fd9f 	bl	800e024 <_Balloc>
 800d4e6:	9000      	str	r0, [sp, #0]
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d139      	bne.n	800d560 <_dtoa_r+0x320>
 800d4ec:	4b16      	ldr	r3, [pc, #88]	; (800d548 <_dtoa_r+0x308>)
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	f240 11af 	movw	r1, #431	; 0x1af
 800d4f4:	e6bd      	b.n	800d272 <_dtoa_r+0x32>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e7e1      	b.n	800d4be <_dtoa_r+0x27e>
 800d4fa:	2501      	movs	r5, #1
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	9307      	str	r3, [sp, #28]
 800d500:	9509      	str	r5, [sp, #36]	; 0x24
 800d502:	f04f 33ff 	mov.w	r3, #4294967295
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	2200      	movs	r2, #0
 800d50c:	2312      	movs	r3, #18
 800d50e:	e7d1      	b.n	800d4b4 <_dtoa_r+0x274>
 800d510:	636f4361 	.word	0x636f4361
 800d514:	3fd287a7 	.word	0x3fd287a7
 800d518:	8b60c8b3 	.word	0x8b60c8b3
 800d51c:	3fc68a28 	.word	0x3fc68a28
 800d520:	509f79fb 	.word	0x509f79fb
 800d524:	3fd34413 	.word	0x3fd34413
 800d528:	0800f22d 	.word	0x0800f22d
 800d52c:	0800f244 	.word	0x0800f244
 800d530:	7ff00000 	.word	0x7ff00000
 800d534:	0800f229 	.word	0x0800f229
 800d538:	0800f220 	.word	0x0800f220
 800d53c:	0800f1fd 	.word	0x0800f1fd
 800d540:	3ff80000 	.word	0x3ff80000
 800d544:	0800f330 	.word	0x0800f330
 800d548:	0800f29c 	.word	0x0800f29c
 800d54c:	2301      	movs	r3, #1
 800d54e:	9309      	str	r3, [sp, #36]	; 0x24
 800d550:	e7d7      	b.n	800d502 <_dtoa_r+0x2c2>
 800d552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	e7ba      	b.n	800d4d0 <_dtoa_r+0x290>
 800d55a:	3101      	adds	r1, #1
 800d55c:	0052      	lsls	r2, r2, #1
 800d55e:	e7ba      	b.n	800d4d6 <_dtoa_r+0x296>
 800d560:	69e3      	ldr	r3, [r4, #28]
 800d562:	9a00      	ldr	r2, [sp, #0]
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	9b04      	ldr	r3, [sp, #16]
 800d568:	2b0e      	cmp	r3, #14
 800d56a:	f200 80a8 	bhi.w	800d6be <_dtoa_r+0x47e>
 800d56e:	2d00      	cmp	r5, #0
 800d570:	f000 80a5 	beq.w	800d6be <_dtoa_r+0x47e>
 800d574:	f1bb 0f00 	cmp.w	fp, #0
 800d578:	dd38      	ble.n	800d5ec <_dtoa_r+0x3ac>
 800d57a:	4bc0      	ldr	r3, [pc, #768]	; (800d87c <_dtoa_r+0x63c>)
 800d57c:	f00b 020f 	and.w	r2, fp, #15
 800d580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d584:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d588:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d58c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d590:	d019      	beq.n	800d5c6 <_dtoa_r+0x386>
 800d592:	4bbb      	ldr	r3, [pc, #748]	; (800d880 <_dtoa_r+0x640>)
 800d594:	ec51 0b18 	vmov	r0, r1, d8
 800d598:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d59c:	f7f3 f95e 	bl	800085c <__aeabi_ddiv>
 800d5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5a4:	f008 080f 	and.w	r8, r8, #15
 800d5a8:	2503      	movs	r5, #3
 800d5aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d880 <_dtoa_r+0x640>
 800d5ae:	f1b8 0f00 	cmp.w	r8, #0
 800d5b2:	d10a      	bne.n	800d5ca <_dtoa_r+0x38a>
 800d5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5b8:	4632      	mov	r2, r6
 800d5ba:	463b      	mov	r3, r7
 800d5bc:	f7f3 f94e 	bl	800085c <__aeabi_ddiv>
 800d5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5c4:	e02b      	b.n	800d61e <_dtoa_r+0x3de>
 800d5c6:	2502      	movs	r5, #2
 800d5c8:	e7ef      	b.n	800d5aa <_dtoa_r+0x36a>
 800d5ca:	f018 0f01 	tst.w	r8, #1
 800d5ce:	d008      	beq.n	800d5e2 <_dtoa_r+0x3a2>
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	4639      	mov	r1, r7
 800d5d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d5d8:	f7f3 f816 	bl	8000608 <__aeabi_dmul>
 800d5dc:	3501      	adds	r5, #1
 800d5de:	4606      	mov	r6, r0
 800d5e0:	460f      	mov	r7, r1
 800d5e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d5e6:	f109 0908 	add.w	r9, r9, #8
 800d5ea:	e7e0      	b.n	800d5ae <_dtoa_r+0x36e>
 800d5ec:	f000 809f 	beq.w	800d72e <_dtoa_r+0x4ee>
 800d5f0:	f1cb 0600 	rsb	r6, fp, #0
 800d5f4:	4ba1      	ldr	r3, [pc, #644]	; (800d87c <_dtoa_r+0x63c>)
 800d5f6:	4fa2      	ldr	r7, [pc, #648]	; (800d880 <_dtoa_r+0x640>)
 800d5f8:	f006 020f 	and.w	r2, r6, #15
 800d5fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d604:	ec51 0b18 	vmov	r0, r1, d8
 800d608:	f7f2 fffe 	bl	8000608 <__aeabi_dmul>
 800d60c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d610:	1136      	asrs	r6, r6, #4
 800d612:	2300      	movs	r3, #0
 800d614:	2502      	movs	r5, #2
 800d616:	2e00      	cmp	r6, #0
 800d618:	d17e      	bne.n	800d718 <_dtoa_r+0x4d8>
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1d0      	bne.n	800d5c0 <_dtoa_r+0x380>
 800d61e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d620:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 8084 	beq.w	800d732 <_dtoa_r+0x4f2>
 800d62a:	4b96      	ldr	r3, [pc, #600]	; (800d884 <_dtoa_r+0x644>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	4640      	mov	r0, r8
 800d630:	4649      	mov	r1, r9
 800d632:	f7f3 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800d636:	2800      	cmp	r0, #0
 800d638:	d07b      	beq.n	800d732 <_dtoa_r+0x4f2>
 800d63a:	9b04      	ldr	r3, [sp, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d078      	beq.n	800d732 <_dtoa_r+0x4f2>
 800d640:	9b01      	ldr	r3, [sp, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	dd39      	ble.n	800d6ba <_dtoa_r+0x47a>
 800d646:	4b90      	ldr	r3, [pc, #576]	; (800d888 <_dtoa_r+0x648>)
 800d648:	2200      	movs	r2, #0
 800d64a:	4640      	mov	r0, r8
 800d64c:	4649      	mov	r1, r9
 800d64e:	f7f2 ffdb 	bl	8000608 <__aeabi_dmul>
 800d652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d656:	9e01      	ldr	r6, [sp, #4]
 800d658:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d65c:	3501      	adds	r5, #1
 800d65e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d662:	4628      	mov	r0, r5
 800d664:	f7f2 ff66 	bl	8000534 <__aeabi_i2d>
 800d668:	4642      	mov	r2, r8
 800d66a:	464b      	mov	r3, r9
 800d66c:	f7f2 ffcc 	bl	8000608 <__aeabi_dmul>
 800d670:	4b86      	ldr	r3, [pc, #536]	; (800d88c <_dtoa_r+0x64c>)
 800d672:	2200      	movs	r2, #0
 800d674:	f7f2 fe12 	bl	800029c <__adddf3>
 800d678:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d680:	9303      	str	r3, [sp, #12]
 800d682:	2e00      	cmp	r6, #0
 800d684:	d158      	bne.n	800d738 <_dtoa_r+0x4f8>
 800d686:	4b82      	ldr	r3, [pc, #520]	; (800d890 <_dtoa_r+0x650>)
 800d688:	2200      	movs	r2, #0
 800d68a:	4640      	mov	r0, r8
 800d68c:	4649      	mov	r1, r9
 800d68e:	f7f2 fe03 	bl	8000298 <__aeabi_dsub>
 800d692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d696:	4680      	mov	r8, r0
 800d698:	4689      	mov	r9, r1
 800d69a:	f7f3 fa45 	bl	8000b28 <__aeabi_dcmpgt>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	f040 8296 	bne.w	800dbd0 <_dtoa_r+0x990>
 800d6a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6ae:	4649      	mov	r1, r9
 800d6b0:	f7f3 fa1c 	bl	8000aec <__aeabi_dcmplt>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	f040 8289 	bne.w	800dbcc <_dtoa_r+0x98c>
 800d6ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d6be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f2c0 814e 	blt.w	800d962 <_dtoa_r+0x722>
 800d6c6:	f1bb 0f0e 	cmp.w	fp, #14
 800d6ca:	f300 814a 	bgt.w	800d962 <_dtoa_r+0x722>
 800d6ce:	4b6b      	ldr	r3, [pc, #428]	; (800d87c <_dtoa_r+0x63c>)
 800d6d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d6d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f280 80dc 	bge.w	800d898 <_dtoa_r+0x658>
 800d6e0:	9b04      	ldr	r3, [sp, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f300 80d8 	bgt.w	800d898 <_dtoa_r+0x658>
 800d6e8:	f040 826f 	bne.w	800dbca <_dtoa_r+0x98a>
 800d6ec:	4b68      	ldr	r3, [pc, #416]	; (800d890 <_dtoa_r+0x650>)
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	4649      	mov	r1, r9
 800d6f4:	f7f2 ff88 	bl	8000608 <__aeabi_dmul>
 800d6f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6fc:	f7f3 fa0a 	bl	8000b14 <__aeabi_dcmpge>
 800d700:	9e04      	ldr	r6, [sp, #16]
 800d702:	4637      	mov	r7, r6
 800d704:	2800      	cmp	r0, #0
 800d706:	f040 8245 	bne.w	800db94 <_dtoa_r+0x954>
 800d70a:	9d00      	ldr	r5, [sp, #0]
 800d70c:	2331      	movs	r3, #49	; 0x31
 800d70e:	f805 3b01 	strb.w	r3, [r5], #1
 800d712:	f10b 0b01 	add.w	fp, fp, #1
 800d716:	e241      	b.n	800db9c <_dtoa_r+0x95c>
 800d718:	07f2      	lsls	r2, r6, #31
 800d71a:	d505      	bpl.n	800d728 <_dtoa_r+0x4e8>
 800d71c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d720:	f7f2 ff72 	bl	8000608 <__aeabi_dmul>
 800d724:	3501      	adds	r5, #1
 800d726:	2301      	movs	r3, #1
 800d728:	1076      	asrs	r6, r6, #1
 800d72a:	3708      	adds	r7, #8
 800d72c:	e773      	b.n	800d616 <_dtoa_r+0x3d6>
 800d72e:	2502      	movs	r5, #2
 800d730:	e775      	b.n	800d61e <_dtoa_r+0x3de>
 800d732:	9e04      	ldr	r6, [sp, #16]
 800d734:	465f      	mov	r7, fp
 800d736:	e792      	b.n	800d65e <_dtoa_r+0x41e>
 800d738:	9900      	ldr	r1, [sp, #0]
 800d73a:	4b50      	ldr	r3, [pc, #320]	; (800d87c <_dtoa_r+0x63c>)
 800d73c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d740:	4431      	add	r1, r6
 800d742:	9102      	str	r1, [sp, #8]
 800d744:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d746:	eeb0 9a47 	vmov.f32	s18, s14
 800d74a:	eef0 9a67 	vmov.f32	s19, s15
 800d74e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d756:	2900      	cmp	r1, #0
 800d758:	d044      	beq.n	800d7e4 <_dtoa_r+0x5a4>
 800d75a:	494e      	ldr	r1, [pc, #312]	; (800d894 <_dtoa_r+0x654>)
 800d75c:	2000      	movs	r0, #0
 800d75e:	f7f3 f87d 	bl	800085c <__aeabi_ddiv>
 800d762:	ec53 2b19 	vmov	r2, r3, d9
 800d766:	f7f2 fd97 	bl	8000298 <__aeabi_dsub>
 800d76a:	9d00      	ldr	r5, [sp, #0]
 800d76c:	ec41 0b19 	vmov	d9, r0, r1
 800d770:	4649      	mov	r1, r9
 800d772:	4640      	mov	r0, r8
 800d774:	f7f3 f9f8 	bl	8000b68 <__aeabi_d2iz>
 800d778:	4606      	mov	r6, r0
 800d77a:	f7f2 fedb 	bl	8000534 <__aeabi_i2d>
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	4640      	mov	r0, r8
 800d784:	4649      	mov	r1, r9
 800d786:	f7f2 fd87 	bl	8000298 <__aeabi_dsub>
 800d78a:	3630      	adds	r6, #48	; 0x30
 800d78c:	f805 6b01 	strb.w	r6, [r5], #1
 800d790:	ec53 2b19 	vmov	r2, r3, d9
 800d794:	4680      	mov	r8, r0
 800d796:	4689      	mov	r9, r1
 800d798:	f7f3 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d164      	bne.n	800d86a <_dtoa_r+0x62a>
 800d7a0:	4642      	mov	r2, r8
 800d7a2:	464b      	mov	r3, r9
 800d7a4:	4937      	ldr	r1, [pc, #220]	; (800d884 <_dtoa_r+0x644>)
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	f7f2 fd76 	bl	8000298 <__aeabi_dsub>
 800d7ac:	ec53 2b19 	vmov	r2, r3, d9
 800d7b0:	f7f3 f99c 	bl	8000aec <__aeabi_dcmplt>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	f040 80b6 	bne.w	800d926 <_dtoa_r+0x6e6>
 800d7ba:	9b02      	ldr	r3, [sp, #8]
 800d7bc:	429d      	cmp	r5, r3
 800d7be:	f43f af7c 	beq.w	800d6ba <_dtoa_r+0x47a>
 800d7c2:	4b31      	ldr	r3, [pc, #196]	; (800d888 <_dtoa_r+0x648>)
 800d7c4:	ec51 0b19 	vmov	r0, r1, d9
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f7f2 ff1d 	bl	8000608 <__aeabi_dmul>
 800d7ce:	4b2e      	ldr	r3, [pc, #184]	; (800d888 <_dtoa_r+0x648>)
 800d7d0:	ec41 0b19 	vmov	d9, r0, r1
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	4649      	mov	r1, r9
 800d7da:	f7f2 ff15 	bl	8000608 <__aeabi_dmul>
 800d7de:	4680      	mov	r8, r0
 800d7e0:	4689      	mov	r9, r1
 800d7e2:	e7c5      	b.n	800d770 <_dtoa_r+0x530>
 800d7e4:	ec51 0b17 	vmov	r0, r1, d7
 800d7e8:	f7f2 ff0e 	bl	8000608 <__aeabi_dmul>
 800d7ec:	9b02      	ldr	r3, [sp, #8]
 800d7ee:	9d00      	ldr	r5, [sp, #0]
 800d7f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7f2:	ec41 0b19 	vmov	d9, r0, r1
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	f7f3 f9b5 	bl	8000b68 <__aeabi_d2iz>
 800d7fe:	4606      	mov	r6, r0
 800d800:	f7f2 fe98 	bl	8000534 <__aeabi_i2d>
 800d804:	3630      	adds	r6, #48	; 0x30
 800d806:	4602      	mov	r2, r0
 800d808:	460b      	mov	r3, r1
 800d80a:	4640      	mov	r0, r8
 800d80c:	4649      	mov	r1, r9
 800d80e:	f7f2 fd43 	bl	8000298 <__aeabi_dsub>
 800d812:	f805 6b01 	strb.w	r6, [r5], #1
 800d816:	9b02      	ldr	r3, [sp, #8]
 800d818:	429d      	cmp	r5, r3
 800d81a:	4680      	mov	r8, r0
 800d81c:	4689      	mov	r9, r1
 800d81e:	f04f 0200 	mov.w	r2, #0
 800d822:	d124      	bne.n	800d86e <_dtoa_r+0x62e>
 800d824:	4b1b      	ldr	r3, [pc, #108]	; (800d894 <_dtoa_r+0x654>)
 800d826:	ec51 0b19 	vmov	r0, r1, d9
 800d82a:	f7f2 fd37 	bl	800029c <__adddf3>
 800d82e:	4602      	mov	r2, r0
 800d830:	460b      	mov	r3, r1
 800d832:	4640      	mov	r0, r8
 800d834:	4649      	mov	r1, r9
 800d836:	f7f3 f977 	bl	8000b28 <__aeabi_dcmpgt>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d173      	bne.n	800d926 <_dtoa_r+0x6e6>
 800d83e:	ec53 2b19 	vmov	r2, r3, d9
 800d842:	4914      	ldr	r1, [pc, #80]	; (800d894 <_dtoa_r+0x654>)
 800d844:	2000      	movs	r0, #0
 800d846:	f7f2 fd27 	bl	8000298 <__aeabi_dsub>
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	4640      	mov	r0, r8
 800d850:	4649      	mov	r1, r9
 800d852:	f7f3 f94b 	bl	8000aec <__aeabi_dcmplt>
 800d856:	2800      	cmp	r0, #0
 800d858:	f43f af2f 	beq.w	800d6ba <_dtoa_r+0x47a>
 800d85c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d85e:	1e6b      	subs	r3, r5, #1
 800d860:	930f      	str	r3, [sp, #60]	; 0x3c
 800d862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d866:	2b30      	cmp	r3, #48	; 0x30
 800d868:	d0f8      	beq.n	800d85c <_dtoa_r+0x61c>
 800d86a:	46bb      	mov	fp, r7
 800d86c:	e04a      	b.n	800d904 <_dtoa_r+0x6c4>
 800d86e:	4b06      	ldr	r3, [pc, #24]	; (800d888 <_dtoa_r+0x648>)
 800d870:	f7f2 feca 	bl	8000608 <__aeabi_dmul>
 800d874:	4680      	mov	r8, r0
 800d876:	4689      	mov	r9, r1
 800d878:	e7bd      	b.n	800d7f6 <_dtoa_r+0x5b6>
 800d87a:	bf00      	nop
 800d87c:	0800f330 	.word	0x0800f330
 800d880:	0800f308 	.word	0x0800f308
 800d884:	3ff00000 	.word	0x3ff00000
 800d888:	40240000 	.word	0x40240000
 800d88c:	401c0000 	.word	0x401c0000
 800d890:	40140000 	.word	0x40140000
 800d894:	3fe00000 	.word	0x3fe00000
 800d898:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d89c:	9d00      	ldr	r5, [sp, #0]
 800d89e:	4642      	mov	r2, r8
 800d8a0:	464b      	mov	r3, r9
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	f7f2 ffd9 	bl	800085c <__aeabi_ddiv>
 800d8aa:	f7f3 f95d 	bl	8000b68 <__aeabi_d2iz>
 800d8ae:	9001      	str	r0, [sp, #4]
 800d8b0:	f7f2 fe40 	bl	8000534 <__aeabi_i2d>
 800d8b4:	4642      	mov	r2, r8
 800d8b6:	464b      	mov	r3, r9
 800d8b8:	f7f2 fea6 	bl	8000608 <__aeabi_dmul>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	460b      	mov	r3, r1
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	f7f2 fce8 	bl	8000298 <__aeabi_dsub>
 800d8c8:	9e01      	ldr	r6, [sp, #4]
 800d8ca:	9f04      	ldr	r7, [sp, #16]
 800d8cc:	3630      	adds	r6, #48	; 0x30
 800d8ce:	f805 6b01 	strb.w	r6, [r5], #1
 800d8d2:	9e00      	ldr	r6, [sp, #0]
 800d8d4:	1bae      	subs	r6, r5, r6
 800d8d6:	42b7      	cmp	r7, r6
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	d134      	bne.n	800d948 <_dtoa_r+0x708>
 800d8de:	f7f2 fcdd 	bl	800029c <__adddf3>
 800d8e2:	4642      	mov	r2, r8
 800d8e4:	464b      	mov	r3, r9
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	460f      	mov	r7, r1
 800d8ea:	f7f3 f91d 	bl	8000b28 <__aeabi_dcmpgt>
 800d8ee:	b9c8      	cbnz	r0, 800d924 <_dtoa_r+0x6e4>
 800d8f0:	4642      	mov	r2, r8
 800d8f2:	464b      	mov	r3, r9
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	f7f3 f8ee 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8fc:	b110      	cbz	r0, 800d904 <_dtoa_r+0x6c4>
 800d8fe:	9b01      	ldr	r3, [sp, #4]
 800d900:	07db      	lsls	r3, r3, #31
 800d902:	d40f      	bmi.n	800d924 <_dtoa_r+0x6e4>
 800d904:	4651      	mov	r1, sl
 800d906:	4620      	mov	r0, r4
 800d908:	f000 fbcc 	bl	800e0a4 <_Bfree>
 800d90c:	2300      	movs	r3, #0
 800d90e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d910:	702b      	strb	r3, [r5, #0]
 800d912:	f10b 0301 	add.w	r3, fp, #1
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f43f ace2 	beq.w	800d2e4 <_dtoa_r+0xa4>
 800d920:	601d      	str	r5, [r3, #0]
 800d922:	e4df      	b.n	800d2e4 <_dtoa_r+0xa4>
 800d924:	465f      	mov	r7, fp
 800d926:	462b      	mov	r3, r5
 800d928:	461d      	mov	r5, r3
 800d92a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d92e:	2a39      	cmp	r2, #57	; 0x39
 800d930:	d106      	bne.n	800d940 <_dtoa_r+0x700>
 800d932:	9a00      	ldr	r2, [sp, #0]
 800d934:	429a      	cmp	r2, r3
 800d936:	d1f7      	bne.n	800d928 <_dtoa_r+0x6e8>
 800d938:	9900      	ldr	r1, [sp, #0]
 800d93a:	2230      	movs	r2, #48	; 0x30
 800d93c:	3701      	adds	r7, #1
 800d93e:	700a      	strb	r2, [r1, #0]
 800d940:	781a      	ldrb	r2, [r3, #0]
 800d942:	3201      	adds	r2, #1
 800d944:	701a      	strb	r2, [r3, #0]
 800d946:	e790      	b.n	800d86a <_dtoa_r+0x62a>
 800d948:	4ba3      	ldr	r3, [pc, #652]	; (800dbd8 <_dtoa_r+0x998>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	f7f2 fe5c 	bl	8000608 <__aeabi_dmul>
 800d950:	2200      	movs	r2, #0
 800d952:	2300      	movs	r3, #0
 800d954:	4606      	mov	r6, r0
 800d956:	460f      	mov	r7, r1
 800d958:	f7f3 f8be 	bl	8000ad8 <__aeabi_dcmpeq>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d09e      	beq.n	800d89e <_dtoa_r+0x65e>
 800d960:	e7d0      	b.n	800d904 <_dtoa_r+0x6c4>
 800d962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d964:	2a00      	cmp	r2, #0
 800d966:	f000 80ca 	beq.w	800dafe <_dtoa_r+0x8be>
 800d96a:	9a07      	ldr	r2, [sp, #28]
 800d96c:	2a01      	cmp	r2, #1
 800d96e:	f300 80ad 	bgt.w	800dacc <_dtoa_r+0x88c>
 800d972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d974:	2a00      	cmp	r2, #0
 800d976:	f000 80a5 	beq.w	800dac4 <_dtoa_r+0x884>
 800d97a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d97e:	9e08      	ldr	r6, [sp, #32]
 800d980:	9d05      	ldr	r5, [sp, #20]
 800d982:	9a05      	ldr	r2, [sp, #20]
 800d984:	441a      	add	r2, r3
 800d986:	9205      	str	r2, [sp, #20]
 800d988:	9a06      	ldr	r2, [sp, #24]
 800d98a:	2101      	movs	r1, #1
 800d98c:	441a      	add	r2, r3
 800d98e:	4620      	mov	r0, r4
 800d990:	9206      	str	r2, [sp, #24]
 800d992:	f000 fc3d 	bl	800e210 <__i2b>
 800d996:	4607      	mov	r7, r0
 800d998:	b165      	cbz	r5, 800d9b4 <_dtoa_r+0x774>
 800d99a:	9b06      	ldr	r3, [sp, #24]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dd09      	ble.n	800d9b4 <_dtoa_r+0x774>
 800d9a0:	42ab      	cmp	r3, r5
 800d9a2:	9a05      	ldr	r2, [sp, #20]
 800d9a4:	bfa8      	it	ge
 800d9a6:	462b      	movge	r3, r5
 800d9a8:	1ad2      	subs	r2, r2, r3
 800d9aa:	9205      	str	r2, [sp, #20]
 800d9ac:	9a06      	ldr	r2, [sp, #24]
 800d9ae:	1aed      	subs	r5, r5, r3
 800d9b0:	1ad3      	subs	r3, r2, r3
 800d9b2:	9306      	str	r3, [sp, #24]
 800d9b4:	9b08      	ldr	r3, [sp, #32]
 800d9b6:	b1f3      	cbz	r3, 800d9f6 <_dtoa_r+0x7b6>
 800d9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 80a3 	beq.w	800db06 <_dtoa_r+0x8c6>
 800d9c0:	2e00      	cmp	r6, #0
 800d9c2:	dd10      	ble.n	800d9e6 <_dtoa_r+0x7a6>
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 fce1 	bl	800e390 <__pow5mult>
 800d9ce:	4652      	mov	r2, sl
 800d9d0:	4601      	mov	r1, r0
 800d9d2:	4607      	mov	r7, r0
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f000 fc31 	bl	800e23c <__multiply>
 800d9da:	4651      	mov	r1, sl
 800d9dc:	4680      	mov	r8, r0
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f000 fb60 	bl	800e0a4 <_Bfree>
 800d9e4:	46c2      	mov	sl, r8
 800d9e6:	9b08      	ldr	r3, [sp, #32]
 800d9e8:	1b9a      	subs	r2, r3, r6
 800d9ea:	d004      	beq.n	800d9f6 <_dtoa_r+0x7b6>
 800d9ec:	4651      	mov	r1, sl
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f000 fcce 	bl	800e390 <__pow5mult>
 800d9f4:	4682      	mov	sl, r0
 800d9f6:	2101      	movs	r1, #1
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f000 fc09 	bl	800e210 <__i2b>
 800d9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da00:	2b00      	cmp	r3, #0
 800da02:	4606      	mov	r6, r0
 800da04:	f340 8081 	ble.w	800db0a <_dtoa_r+0x8ca>
 800da08:	461a      	mov	r2, r3
 800da0a:	4601      	mov	r1, r0
 800da0c:	4620      	mov	r0, r4
 800da0e:	f000 fcbf 	bl	800e390 <__pow5mult>
 800da12:	9b07      	ldr	r3, [sp, #28]
 800da14:	2b01      	cmp	r3, #1
 800da16:	4606      	mov	r6, r0
 800da18:	dd7a      	ble.n	800db10 <_dtoa_r+0x8d0>
 800da1a:	f04f 0800 	mov.w	r8, #0
 800da1e:	6933      	ldr	r3, [r6, #16]
 800da20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da24:	6918      	ldr	r0, [r3, #16]
 800da26:	f000 fba5 	bl	800e174 <__hi0bits>
 800da2a:	f1c0 0020 	rsb	r0, r0, #32
 800da2e:	9b06      	ldr	r3, [sp, #24]
 800da30:	4418      	add	r0, r3
 800da32:	f010 001f 	ands.w	r0, r0, #31
 800da36:	f000 8094 	beq.w	800db62 <_dtoa_r+0x922>
 800da3a:	f1c0 0320 	rsb	r3, r0, #32
 800da3e:	2b04      	cmp	r3, #4
 800da40:	f340 8085 	ble.w	800db4e <_dtoa_r+0x90e>
 800da44:	9b05      	ldr	r3, [sp, #20]
 800da46:	f1c0 001c 	rsb	r0, r0, #28
 800da4a:	4403      	add	r3, r0
 800da4c:	9305      	str	r3, [sp, #20]
 800da4e:	9b06      	ldr	r3, [sp, #24]
 800da50:	4403      	add	r3, r0
 800da52:	4405      	add	r5, r0
 800da54:	9306      	str	r3, [sp, #24]
 800da56:	9b05      	ldr	r3, [sp, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	dd05      	ble.n	800da68 <_dtoa_r+0x828>
 800da5c:	4651      	mov	r1, sl
 800da5e:	461a      	mov	r2, r3
 800da60:	4620      	mov	r0, r4
 800da62:	f000 fcef 	bl	800e444 <__lshift>
 800da66:	4682      	mov	sl, r0
 800da68:	9b06      	ldr	r3, [sp, #24]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	dd05      	ble.n	800da7a <_dtoa_r+0x83a>
 800da6e:	4631      	mov	r1, r6
 800da70:	461a      	mov	r2, r3
 800da72:	4620      	mov	r0, r4
 800da74:	f000 fce6 	bl	800e444 <__lshift>
 800da78:	4606      	mov	r6, r0
 800da7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d072      	beq.n	800db66 <_dtoa_r+0x926>
 800da80:	4631      	mov	r1, r6
 800da82:	4650      	mov	r0, sl
 800da84:	f000 fd4a 	bl	800e51c <__mcmp>
 800da88:	2800      	cmp	r0, #0
 800da8a:	da6c      	bge.n	800db66 <_dtoa_r+0x926>
 800da8c:	2300      	movs	r3, #0
 800da8e:	4651      	mov	r1, sl
 800da90:	220a      	movs	r2, #10
 800da92:	4620      	mov	r0, r4
 800da94:	f000 fb28 	bl	800e0e8 <__multadd>
 800da98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da9e:	4682      	mov	sl, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 81b0 	beq.w	800de06 <_dtoa_r+0xbc6>
 800daa6:	2300      	movs	r3, #0
 800daa8:	4639      	mov	r1, r7
 800daaa:	220a      	movs	r2, #10
 800daac:	4620      	mov	r0, r4
 800daae:	f000 fb1b 	bl	800e0e8 <__multadd>
 800dab2:	9b01      	ldr	r3, [sp, #4]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	4607      	mov	r7, r0
 800dab8:	f300 8096 	bgt.w	800dbe8 <_dtoa_r+0x9a8>
 800dabc:	9b07      	ldr	r3, [sp, #28]
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	dc59      	bgt.n	800db76 <_dtoa_r+0x936>
 800dac2:	e091      	b.n	800dbe8 <_dtoa_r+0x9a8>
 800dac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800daca:	e758      	b.n	800d97e <_dtoa_r+0x73e>
 800dacc:	9b04      	ldr	r3, [sp, #16]
 800dace:	1e5e      	subs	r6, r3, #1
 800dad0:	9b08      	ldr	r3, [sp, #32]
 800dad2:	42b3      	cmp	r3, r6
 800dad4:	bfbf      	itttt	lt
 800dad6:	9b08      	ldrlt	r3, [sp, #32]
 800dad8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dada:	9608      	strlt	r6, [sp, #32]
 800dadc:	1af3      	sublt	r3, r6, r3
 800dade:	bfb4      	ite	lt
 800dae0:	18d2      	addlt	r2, r2, r3
 800dae2:	1b9e      	subge	r6, r3, r6
 800dae4:	9b04      	ldr	r3, [sp, #16]
 800dae6:	bfbc      	itt	lt
 800dae8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800daea:	2600      	movlt	r6, #0
 800daec:	2b00      	cmp	r3, #0
 800daee:	bfb7      	itett	lt
 800daf0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800daf4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800daf8:	1a9d      	sublt	r5, r3, r2
 800dafa:	2300      	movlt	r3, #0
 800dafc:	e741      	b.n	800d982 <_dtoa_r+0x742>
 800dafe:	9e08      	ldr	r6, [sp, #32]
 800db00:	9d05      	ldr	r5, [sp, #20]
 800db02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800db04:	e748      	b.n	800d998 <_dtoa_r+0x758>
 800db06:	9a08      	ldr	r2, [sp, #32]
 800db08:	e770      	b.n	800d9ec <_dtoa_r+0x7ac>
 800db0a:	9b07      	ldr	r3, [sp, #28]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	dc19      	bgt.n	800db44 <_dtoa_r+0x904>
 800db10:	9b02      	ldr	r3, [sp, #8]
 800db12:	b9bb      	cbnz	r3, 800db44 <_dtoa_r+0x904>
 800db14:	9b03      	ldr	r3, [sp, #12]
 800db16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db1a:	b99b      	cbnz	r3, 800db44 <_dtoa_r+0x904>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db22:	0d1b      	lsrs	r3, r3, #20
 800db24:	051b      	lsls	r3, r3, #20
 800db26:	b183      	cbz	r3, 800db4a <_dtoa_r+0x90a>
 800db28:	9b05      	ldr	r3, [sp, #20]
 800db2a:	3301      	adds	r3, #1
 800db2c:	9305      	str	r3, [sp, #20]
 800db2e:	9b06      	ldr	r3, [sp, #24]
 800db30:	3301      	adds	r3, #1
 800db32:	9306      	str	r3, [sp, #24]
 800db34:	f04f 0801 	mov.w	r8, #1
 800db38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f47f af6f 	bne.w	800da1e <_dtoa_r+0x7de>
 800db40:	2001      	movs	r0, #1
 800db42:	e774      	b.n	800da2e <_dtoa_r+0x7ee>
 800db44:	f04f 0800 	mov.w	r8, #0
 800db48:	e7f6      	b.n	800db38 <_dtoa_r+0x8f8>
 800db4a:	4698      	mov	r8, r3
 800db4c:	e7f4      	b.n	800db38 <_dtoa_r+0x8f8>
 800db4e:	d082      	beq.n	800da56 <_dtoa_r+0x816>
 800db50:	9a05      	ldr	r2, [sp, #20]
 800db52:	331c      	adds	r3, #28
 800db54:	441a      	add	r2, r3
 800db56:	9205      	str	r2, [sp, #20]
 800db58:	9a06      	ldr	r2, [sp, #24]
 800db5a:	441a      	add	r2, r3
 800db5c:	441d      	add	r5, r3
 800db5e:	9206      	str	r2, [sp, #24]
 800db60:	e779      	b.n	800da56 <_dtoa_r+0x816>
 800db62:	4603      	mov	r3, r0
 800db64:	e7f4      	b.n	800db50 <_dtoa_r+0x910>
 800db66:	9b04      	ldr	r3, [sp, #16]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	dc37      	bgt.n	800dbdc <_dtoa_r+0x99c>
 800db6c:	9b07      	ldr	r3, [sp, #28]
 800db6e:	2b02      	cmp	r3, #2
 800db70:	dd34      	ble.n	800dbdc <_dtoa_r+0x99c>
 800db72:	9b04      	ldr	r3, [sp, #16]
 800db74:	9301      	str	r3, [sp, #4]
 800db76:	9b01      	ldr	r3, [sp, #4]
 800db78:	b963      	cbnz	r3, 800db94 <_dtoa_r+0x954>
 800db7a:	4631      	mov	r1, r6
 800db7c:	2205      	movs	r2, #5
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 fab2 	bl	800e0e8 <__multadd>
 800db84:	4601      	mov	r1, r0
 800db86:	4606      	mov	r6, r0
 800db88:	4650      	mov	r0, sl
 800db8a:	f000 fcc7 	bl	800e51c <__mcmp>
 800db8e:	2800      	cmp	r0, #0
 800db90:	f73f adbb 	bgt.w	800d70a <_dtoa_r+0x4ca>
 800db94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db96:	9d00      	ldr	r5, [sp, #0]
 800db98:	ea6f 0b03 	mvn.w	fp, r3
 800db9c:	f04f 0800 	mov.w	r8, #0
 800dba0:	4631      	mov	r1, r6
 800dba2:	4620      	mov	r0, r4
 800dba4:	f000 fa7e 	bl	800e0a4 <_Bfree>
 800dba8:	2f00      	cmp	r7, #0
 800dbaa:	f43f aeab 	beq.w	800d904 <_dtoa_r+0x6c4>
 800dbae:	f1b8 0f00 	cmp.w	r8, #0
 800dbb2:	d005      	beq.n	800dbc0 <_dtoa_r+0x980>
 800dbb4:	45b8      	cmp	r8, r7
 800dbb6:	d003      	beq.n	800dbc0 <_dtoa_r+0x980>
 800dbb8:	4641      	mov	r1, r8
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 fa72 	bl	800e0a4 <_Bfree>
 800dbc0:	4639      	mov	r1, r7
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f000 fa6e 	bl	800e0a4 <_Bfree>
 800dbc8:	e69c      	b.n	800d904 <_dtoa_r+0x6c4>
 800dbca:	2600      	movs	r6, #0
 800dbcc:	4637      	mov	r7, r6
 800dbce:	e7e1      	b.n	800db94 <_dtoa_r+0x954>
 800dbd0:	46bb      	mov	fp, r7
 800dbd2:	4637      	mov	r7, r6
 800dbd4:	e599      	b.n	800d70a <_dtoa_r+0x4ca>
 800dbd6:	bf00      	nop
 800dbd8:	40240000 	.word	0x40240000
 800dbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 80c8 	beq.w	800dd74 <_dtoa_r+0xb34>
 800dbe4:	9b04      	ldr	r3, [sp, #16]
 800dbe6:	9301      	str	r3, [sp, #4]
 800dbe8:	2d00      	cmp	r5, #0
 800dbea:	dd05      	ble.n	800dbf8 <_dtoa_r+0x9b8>
 800dbec:	4639      	mov	r1, r7
 800dbee:	462a      	mov	r2, r5
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 fc27 	bl	800e444 <__lshift>
 800dbf6:	4607      	mov	r7, r0
 800dbf8:	f1b8 0f00 	cmp.w	r8, #0
 800dbfc:	d05b      	beq.n	800dcb6 <_dtoa_r+0xa76>
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	4620      	mov	r0, r4
 800dc02:	f000 fa0f 	bl	800e024 <_Balloc>
 800dc06:	4605      	mov	r5, r0
 800dc08:	b928      	cbnz	r0, 800dc16 <_dtoa_r+0x9d6>
 800dc0a:	4b83      	ldr	r3, [pc, #524]	; (800de18 <_dtoa_r+0xbd8>)
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dc12:	f7ff bb2e 	b.w	800d272 <_dtoa_r+0x32>
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	3202      	adds	r2, #2
 800dc1a:	0092      	lsls	r2, r2, #2
 800dc1c:	f107 010c 	add.w	r1, r7, #12
 800dc20:	300c      	adds	r0, #12
 800dc22:	f7ff fa76 	bl	800d112 <memcpy>
 800dc26:	2201      	movs	r2, #1
 800dc28:	4629      	mov	r1, r5
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f000 fc0a 	bl	800e444 <__lshift>
 800dc30:	9b00      	ldr	r3, [sp, #0]
 800dc32:	3301      	adds	r3, #1
 800dc34:	9304      	str	r3, [sp, #16]
 800dc36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	9308      	str	r3, [sp, #32]
 800dc3e:	9b02      	ldr	r3, [sp, #8]
 800dc40:	f003 0301 	and.w	r3, r3, #1
 800dc44:	46b8      	mov	r8, r7
 800dc46:	9306      	str	r3, [sp, #24]
 800dc48:	4607      	mov	r7, r0
 800dc4a:	9b04      	ldr	r3, [sp, #16]
 800dc4c:	4631      	mov	r1, r6
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	4650      	mov	r0, sl
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	f7ff fa6b 	bl	800d12e <quorem>
 800dc58:	4641      	mov	r1, r8
 800dc5a:	9002      	str	r0, [sp, #8]
 800dc5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dc60:	4650      	mov	r0, sl
 800dc62:	f000 fc5b 	bl	800e51c <__mcmp>
 800dc66:	463a      	mov	r2, r7
 800dc68:	9005      	str	r0, [sp, #20]
 800dc6a:	4631      	mov	r1, r6
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f000 fc71 	bl	800e554 <__mdiff>
 800dc72:	68c2      	ldr	r2, [r0, #12]
 800dc74:	4605      	mov	r5, r0
 800dc76:	bb02      	cbnz	r2, 800dcba <_dtoa_r+0xa7a>
 800dc78:	4601      	mov	r1, r0
 800dc7a:	4650      	mov	r0, sl
 800dc7c:	f000 fc4e 	bl	800e51c <__mcmp>
 800dc80:	4602      	mov	r2, r0
 800dc82:	4629      	mov	r1, r5
 800dc84:	4620      	mov	r0, r4
 800dc86:	9209      	str	r2, [sp, #36]	; 0x24
 800dc88:	f000 fa0c 	bl	800e0a4 <_Bfree>
 800dc8c:	9b07      	ldr	r3, [sp, #28]
 800dc8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc90:	9d04      	ldr	r5, [sp, #16]
 800dc92:	ea43 0102 	orr.w	r1, r3, r2
 800dc96:	9b06      	ldr	r3, [sp, #24]
 800dc98:	4319      	orrs	r1, r3
 800dc9a:	d110      	bne.n	800dcbe <_dtoa_r+0xa7e>
 800dc9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dca0:	d029      	beq.n	800dcf6 <_dtoa_r+0xab6>
 800dca2:	9b05      	ldr	r3, [sp, #20]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dd02      	ble.n	800dcae <_dtoa_r+0xa6e>
 800dca8:	9b02      	ldr	r3, [sp, #8]
 800dcaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dcae:	9b01      	ldr	r3, [sp, #4]
 800dcb0:	f883 9000 	strb.w	r9, [r3]
 800dcb4:	e774      	b.n	800dba0 <_dtoa_r+0x960>
 800dcb6:	4638      	mov	r0, r7
 800dcb8:	e7ba      	b.n	800dc30 <_dtoa_r+0x9f0>
 800dcba:	2201      	movs	r2, #1
 800dcbc:	e7e1      	b.n	800dc82 <_dtoa_r+0xa42>
 800dcbe:	9b05      	ldr	r3, [sp, #20]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	db04      	blt.n	800dcce <_dtoa_r+0xa8e>
 800dcc4:	9907      	ldr	r1, [sp, #28]
 800dcc6:	430b      	orrs	r3, r1
 800dcc8:	9906      	ldr	r1, [sp, #24]
 800dcca:	430b      	orrs	r3, r1
 800dccc:	d120      	bne.n	800dd10 <_dtoa_r+0xad0>
 800dcce:	2a00      	cmp	r2, #0
 800dcd0:	dded      	ble.n	800dcae <_dtoa_r+0xa6e>
 800dcd2:	4651      	mov	r1, sl
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f000 fbb4 	bl	800e444 <__lshift>
 800dcdc:	4631      	mov	r1, r6
 800dcde:	4682      	mov	sl, r0
 800dce0:	f000 fc1c 	bl	800e51c <__mcmp>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	dc03      	bgt.n	800dcf0 <_dtoa_r+0xab0>
 800dce8:	d1e1      	bne.n	800dcae <_dtoa_r+0xa6e>
 800dcea:	f019 0f01 	tst.w	r9, #1
 800dcee:	d0de      	beq.n	800dcae <_dtoa_r+0xa6e>
 800dcf0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dcf4:	d1d8      	bne.n	800dca8 <_dtoa_r+0xa68>
 800dcf6:	9a01      	ldr	r2, [sp, #4]
 800dcf8:	2339      	movs	r3, #57	; 0x39
 800dcfa:	7013      	strb	r3, [r2, #0]
 800dcfc:	462b      	mov	r3, r5
 800dcfe:	461d      	mov	r5, r3
 800dd00:	3b01      	subs	r3, #1
 800dd02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd06:	2a39      	cmp	r2, #57	; 0x39
 800dd08:	d06c      	beq.n	800dde4 <_dtoa_r+0xba4>
 800dd0a:	3201      	adds	r2, #1
 800dd0c:	701a      	strb	r2, [r3, #0]
 800dd0e:	e747      	b.n	800dba0 <_dtoa_r+0x960>
 800dd10:	2a00      	cmp	r2, #0
 800dd12:	dd07      	ble.n	800dd24 <_dtoa_r+0xae4>
 800dd14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dd18:	d0ed      	beq.n	800dcf6 <_dtoa_r+0xab6>
 800dd1a:	9a01      	ldr	r2, [sp, #4]
 800dd1c:	f109 0301 	add.w	r3, r9, #1
 800dd20:	7013      	strb	r3, [r2, #0]
 800dd22:	e73d      	b.n	800dba0 <_dtoa_r+0x960>
 800dd24:	9b04      	ldr	r3, [sp, #16]
 800dd26:	9a08      	ldr	r2, [sp, #32]
 800dd28:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d043      	beq.n	800ddb8 <_dtoa_r+0xb78>
 800dd30:	4651      	mov	r1, sl
 800dd32:	2300      	movs	r3, #0
 800dd34:	220a      	movs	r2, #10
 800dd36:	4620      	mov	r0, r4
 800dd38:	f000 f9d6 	bl	800e0e8 <__multadd>
 800dd3c:	45b8      	cmp	r8, r7
 800dd3e:	4682      	mov	sl, r0
 800dd40:	f04f 0300 	mov.w	r3, #0
 800dd44:	f04f 020a 	mov.w	r2, #10
 800dd48:	4641      	mov	r1, r8
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	d107      	bne.n	800dd5e <_dtoa_r+0xb1e>
 800dd4e:	f000 f9cb 	bl	800e0e8 <__multadd>
 800dd52:	4680      	mov	r8, r0
 800dd54:	4607      	mov	r7, r0
 800dd56:	9b04      	ldr	r3, [sp, #16]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	9304      	str	r3, [sp, #16]
 800dd5c:	e775      	b.n	800dc4a <_dtoa_r+0xa0a>
 800dd5e:	f000 f9c3 	bl	800e0e8 <__multadd>
 800dd62:	4639      	mov	r1, r7
 800dd64:	4680      	mov	r8, r0
 800dd66:	2300      	movs	r3, #0
 800dd68:	220a      	movs	r2, #10
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f000 f9bc 	bl	800e0e8 <__multadd>
 800dd70:	4607      	mov	r7, r0
 800dd72:	e7f0      	b.n	800dd56 <_dtoa_r+0xb16>
 800dd74:	9b04      	ldr	r3, [sp, #16]
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	9d00      	ldr	r5, [sp, #0]
 800dd7a:	4631      	mov	r1, r6
 800dd7c:	4650      	mov	r0, sl
 800dd7e:	f7ff f9d6 	bl	800d12e <quorem>
 800dd82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dd86:	9b00      	ldr	r3, [sp, #0]
 800dd88:	f805 9b01 	strb.w	r9, [r5], #1
 800dd8c:	1aea      	subs	r2, r5, r3
 800dd8e:	9b01      	ldr	r3, [sp, #4]
 800dd90:	4293      	cmp	r3, r2
 800dd92:	dd07      	ble.n	800dda4 <_dtoa_r+0xb64>
 800dd94:	4651      	mov	r1, sl
 800dd96:	2300      	movs	r3, #0
 800dd98:	220a      	movs	r2, #10
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f000 f9a4 	bl	800e0e8 <__multadd>
 800dda0:	4682      	mov	sl, r0
 800dda2:	e7ea      	b.n	800dd7a <_dtoa_r+0xb3a>
 800dda4:	9b01      	ldr	r3, [sp, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	bfc8      	it	gt
 800ddaa:	461d      	movgt	r5, r3
 800ddac:	9b00      	ldr	r3, [sp, #0]
 800ddae:	bfd8      	it	le
 800ddb0:	2501      	movle	r5, #1
 800ddb2:	441d      	add	r5, r3
 800ddb4:	f04f 0800 	mov.w	r8, #0
 800ddb8:	4651      	mov	r1, sl
 800ddba:	2201      	movs	r2, #1
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 fb41 	bl	800e444 <__lshift>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	4682      	mov	sl, r0
 800ddc6:	f000 fba9 	bl	800e51c <__mcmp>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	dc96      	bgt.n	800dcfc <_dtoa_r+0xabc>
 800ddce:	d102      	bne.n	800ddd6 <_dtoa_r+0xb96>
 800ddd0:	f019 0f01 	tst.w	r9, #1
 800ddd4:	d192      	bne.n	800dcfc <_dtoa_r+0xabc>
 800ddd6:	462b      	mov	r3, r5
 800ddd8:	461d      	mov	r5, r3
 800ddda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddde:	2a30      	cmp	r2, #48	; 0x30
 800dde0:	d0fa      	beq.n	800ddd8 <_dtoa_r+0xb98>
 800dde2:	e6dd      	b.n	800dba0 <_dtoa_r+0x960>
 800dde4:	9a00      	ldr	r2, [sp, #0]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d189      	bne.n	800dcfe <_dtoa_r+0xabe>
 800ddea:	f10b 0b01 	add.w	fp, fp, #1
 800ddee:	2331      	movs	r3, #49	; 0x31
 800ddf0:	e796      	b.n	800dd20 <_dtoa_r+0xae0>
 800ddf2:	4b0a      	ldr	r3, [pc, #40]	; (800de1c <_dtoa_r+0xbdc>)
 800ddf4:	f7ff ba99 	b.w	800d32a <_dtoa_r+0xea>
 800ddf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	f47f aa6d 	bne.w	800d2da <_dtoa_r+0x9a>
 800de00:	4b07      	ldr	r3, [pc, #28]	; (800de20 <_dtoa_r+0xbe0>)
 800de02:	f7ff ba92 	b.w	800d32a <_dtoa_r+0xea>
 800de06:	9b01      	ldr	r3, [sp, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	dcb5      	bgt.n	800dd78 <_dtoa_r+0xb38>
 800de0c:	9b07      	ldr	r3, [sp, #28]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	f73f aeb1 	bgt.w	800db76 <_dtoa_r+0x936>
 800de14:	e7b0      	b.n	800dd78 <_dtoa_r+0xb38>
 800de16:	bf00      	nop
 800de18:	0800f29c 	.word	0x0800f29c
 800de1c:	0800f1fc 	.word	0x0800f1fc
 800de20:	0800f220 	.word	0x0800f220

0800de24 <_free_r>:
 800de24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de26:	2900      	cmp	r1, #0
 800de28:	d044      	beq.n	800deb4 <_free_r+0x90>
 800de2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de2e:	9001      	str	r0, [sp, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	f1a1 0404 	sub.w	r4, r1, #4
 800de36:	bfb8      	it	lt
 800de38:	18e4      	addlt	r4, r4, r3
 800de3a:	f000 f8e7 	bl	800e00c <__malloc_lock>
 800de3e:	4a1e      	ldr	r2, [pc, #120]	; (800deb8 <_free_r+0x94>)
 800de40:	9801      	ldr	r0, [sp, #4]
 800de42:	6813      	ldr	r3, [r2, #0]
 800de44:	b933      	cbnz	r3, 800de54 <_free_r+0x30>
 800de46:	6063      	str	r3, [r4, #4]
 800de48:	6014      	str	r4, [r2, #0]
 800de4a:	b003      	add	sp, #12
 800de4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de50:	f000 b8e2 	b.w	800e018 <__malloc_unlock>
 800de54:	42a3      	cmp	r3, r4
 800de56:	d908      	bls.n	800de6a <_free_r+0x46>
 800de58:	6825      	ldr	r5, [r4, #0]
 800de5a:	1961      	adds	r1, r4, r5
 800de5c:	428b      	cmp	r3, r1
 800de5e:	bf01      	itttt	eq
 800de60:	6819      	ldreq	r1, [r3, #0]
 800de62:	685b      	ldreq	r3, [r3, #4]
 800de64:	1949      	addeq	r1, r1, r5
 800de66:	6021      	streq	r1, [r4, #0]
 800de68:	e7ed      	b.n	800de46 <_free_r+0x22>
 800de6a:	461a      	mov	r2, r3
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	b10b      	cbz	r3, 800de74 <_free_r+0x50>
 800de70:	42a3      	cmp	r3, r4
 800de72:	d9fa      	bls.n	800de6a <_free_r+0x46>
 800de74:	6811      	ldr	r1, [r2, #0]
 800de76:	1855      	adds	r5, r2, r1
 800de78:	42a5      	cmp	r5, r4
 800de7a:	d10b      	bne.n	800de94 <_free_r+0x70>
 800de7c:	6824      	ldr	r4, [r4, #0]
 800de7e:	4421      	add	r1, r4
 800de80:	1854      	adds	r4, r2, r1
 800de82:	42a3      	cmp	r3, r4
 800de84:	6011      	str	r1, [r2, #0]
 800de86:	d1e0      	bne.n	800de4a <_free_r+0x26>
 800de88:	681c      	ldr	r4, [r3, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	6053      	str	r3, [r2, #4]
 800de8e:	440c      	add	r4, r1
 800de90:	6014      	str	r4, [r2, #0]
 800de92:	e7da      	b.n	800de4a <_free_r+0x26>
 800de94:	d902      	bls.n	800de9c <_free_r+0x78>
 800de96:	230c      	movs	r3, #12
 800de98:	6003      	str	r3, [r0, #0]
 800de9a:	e7d6      	b.n	800de4a <_free_r+0x26>
 800de9c:	6825      	ldr	r5, [r4, #0]
 800de9e:	1961      	adds	r1, r4, r5
 800dea0:	428b      	cmp	r3, r1
 800dea2:	bf04      	itt	eq
 800dea4:	6819      	ldreq	r1, [r3, #0]
 800dea6:	685b      	ldreq	r3, [r3, #4]
 800dea8:	6063      	str	r3, [r4, #4]
 800deaa:	bf04      	itt	eq
 800deac:	1949      	addeq	r1, r1, r5
 800deae:	6021      	streq	r1, [r4, #0]
 800deb0:	6054      	str	r4, [r2, #4]
 800deb2:	e7ca      	b.n	800de4a <_free_r+0x26>
 800deb4:	b003      	add	sp, #12
 800deb6:	bd30      	pop	{r4, r5, pc}
 800deb8:	20002a0c 	.word	0x20002a0c

0800debc <malloc>:
 800debc:	4b02      	ldr	r3, [pc, #8]	; (800dec8 <malloc+0xc>)
 800debe:	4601      	mov	r1, r0
 800dec0:	6818      	ldr	r0, [r3, #0]
 800dec2:	f000 b823 	b.w	800df0c <_malloc_r>
 800dec6:	bf00      	nop
 800dec8:	200000e4 	.word	0x200000e4

0800decc <sbrk_aligned>:
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	4e0e      	ldr	r6, [pc, #56]	; (800df08 <sbrk_aligned+0x3c>)
 800ded0:	460c      	mov	r4, r1
 800ded2:	6831      	ldr	r1, [r6, #0]
 800ded4:	4605      	mov	r5, r0
 800ded6:	b911      	cbnz	r1, 800dede <sbrk_aligned+0x12>
 800ded8:	f000 fe96 	bl	800ec08 <_sbrk_r>
 800dedc:	6030      	str	r0, [r6, #0]
 800dede:	4621      	mov	r1, r4
 800dee0:	4628      	mov	r0, r5
 800dee2:	f000 fe91 	bl	800ec08 <_sbrk_r>
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	d00a      	beq.n	800df00 <sbrk_aligned+0x34>
 800deea:	1cc4      	adds	r4, r0, #3
 800deec:	f024 0403 	bic.w	r4, r4, #3
 800def0:	42a0      	cmp	r0, r4
 800def2:	d007      	beq.n	800df04 <sbrk_aligned+0x38>
 800def4:	1a21      	subs	r1, r4, r0
 800def6:	4628      	mov	r0, r5
 800def8:	f000 fe86 	bl	800ec08 <_sbrk_r>
 800defc:	3001      	adds	r0, #1
 800defe:	d101      	bne.n	800df04 <sbrk_aligned+0x38>
 800df00:	f04f 34ff 	mov.w	r4, #4294967295
 800df04:	4620      	mov	r0, r4
 800df06:	bd70      	pop	{r4, r5, r6, pc}
 800df08:	20002a10 	.word	0x20002a10

0800df0c <_malloc_r>:
 800df0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df10:	1ccd      	adds	r5, r1, #3
 800df12:	f025 0503 	bic.w	r5, r5, #3
 800df16:	3508      	adds	r5, #8
 800df18:	2d0c      	cmp	r5, #12
 800df1a:	bf38      	it	cc
 800df1c:	250c      	movcc	r5, #12
 800df1e:	2d00      	cmp	r5, #0
 800df20:	4607      	mov	r7, r0
 800df22:	db01      	blt.n	800df28 <_malloc_r+0x1c>
 800df24:	42a9      	cmp	r1, r5
 800df26:	d905      	bls.n	800df34 <_malloc_r+0x28>
 800df28:	230c      	movs	r3, #12
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	2600      	movs	r6, #0
 800df2e:	4630      	mov	r0, r6
 800df30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e008 <_malloc_r+0xfc>
 800df38:	f000 f868 	bl	800e00c <__malloc_lock>
 800df3c:	f8d8 3000 	ldr.w	r3, [r8]
 800df40:	461c      	mov	r4, r3
 800df42:	bb5c      	cbnz	r4, 800df9c <_malloc_r+0x90>
 800df44:	4629      	mov	r1, r5
 800df46:	4638      	mov	r0, r7
 800df48:	f7ff ffc0 	bl	800decc <sbrk_aligned>
 800df4c:	1c43      	adds	r3, r0, #1
 800df4e:	4604      	mov	r4, r0
 800df50:	d155      	bne.n	800dffe <_malloc_r+0xf2>
 800df52:	f8d8 4000 	ldr.w	r4, [r8]
 800df56:	4626      	mov	r6, r4
 800df58:	2e00      	cmp	r6, #0
 800df5a:	d145      	bne.n	800dfe8 <_malloc_r+0xdc>
 800df5c:	2c00      	cmp	r4, #0
 800df5e:	d048      	beq.n	800dff2 <_malloc_r+0xe6>
 800df60:	6823      	ldr	r3, [r4, #0]
 800df62:	4631      	mov	r1, r6
 800df64:	4638      	mov	r0, r7
 800df66:	eb04 0903 	add.w	r9, r4, r3
 800df6a:	f000 fe4d 	bl	800ec08 <_sbrk_r>
 800df6e:	4581      	cmp	r9, r0
 800df70:	d13f      	bne.n	800dff2 <_malloc_r+0xe6>
 800df72:	6821      	ldr	r1, [r4, #0]
 800df74:	1a6d      	subs	r5, r5, r1
 800df76:	4629      	mov	r1, r5
 800df78:	4638      	mov	r0, r7
 800df7a:	f7ff ffa7 	bl	800decc <sbrk_aligned>
 800df7e:	3001      	adds	r0, #1
 800df80:	d037      	beq.n	800dff2 <_malloc_r+0xe6>
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	442b      	add	r3, r5
 800df86:	6023      	str	r3, [r4, #0]
 800df88:	f8d8 3000 	ldr.w	r3, [r8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d038      	beq.n	800e002 <_malloc_r+0xf6>
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	42a2      	cmp	r2, r4
 800df94:	d12b      	bne.n	800dfee <_malloc_r+0xe2>
 800df96:	2200      	movs	r2, #0
 800df98:	605a      	str	r2, [r3, #4]
 800df9a:	e00f      	b.n	800dfbc <_malloc_r+0xb0>
 800df9c:	6822      	ldr	r2, [r4, #0]
 800df9e:	1b52      	subs	r2, r2, r5
 800dfa0:	d41f      	bmi.n	800dfe2 <_malloc_r+0xd6>
 800dfa2:	2a0b      	cmp	r2, #11
 800dfa4:	d917      	bls.n	800dfd6 <_malloc_r+0xca>
 800dfa6:	1961      	adds	r1, r4, r5
 800dfa8:	42a3      	cmp	r3, r4
 800dfaa:	6025      	str	r5, [r4, #0]
 800dfac:	bf18      	it	ne
 800dfae:	6059      	strne	r1, [r3, #4]
 800dfb0:	6863      	ldr	r3, [r4, #4]
 800dfb2:	bf08      	it	eq
 800dfb4:	f8c8 1000 	streq.w	r1, [r8]
 800dfb8:	5162      	str	r2, [r4, r5]
 800dfba:	604b      	str	r3, [r1, #4]
 800dfbc:	4638      	mov	r0, r7
 800dfbe:	f104 060b 	add.w	r6, r4, #11
 800dfc2:	f000 f829 	bl	800e018 <__malloc_unlock>
 800dfc6:	f026 0607 	bic.w	r6, r6, #7
 800dfca:	1d23      	adds	r3, r4, #4
 800dfcc:	1af2      	subs	r2, r6, r3
 800dfce:	d0ae      	beq.n	800df2e <_malloc_r+0x22>
 800dfd0:	1b9b      	subs	r3, r3, r6
 800dfd2:	50a3      	str	r3, [r4, r2]
 800dfd4:	e7ab      	b.n	800df2e <_malloc_r+0x22>
 800dfd6:	42a3      	cmp	r3, r4
 800dfd8:	6862      	ldr	r2, [r4, #4]
 800dfda:	d1dd      	bne.n	800df98 <_malloc_r+0x8c>
 800dfdc:	f8c8 2000 	str.w	r2, [r8]
 800dfe0:	e7ec      	b.n	800dfbc <_malloc_r+0xb0>
 800dfe2:	4623      	mov	r3, r4
 800dfe4:	6864      	ldr	r4, [r4, #4]
 800dfe6:	e7ac      	b.n	800df42 <_malloc_r+0x36>
 800dfe8:	4634      	mov	r4, r6
 800dfea:	6876      	ldr	r6, [r6, #4]
 800dfec:	e7b4      	b.n	800df58 <_malloc_r+0x4c>
 800dfee:	4613      	mov	r3, r2
 800dff0:	e7cc      	b.n	800df8c <_malloc_r+0x80>
 800dff2:	230c      	movs	r3, #12
 800dff4:	603b      	str	r3, [r7, #0]
 800dff6:	4638      	mov	r0, r7
 800dff8:	f000 f80e 	bl	800e018 <__malloc_unlock>
 800dffc:	e797      	b.n	800df2e <_malloc_r+0x22>
 800dffe:	6025      	str	r5, [r4, #0]
 800e000:	e7dc      	b.n	800dfbc <_malloc_r+0xb0>
 800e002:	605b      	str	r3, [r3, #4]
 800e004:	deff      	udf	#255	; 0xff
 800e006:	bf00      	nop
 800e008:	20002a0c 	.word	0x20002a0c

0800e00c <__malloc_lock>:
 800e00c:	4801      	ldr	r0, [pc, #4]	; (800e014 <__malloc_lock+0x8>)
 800e00e:	f7ff b87e 	b.w	800d10e <__retarget_lock_acquire_recursive>
 800e012:	bf00      	nop
 800e014:	20002a08 	.word	0x20002a08

0800e018 <__malloc_unlock>:
 800e018:	4801      	ldr	r0, [pc, #4]	; (800e020 <__malloc_unlock+0x8>)
 800e01a:	f7ff b879 	b.w	800d110 <__retarget_lock_release_recursive>
 800e01e:	bf00      	nop
 800e020:	20002a08 	.word	0x20002a08

0800e024 <_Balloc>:
 800e024:	b570      	push	{r4, r5, r6, lr}
 800e026:	69c6      	ldr	r6, [r0, #28]
 800e028:	4604      	mov	r4, r0
 800e02a:	460d      	mov	r5, r1
 800e02c:	b976      	cbnz	r6, 800e04c <_Balloc+0x28>
 800e02e:	2010      	movs	r0, #16
 800e030:	f7ff ff44 	bl	800debc <malloc>
 800e034:	4602      	mov	r2, r0
 800e036:	61e0      	str	r0, [r4, #28]
 800e038:	b920      	cbnz	r0, 800e044 <_Balloc+0x20>
 800e03a:	4b18      	ldr	r3, [pc, #96]	; (800e09c <_Balloc+0x78>)
 800e03c:	4818      	ldr	r0, [pc, #96]	; (800e0a0 <_Balloc+0x7c>)
 800e03e:	216b      	movs	r1, #107	; 0x6b
 800e040:	f000 fdf2 	bl	800ec28 <__assert_func>
 800e044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e048:	6006      	str	r6, [r0, #0]
 800e04a:	60c6      	str	r6, [r0, #12]
 800e04c:	69e6      	ldr	r6, [r4, #28]
 800e04e:	68f3      	ldr	r3, [r6, #12]
 800e050:	b183      	cbz	r3, 800e074 <_Balloc+0x50>
 800e052:	69e3      	ldr	r3, [r4, #28]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e05a:	b9b8      	cbnz	r0, 800e08c <_Balloc+0x68>
 800e05c:	2101      	movs	r1, #1
 800e05e:	fa01 f605 	lsl.w	r6, r1, r5
 800e062:	1d72      	adds	r2, r6, #5
 800e064:	0092      	lsls	r2, r2, #2
 800e066:	4620      	mov	r0, r4
 800e068:	f000 fdfc 	bl	800ec64 <_calloc_r>
 800e06c:	b160      	cbz	r0, 800e088 <_Balloc+0x64>
 800e06e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e072:	e00e      	b.n	800e092 <_Balloc+0x6e>
 800e074:	2221      	movs	r2, #33	; 0x21
 800e076:	2104      	movs	r1, #4
 800e078:	4620      	mov	r0, r4
 800e07a:	f000 fdf3 	bl	800ec64 <_calloc_r>
 800e07e:	69e3      	ldr	r3, [r4, #28]
 800e080:	60f0      	str	r0, [r6, #12]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1e4      	bne.n	800e052 <_Balloc+0x2e>
 800e088:	2000      	movs	r0, #0
 800e08a:	bd70      	pop	{r4, r5, r6, pc}
 800e08c:	6802      	ldr	r2, [r0, #0]
 800e08e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e092:	2300      	movs	r3, #0
 800e094:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e098:	e7f7      	b.n	800e08a <_Balloc+0x66>
 800e09a:	bf00      	nop
 800e09c:	0800f22d 	.word	0x0800f22d
 800e0a0:	0800f2ad 	.word	0x0800f2ad

0800e0a4 <_Bfree>:
 800e0a4:	b570      	push	{r4, r5, r6, lr}
 800e0a6:	69c6      	ldr	r6, [r0, #28]
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	b976      	cbnz	r6, 800e0cc <_Bfree+0x28>
 800e0ae:	2010      	movs	r0, #16
 800e0b0:	f7ff ff04 	bl	800debc <malloc>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	61e8      	str	r0, [r5, #28]
 800e0b8:	b920      	cbnz	r0, 800e0c4 <_Bfree+0x20>
 800e0ba:	4b09      	ldr	r3, [pc, #36]	; (800e0e0 <_Bfree+0x3c>)
 800e0bc:	4809      	ldr	r0, [pc, #36]	; (800e0e4 <_Bfree+0x40>)
 800e0be:	218f      	movs	r1, #143	; 0x8f
 800e0c0:	f000 fdb2 	bl	800ec28 <__assert_func>
 800e0c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0c8:	6006      	str	r6, [r0, #0]
 800e0ca:	60c6      	str	r6, [r0, #12]
 800e0cc:	b13c      	cbz	r4, 800e0de <_Bfree+0x3a>
 800e0ce:	69eb      	ldr	r3, [r5, #28]
 800e0d0:	6862      	ldr	r2, [r4, #4]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0d8:	6021      	str	r1, [r4, #0]
 800e0da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0de:	bd70      	pop	{r4, r5, r6, pc}
 800e0e0:	0800f22d 	.word	0x0800f22d
 800e0e4:	0800f2ad 	.word	0x0800f2ad

0800e0e8 <__multadd>:
 800e0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ec:	690d      	ldr	r5, [r1, #16]
 800e0ee:	4607      	mov	r7, r0
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	461e      	mov	r6, r3
 800e0f4:	f101 0c14 	add.w	ip, r1, #20
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	f8dc 3000 	ldr.w	r3, [ip]
 800e0fe:	b299      	uxth	r1, r3
 800e100:	fb02 6101 	mla	r1, r2, r1, r6
 800e104:	0c1e      	lsrs	r6, r3, #16
 800e106:	0c0b      	lsrs	r3, r1, #16
 800e108:	fb02 3306 	mla	r3, r2, r6, r3
 800e10c:	b289      	uxth	r1, r1
 800e10e:	3001      	adds	r0, #1
 800e110:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e114:	4285      	cmp	r5, r0
 800e116:	f84c 1b04 	str.w	r1, [ip], #4
 800e11a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e11e:	dcec      	bgt.n	800e0fa <__multadd+0x12>
 800e120:	b30e      	cbz	r6, 800e166 <__multadd+0x7e>
 800e122:	68a3      	ldr	r3, [r4, #8]
 800e124:	42ab      	cmp	r3, r5
 800e126:	dc19      	bgt.n	800e15c <__multadd+0x74>
 800e128:	6861      	ldr	r1, [r4, #4]
 800e12a:	4638      	mov	r0, r7
 800e12c:	3101      	adds	r1, #1
 800e12e:	f7ff ff79 	bl	800e024 <_Balloc>
 800e132:	4680      	mov	r8, r0
 800e134:	b928      	cbnz	r0, 800e142 <__multadd+0x5a>
 800e136:	4602      	mov	r2, r0
 800e138:	4b0c      	ldr	r3, [pc, #48]	; (800e16c <__multadd+0x84>)
 800e13a:	480d      	ldr	r0, [pc, #52]	; (800e170 <__multadd+0x88>)
 800e13c:	21ba      	movs	r1, #186	; 0xba
 800e13e:	f000 fd73 	bl	800ec28 <__assert_func>
 800e142:	6922      	ldr	r2, [r4, #16]
 800e144:	3202      	adds	r2, #2
 800e146:	f104 010c 	add.w	r1, r4, #12
 800e14a:	0092      	lsls	r2, r2, #2
 800e14c:	300c      	adds	r0, #12
 800e14e:	f7fe ffe0 	bl	800d112 <memcpy>
 800e152:	4621      	mov	r1, r4
 800e154:	4638      	mov	r0, r7
 800e156:	f7ff ffa5 	bl	800e0a4 <_Bfree>
 800e15a:	4644      	mov	r4, r8
 800e15c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e160:	3501      	adds	r5, #1
 800e162:	615e      	str	r6, [r3, #20]
 800e164:	6125      	str	r5, [r4, #16]
 800e166:	4620      	mov	r0, r4
 800e168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e16c:	0800f29c 	.word	0x0800f29c
 800e170:	0800f2ad 	.word	0x0800f2ad

0800e174 <__hi0bits>:
 800e174:	0c03      	lsrs	r3, r0, #16
 800e176:	041b      	lsls	r3, r3, #16
 800e178:	b9d3      	cbnz	r3, 800e1b0 <__hi0bits+0x3c>
 800e17a:	0400      	lsls	r0, r0, #16
 800e17c:	2310      	movs	r3, #16
 800e17e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e182:	bf04      	itt	eq
 800e184:	0200      	lsleq	r0, r0, #8
 800e186:	3308      	addeq	r3, #8
 800e188:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e18c:	bf04      	itt	eq
 800e18e:	0100      	lsleq	r0, r0, #4
 800e190:	3304      	addeq	r3, #4
 800e192:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e196:	bf04      	itt	eq
 800e198:	0080      	lsleq	r0, r0, #2
 800e19a:	3302      	addeq	r3, #2
 800e19c:	2800      	cmp	r0, #0
 800e19e:	db05      	blt.n	800e1ac <__hi0bits+0x38>
 800e1a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e1a4:	f103 0301 	add.w	r3, r3, #1
 800e1a8:	bf08      	it	eq
 800e1aa:	2320      	moveq	r3, #32
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	4770      	bx	lr
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	e7e4      	b.n	800e17e <__hi0bits+0xa>

0800e1b4 <__lo0bits>:
 800e1b4:	6803      	ldr	r3, [r0, #0]
 800e1b6:	f013 0207 	ands.w	r2, r3, #7
 800e1ba:	d00c      	beq.n	800e1d6 <__lo0bits+0x22>
 800e1bc:	07d9      	lsls	r1, r3, #31
 800e1be:	d422      	bmi.n	800e206 <__lo0bits+0x52>
 800e1c0:	079a      	lsls	r2, r3, #30
 800e1c2:	bf49      	itett	mi
 800e1c4:	085b      	lsrmi	r3, r3, #1
 800e1c6:	089b      	lsrpl	r3, r3, #2
 800e1c8:	6003      	strmi	r3, [r0, #0]
 800e1ca:	2201      	movmi	r2, #1
 800e1cc:	bf5c      	itt	pl
 800e1ce:	6003      	strpl	r3, [r0, #0]
 800e1d0:	2202      	movpl	r2, #2
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	4770      	bx	lr
 800e1d6:	b299      	uxth	r1, r3
 800e1d8:	b909      	cbnz	r1, 800e1de <__lo0bits+0x2a>
 800e1da:	0c1b      	lsrs	r3, r3, #16
 800e1dc:	2210      	movs	r2, #16
 800e1de:	b2d9      	uxtb	r1, r3
 800e1e0:	b909      	cbnz	r1, 800e1e6 <__lo0bits+0x32>
 800e1e2:	3208      	adds	r2, #8
 800e1e4:	0a1b      	lsrs	r3, r3, #8
 800e1e6:	0719      	lsls	r1, r3, #28
 800e1e8:	bf04      	itt	eq
 800e1ea:	091b      	lsreq	r3, r3, #4
 800e1ec:	3204      	addeq	r2, #4
 800e1ee:	0799      	lsls	r1, r3, #30
 800e1f0:	bf04      	itt	eq
 800e1f2:	089b      	lsreq	r3, r3, #2
 800e1f4:	3202      	addeq	r2, #2
 800e1f6:	07d9      	lsls	r1, r3, #31
 800e1f8:	d403      	bmi.n	800e202 <__lo0bits+0x4e>
 800e1fa:	085b      	lsrs	r3, r3, #1
 800e1fc:	f102 0201 	add.w	r2, r2, #1
 800e200:	d003      	beq.n	800e20a <__lo0bits+0x56>
 800e202:	6003      	str	r3, [r0, #0]
 800e204:	e7e5      	b.n	800e1d2 <__lo0bits+0x1e>
 800e206:	2200      	movs	r2, #0
 800e208:	e7e3      	b.n	800e1d2 <__lo0bits+0x1e>
 800e20a:	2220      	movs	r2, #32
 800e20c:	e7e1      	b.n	800e1d2 <__lo0bits+0x1e>
	...

0800e210 <__i2b>:
 800e210:	b510      	push	{r4, lr}
 800e212:	460c      	mov	r4, r1
 800e214:	2101      	movs	r1, #1
 800e216:	f7ff ff05 	bl	800e024 <_Balloc>
 800e21a:	4602      	mov	r2, r0
 800e21c:	b928      	cbnz	r0, 800e22a <__i2b+0x1a>
 800e21e:	4b05      	ldr	r3, [pc, #20]	; (800e234 <__i2b+0x24>)
 800e220:	4805      	ldr	r0, [pc, #20]	; (800e238 <__i2b+0x28>)
 800e222:	f240 1145 	movw	r1, #325	; 0x145
 800e226:	f000 fcff 	bl	800ec28 <__assert_func>
 800e22a:	2301      	movs	r3, #1
 800e22c:	6144      	str	r4, [r0, #20]
 800e22e:	6103      	str	r3, [r0, #16]
 800e230:	bd10      	pop	{r4, pc}
 800e232:	bf00      	nop
 800e234:	0800f29c 	.word	0x0800f29c
 800e238:	0800f2ad 	.word	0x0800f2ad

0800e23c <__multiply>:
 800e23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e240:	4691      	mov	r9, r2
 800e242:	690a      	ldr	r2, [r1, #16]
 800e244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e248:	429a      	cmp	r2, r3
 800e24a:	bfb8      	it	lt
 800e24c:	460b      	movlt	r3, r1
 800e24e:	460c      	mov	r4, r1
 800e250:	bfbc      	itt	lt
 800e252:	464c      	movlt	r4, r9
 800e254:	4699      	movlt	r9, r3
 800e256:	6927      	ldr	r7, [r4, #16]
 800e258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e25c:	68a3      	ldr	r3, [r4, #8]
 800e25e:	6861      	ldr	r1, [r4, #4]
 800e260:	eb07 060a 	add.w	r6, r7, sl
 800e264:	42b3      	cmp	r3, r6
 800e266:	b085      	sub	sp, #20
 800e268:	bfb8      	it	lt
 800e26a:	3101      	addlt	r1, #1
 800e26c:	f7ff feda 	bl	800e024 <_Balloc>
 800e270:	b930      	cbnz	r0, 800e280 <__multiply+0x44>
 800e272:	4602      	mov	r2, r0
 800e274:	4b44      	ldr	r3, [pc, #272]	; (800e388 <__multiply+0x14c>)
 800e276:	4845      	ldr	r0, [pc, #276]	; (800e38c <__multiply+0x150>)
 800e278:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e27c:	f000 fcd4 	bl	800ec28 <__assert_func>
 800e280:	f100 0514 	add.w	r5, r0, #20
 800e284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e288:	462b      	mov	r3, r5
 800e28a:	2200      	movs	r2, #0
 800e28c:	4543      	cmp	r3, r8
 800e28e:	d321      	bcc.n	800e2d4 <__multiply+0x98>
 800e290:	f104 0314 	add.w	r3, r4, #20
 800e294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e298:	f109 0314 	add.w	r3, r9, #20
 800e29c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e2a0:	9202      	str	r2, [sp, #8]
 800e2a2:	1b3a      	subs	r2, r7, r4
 800e2a4:	3a15      	subs	r2, #21
 800e2a6:	f022 0203 	bic.w	r2, r2, #3
 800e2aa:	3204      	adds	r2, #4
 800e2ac:	f104 0115 	add.w	r1, r4, #21
 800e2b0:	428f      	cmp	r7, r1
 800e2b2:	bf38      	it	cc
 800e2b4:	2204      	movcc	r2, #4
 800e2b6:	9201      	str	r2, [sp, #4]
 800e2b8:	9a02      	ldr	r2, [sp, #8]
 800e2ba:	9303      	str	r3, [sp, #12]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d80c      	bhi.n	800e2da <__multiply+0x9e>
 800e2c0:	2e00      	cmp	r6, #0
 800e2c2:	dd03      	ble.n	800e2cc <__multiply+0x90>
 800e2c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d05b      	beq.n	800e384 <__multiply+0x148>
 800e2cc:	6106      	str	r6, [r0, #16]
 800e2ce:	b005      	add	sp, #20
 800e2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d4:	f843 2b04 	str.w	r2, [r3], #4
 800e2d8:	e7d8      	b.n	800e28c <__multiply+0x50>
 800e2da:	f8b3 a000 	ldrh.w	sl, [r3]
 800e2de:	f1ba 0f00 	cmp.w	sl, #0
 800e2e2:	d024      	beq.n	800e32e <__multiply+0xf2>
 800e2e4:	f104 0e14 	add.w	lr, r4, #20
 800e2e8:	46a9      	mov	r9, r5
 800e2ea:	f04f 0c00 	mov.w	ip, #0
 800e2ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e2f2:	f8d9 1000 	ldr.w	r1, [r9]
 800e2f6:	fa1f fb82 	uxth.w	fp, r2
 800e2fa:	b289      	uxth	r1, r1
 800e2fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e304:	f8d9 2000 	ldr.w	r2, [r9]
 800e308:	4461      	add	r1, ip
 800e30a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e30e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e316:	b289      	uxth	r1, r1
 800e318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e31c:	4577      	cmp	r7, lr
 800e31e:	f849 1b04 	str.w	r1, [r9], #4
 800e322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e326:	d8e2      	bhi.n	800e2ee <__multiply+0xb2>
 800e328:	9a01      	ldr	r2, [sp, #4]
 800e32a:	f845 c002 	str.w	ip, [r5, r2]
 800e32e:	9a03      	ldr	r2, [sp, #12]
 800e330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e334:	3304      	adds	r3, #4
 800e336:	f1b9 0f00 	cmp.w	r9, #0
 800e33a:	d021      	beq.n	800e380 <__multiply+0x144>
 800e33c:	6829      	ldr	r1, [r5, #0]
 800e33e:	f104 0c14 	add.w	ip, r4, #20
 800e342:	46ae      	mov	lr, r5
 800e344:	f04f 0a00 	mov.w	sl, #0
 800e348:	f8bc b000 	ldrh.w	fp, [ip]
 800e34c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e350:	fb09 220b 	mla	r2, r9, fp, r2
 800e354:	4452      	add	r2, sl
 800e356:	b289      	uxth	r1, r1
 800e358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e35c:	f84e 1b04 	str.w	r1, [lr], #4
 800e360:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e364:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e368:	f8be 1000 	ldrh.w	r1, [lr]
 800e36c:	fb09 110a 	mla	r1, r9, sl, r1
 800e370:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e374:	4567      	cmp	r7, ip
 800e376:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e37a:	d8e5      	bhi.n	800e348 <__multiply+0x10c>
 800e37c:	9a01      	ldr	r2, [sp, #4]
 800e37e:	50a9      	str	r1, [r5, r2]
 800e380:	3504      	adds	r5, #4
 800e382:	e799      	b.n	800e2b8 <__multiply+0x7c>
 800e384:	3e01      	subs	r6, #1
 800e386:	e79b      	b.n	800e2c0 <__multiply+0x84>
 800e388:	0800f29c 	.word	0x0800f29c
 800e38c:	0800f2ad 	.word	0x0800f2ad

0800e390 <__pow5mult>:
 800e390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e394:	4615      	mov	r5, r2
 800e396:	f012 0203 	ands.w	r2, r2, #3
 800e39a:	4606      	mov	r6, r0
 800e39c:	460f      	mov	r7, r1
 800e39e:	d007      	beq.n	800e3b0 <__pow5mult+0x20>
 800e3a0:	4c25      	ldr	r4, [pc, #148]	; (800e438 <__pow5mult+0xa8>)
 800e3a2:	3a01      	subs	r2, #1
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3aa:	f7ff fe9d 	bl	800e0e8 <__multadd>
 800e3ae:	4607      	mov	r7, r0
 800e3b0:	10ad      	asrs	r5, r5, #2
 800e3b2:	d03d      	beq.n	800e430 <__pow5mult+0xa0>
 800e3b4:	69f4      	ldr	r4, [r6, #28]
 800e3b6:	b97c      	cbnz	r4, 800e3d8 <__pow5mult+0x48>
 800e3b8:	2010      	movs	r0, #16
 800e3ba:	f7ff fd7f 	bl	800debc <malloc>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	61f0      	str	r0, [r6, #28]
 800e3c2:	b928      	cbnz	r0, 800e3d0 <__pow5mult+0x40>
 800e3c4:	4b1d      	ldr	r3, [pc, #116]	; (800e43c <__pow5mult+0xac>)
 800e3c6:	481e      	ldr	r0, [pc, #120]	; (800e440 <__pow5mult+0xb0>)
 800e3c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e3cc:	f000 fc2c 	bl	800ec28 <__assert_func>
 800e3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e3d4:	6004      	str	r4, [r0, #0]
 800e3d6:	60c4      	str	r4, [r0, #12]
 800e3d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3e0:	b94c      	cbnz	r4, 800e3f6 <__pow5mult+0x66>
 800e3e2:	f240 2171 	movw	r1, #625	; 0x271
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	f7ff ff12 	bl	800e210 <__i2b>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	6003      	str	r3, [r0, #0]
 800e3f6:	f04f 0900 	mov.w	r9, #0
 800e3fa:	07eb      	lsls	r3, r5, #31
 800e3fc:	d50a      	bpl.n	800e414 <__pow5mult+0x84>
 800e3fe:	4639      	mov	r1, r7
 800e400:	4622      	mov	r2, r4
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff ff1a 	bl	800e23c <__multiply>
 800e408:	4639      	mov	r1, r7
 800e40a:	4680      	mov	r8, r0
 800e40c:	4630      	mov	r0, r6
 800e40e:	f7ff fe49 	bl	800e0a4 <_Bfree>
 800e412:	4647      	mov	r7, r8
 800e414:	106d      	asrs	r5, r5, #1
 800e416:	d00b      	beq.n	800e430 <__pow5mult+0xa0>
 800e418:	6820      	ldr	r0, [r4, #0]
 800e41a:	b938      	cbnz	r0, 800e42c <__pow5mult+0x9c>
 800e41c:	4622      	mov	r2, r4
 800e41e:	4621      	mov	r1, r4
 800e420:	4630      	mov	r0, r6
 800e422:	f7ff ff0b 	bl	800e23c <__multiply>
 800e426:	6020      	str	r0, [r4, #0]
 800e428:	f8c0 9000 	str.w	r9, [r0]
 800e42c:	4604      	mov	r4, r0
 800e42e:	e7e4      	b.n	800e3fa <__pow5mult+0x6a>
 800e430:	4638      	mov	r0, r7
 800e432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e436:	bf00      	nop
 800e438:	0800f3f8 	.word	0x0800f3f8
 800e43c:	0800f22d 	.word	0x0800f22d
 800e440:	0800f2ad 	.word	0x0800f2ad

0800e444 <__lshift>:
 800e444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e448:	460c      	mov	r4, r1
 800e44a:	6849      	ldr	r1, [r1, #4]
 800e44c:	6923      	ldr	r3, [r4, #16]
 800e44e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e452:	68a3      	ldr	r3, [r4, #8]
 800e454:	4607      	mov	r7, r0
 800e456:	4691      	mov	r9, r2
 800e458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e45c:	f108 0601 	add.w	r6, r8, #1
 800e460:	42b3      	cmp	r3, r6
 800e462:	db0b      	blt.n	800e47c <__lshift+0x38>
 800e464:	4638      	mov	r0, r7
 800e466:	f7ff fddd 	bl	800e024 <_Balloc>
 800e46a:	4605      	mov	r5, r0
 800e46c:	b948      	cbnz	r0, 800e482 <__lshift+0x3e>
 800e46e:	4602      	mov	r2, r0
 800e470:	4b28      	ldr	r3, [pc, #160]	; (800e514 <__lshift+0xd0>)
 800e472:	4829      	ldr	r0, [pc, #164]	; (800e518 <__lshift+0xd4>)
 800e474:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e478:	f000 fbd6 	bl	800ec28 <__assert_func>
 800e47c:	3101      	adds	r1, #1
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	e7ee      	b.n	800e460 <__lshift+0x1c>
 800e482:	2300      	movs	r3, #0
 800e484:	f100 0114 	add.w	r1, r0, #20
 800e488:	f100 0210 	add.w	r2, r0, #16
 800e48c:	4618      	mov	r0, r3
 800e48e:	4553      	cmp	r3, sl
 800e490:	db33      	blt.n	800e4fa <__lshift+0xb6>
 800e492:	6920      	ldr	r0, [r4, #16]
 800e494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e498:	f104 0314 	add.w	r3, r4, #20
 800e49c:	f019 091f 	ands.w	r9, r9, #31
 800e4a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e4a8:	d02b      	beq.n	800e502 <__lshift+0xbe>
 800e4aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e4ae:	468a      	mov	sl, r1
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	6818      	ldr	r0, [r3, #0]
 800e4b4:	fa00 f009 	lsl.w	r0, r0, r9
 800e4b8:	4310      	orrs	r0, r2
 800e4ba:	f84a 0b04 	str.w	r0, [sl], #4
 800e4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4c2:	459c      	cmp	ip, r3
 800e4c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e4c8:	d8f3      	bhi.n	800e4b2 <__lshift+0x6e>
 800e4ca:	ebac 0304 	sub.w	r3, ip, r4
 800e4ce:	3b15      	subs	r3, #21
 800e4d0:	f023 0303 	bic.w	r3, r3, #3
 800e4d4:	3304      	adds	r3, #4
 800e4d6:	f104 0015 	add.w	r0, r4, #21
 800e4da:	4584      	cmp	ip, r0
 800e4dc:	bf38      	it	cc
 800e4de:	2304      	movcc	r3, #4
 800e4e0:	50ca      	str	r2, [r1, r3]
 800e4e2:	b10a      	cbz	r2, 800e4e8 <__lshift+0xa4>
 800e4e4:	f108 0602 	add.w	r6, r8, #2
 800e4e8:	3e01      	subs	r6, #1
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	612e      	str	r6, [r5, #16]
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	f7ff fdd8 	bl	800e0a4 <_Bfree>
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4fe:	3301      	adds	r3, #1
 800e500:	e7c5      	b.n	800e48e <__lshift+0x4a>
 800e502:	3904      	subs	r1, #4
 800e504:	f853 2b04 	ldr.w	r2, [r3], #4
 800e508:	f841 2f04 	str.w	r2, [r1, #4]!
 800e50c:	459c      	cmp	ip, r3
 800e50e:	d8f9      	bhi.n	800e504 <__lshift+0xc0>
 800e510:	e7ea      	b.n	800e4e8 <__lshift+0xa4>
 800e512:	bf00      	nop
 800e514:	0800f29c 	.word	0x0800f29c
 800e518:	0800f2ad 	.word	0x0800f2ad

0800e51c <__mcmp>:
 800e51c:	b530      	push	{r4, r5, lr}
 800e51e:	6902      	ldr	r2, [r0, #16]
 800e520:	690c      	ldr	r4, [r1, #16]
 800e522:	1b12      	subs	r2, r2, r4
 800e524:	d10e      	bne.n	800e544 <__mcmp+0x28>
 800e526:	f100 0314 	add.w	r3, r0, #20
 800e52a:	3114      	adds	r1, #20
 800e52c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e530:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e534:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e538:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e53c:	42a5      	cmp	r5, r4
 800e53e:	d003      	beq.n	800e548 <__mcmp+0x2c>
 800e540:	d305      	bcc.n	800e54e <__mcmp+0x32>
 800e542:	2201      	movs	r2, #1
 800e544:	4610      	mov	r0, r2
 800e546:	bd30      	pop	{r4, r5, pc}
 800e548:	4283      	cmp	r3, r0
 800e54a:	d3f3      	bcc.n	800e534 <__mcmp+0x18>
 800e54c:	e7fa      	b.n	800e544 <__mcmp+0x28>
 800e54e:	f04f 32ff 	mov.w	r2, #4294967295
 800e552:	e7f7      	b.n	800e544 <__mcmp+0x28>

0800e554 <__mdiff>:
 800e554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e558:	460c      	mov	r4, r1
 800e55a:	4606      	mov	r6, r0
 800e55c:	4611      	mov	r1, r2
 800e55e:	4620      	mov	r0, r4
 800e560:	4690      	mov	r8, r2
 800e562:	f7ff ffdb 	bl	800e51c <__mcmp>
 800e566:	1e05      	subs	r5, r0, #0
 800e568:	d110      	bne.n	800e58c <__mdiff+0x38>
 800e56a:	4629      	mov	r1, r5
 800e56c:	4630      	mov	r0, r6
 800e56e:	f7ff fd59 	bl	800e024 <_Balloc>
 800e572:	b930      	cbnz	r0, 800e582 <__mdiff+0x2e>
 800e574:	4b3a      	ldr	r3, [pc, #232]	; (800e660 <__mdiff+0x10c>)
 800e576:	4602      	mov	r2, r0
 800e578:	f240 2137 	movw	r1, #567	; 0x237
 800e57c:	4839      	ldr	r0, [pc, #228]	; (800e664 <__mdiff+0x110>)
 800e57e:	f000 fb53 	bl	800ec28 <__assert_func>
 800e582:	2301      	movs	r3, #1
 800e584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58c:	bfa4      	itt	ge
 800e58e:	4643      	movge	r3, r8
 800e590:	46a0      	movge	r8, r4
 800e592:	4630      	mov	r0, r6
 800e594:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e598:	bfa6      	itte	ge
 800e59a:	461c      	movge	r4, r3
 800e59c:	2500      	movge	r5, #0
 800e59e:	2501      	movlt	r5, #1
 800e5a0:	f7ff fd40 	bl	800e024 <_Balloc>
 800e5a4:	b920      	cbnz	r0, 800e5b0 <__mdiff+0x5c>
 800e5a6:	4b2e      	ldr	r3, [pc, #184]	; (800e660 <__mdiff+0x10c>)
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	f240 2145 	movw	r1, #581	; 0x245
 800e5ae:	e7e5      	b.n	800e57c <__mdiff+0x28>
 800e5b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e5b4:	6926      	ldr	r6, [r4, #16]
 800e5b6:	60c5      	str	r5, [r0, #12]
 800e5b8:	f104 0914 	add.w	r9, r4, #20
 800e5bc:	f108 0514 	add.w	r5, r8, #20
 800e5c0:	f100 0e14 	add.w	lr, r0, #20
 800e5c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e5c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e5cc:	f108 0210 	add.w	r2, r8, #16
 800e5d0:	46f2      	mov	sl, lr
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e5d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e5dc:	fa11 f88b 	uxtah	r8, r1, fp
 800e5e0:	b299      	uxth	r1, r3
 800e5e2:	0c1b      	lsrs	r3, r3, #16
 800e5e4:	eba8 0801 	sub.w	r8, r8, r1
 800e5e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e5ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e5f0:	fa1f f888 	uxth.w	r8, r8
 800e5f4:	1419      	asrs	r1, r3, #16
 800e5f6:	454e      	cmp	r6, r9
 800e5f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e5fc:	f84a 3b04 	str.w	r3, [sl], #4
 800e600:	d8e8      	bhi.n	800e5d4 <__mdiff+0x80>
 800e602:	1b33      	subs	r3, r6, r4
 800e604:	3b15      	subs	r3, #21
 800e606:	f023 0303 	bic.w	r3, r3, #3
 800e60a:	3304      	adds	r3, #4
 800e60c:	3415      	adds	r4, #21
 800e60e:	42a6      	cmp	r6, r4
 800e610:	bf38      	it	cc
 800e612:	2304      	movcc	r3, #4
 800e614:	441d      	add	r5, r3
 800e616:	4473      	add	r3, lr
 800e618:	469e      	mov	lr, r3
 800e61a:	462e      	mov	r6, r5
 800e61c:	4566      	cmp	r6, ip
 800e61e:	d30e      	bcc.n	800e63e <__mdiff+0xea>
 800e620:	f10c 0203 	add.w	r2, ip, #3
 800e624:	1b52      	subs	r2, r2, r5
 800e626:	f022 0203 	bic.w	r2, r2, #3
 800e62a:	3d03      	subs	r5, #3
 800e62c:	45ac      	cmp	ip, r5
 800e62e:	bf38      	it	cc
 800e630:	2200      	movcc	r2, #0
 800e632:	4413      	add	r3, r2
 800e634:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e638:	b17a      	cbz	r2, 800e65a <__mdiff+0x106>
 800e63a:	6107      	str	r7, [r0, #16]
 800e63c:	e7a4      	b.n	800e588 <__mdiff+0x34>
 800e63e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e642:	fa11 f288 	uxtah	r2, r1, r8
 800e646:	1414      	asrs	r4, r2, #16
 800e648:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e64c:	b292      	uxth	r2, r2
 800e64e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e652:	f84e 2b04 	str.w	r2, [lr], #4
 800e656:	1421      	asrs	r1, r4, #16
 800e658:	e7e0      	b.n	800e61c <__mdiff+0xc8>
 800e65a:	3f01      	subs	r7, #1
 800e65c:	e7ea      	b.n	800e634 <__mdiff+0xe0>
 800e65e:	bf00      	nop
 800e660:	0800f29c 	.word	0x0800f29c
 800e664:	0800f2ad 	.word	0x0800f2ad

0800e668 <__d2b>:
 800e668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e66c:	460f      	mov	r7, r1
 800e66e:	2101      	movs	r1, #1
 800e670:	ec59 8b10 	vmov	r8, r9, d0
 800e674:	4616      	mov	r6, r2
 800e676:	f7ff fcd5 	bl	800e024 <_Balloc>
 800e67a:	4604      	mov	r4, r0
 800e67c:	b930      	cbnz	r0, 800e68c <__d2b+0x24>
 800e67e:	4602      	mov	r2, r0
 800e680:	4b24      	ldr	r3, [pc, #144]	; (800e714 <__d2b+0xac>)
 800e682:	4825      	ldr	r0, [pc, #148]	; (800e718 <__d2b+0xb0>)
 800e684:	f240 310f 	movw	r1, #783	; 0x30f
 800e688:	f000 face 	bl	800ec28 <__assert_func>
 800e68c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e694:	bb2d      	cbnz	r5, 800e6e2 <__d2b+0x7a>
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	f1b8 0300 	subs.w	r3, r8, #0
 800e69c:	d026      	beq.n	800e6ec <__d2b+0x84>
 800e69e:	4668      	mov	r0, sp
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	f7ff fd87 	bl	800e1b4 <__lo0bits>
 800e6a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e6aa:	b1e8      	cbz	r0, 800e6e8 <__d2b+0x80>
 800e6ac:	f1c0 0320 	rsb	r3, r0, #32
 800e6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e6b4:	430b      	orrs	r3, r1
 800e6b6:	40c2      	lsrs	r2, r0
 800e6b8:	6163      	str	r3, [r4, #20]
 800e6ba:	9201      	str	r2, [sp, #4]
 800e6bc:	9b01      	ldr	r3, [sp, #4]
 800e6be:	61a3      	str	r3, [r4, #24]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	bf14      	ite	ne
 800e6c4:	2202      	movne	r2, #2
 800e6c6:	2201      	moveq	r2, #1
 800e6c8:	6122      	str	r2, [r4, #16]
 800e6ca:	b1bd      	cbz	r5, 800e6fc <__d2b+0x94>
 800e6cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e6d0:	4405      	add	r5, r0
 800e6d2:	603d      	str	r5, [r7, #0]
 800e6d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6d8:	6030      	str	r0, [r6, #0]
 800e6da:	4620      	mov	r0, r4
 800e6dc:	b003      	add	sp, #12
 800e6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6e6:	e7d6      	b.n	800e696 <__d2b+0x2e>
 800e6e8:	6161      	str	r1, [r4, #20]
 800e6ea:	e7e7      	b.n	800e6bc <__d2b+0x54>
 800e6ec:	a801      	add	r0, sp, #4
 800e6ee:	f7ff fd61 	bl	800e1b4 <__lo0bits>
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	6163      	str	r3, [r4, #20]
 800e6f6:	3020      	adds	r0, #32
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	e7e5      	b.n	800e6c8 <__d2b+0x60>
 800e6fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e700:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e704:	6038      	str	r0, [r7, #0]
 800e706:	6918      	ldr	r0, [r3, #16]
 800e708:	f7ff fd34 	bl	800e174 <__hi0bits>
 800e70c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e710:	e7e2      	b.n	800e6d8 <__d2b+0x70>
 800e712:	bf00      	nop
 800e714:	0800f29c 	.word	0x0800f29c
 800e718:	0800f2ad 	.word	0x0800f2ad

0800e71c <__sfputc_r>:
 800e71c:	6893      	ldr	r3, [r2, #8]
 800e71e:	3b01      	subs	r3, #1
 800e720:	2b00      	cmp	r3, #0
 800e722:	b410      	push	{r4}
 800e724:	6093      	str	r3, [r2, #8]
 800e726:	da08      	bge.n	800e73a <__sfputc_r+0x1e>
 800e728:	6994      	ldr	r4, [r2, #24]
 800e72a:	42a3      	cmp	r3, r4
 800e72c:	db01      	blt.n	800e732 <__sfputc_r+0x16>
 800e72e:	290a      	cmp	r1, #10
 800e730:	d103      	bne.n	800e73a <__sfputc_r+0x1e>
 800e732:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e736:	f7fe bb82 	b.w	800ce3e <__swbuf_r>
 800e73a:	6813      	ldr	r3, [r2, #0]
 800e73c:	1c58      	adds	r0, r3, #1
 800e73e:	6010      	str	r0, [r2, #0]
 800e740:	7019      	strb	r1, [r3, #0]
 800e742:	4608      	mov	r0, r1
 800e744:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <__sfputs_r>:
 800e74a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74c:	4606      	mov	r6, r0
 800e74e:	460f      	mov	r7, r1
 800e750:	4614      	mov	r4, r2
 800e752:	18d5      	adds	r5, r2, r3
 800e754:	42ac      	cmp	r4, r5
 800e756:	d101      	bne.n	800e75c <__sfputs_r+0x12>
 800e758:	2000      	movs	r0, #0
 800e75a:	e007      	b.n	800e76c <__sfputs_r+0x22>
 800e75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e760:	463a      	mov	r2, r7
 800e762:	4630      	mov	r0, r6
 800e764:	f7ff ffda 	bl	800e71c <__sfputc_r>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	d1f3      	bne.n	800e754 <__sfputs_r+0xa>
 800e76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e770 <_vfiprintf_r>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	460d      	mov	r5, r1
 800e776:	b09d      	sub	sp, #116	; 0x74
 800e778:	4614      	mov	r4, r2
 800e77a:	4698      	mov	r8, r3
 800e77c:	4606      	mov	r6, r0
 800e77e:	b118      	cbz	r0, 800e788 <_vfiprintf_r+0x18>
 800e780:	6a03      	ldr	r3, [r0, #32]
 800e782:	b90b      	cbnz	r3, 800e788 <_vfiprintf_r+0x18>
 800e784:	f7fe fa74 	bl	800cc70 <__sinit>
 800e788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e78a:	07d9      	lsls	r1, r3, #31
 800e78c:	d405      	bmi.n	800e79a <_vfiprintf_r+0x2a>
 800e78e:	89ab      	ldrh	r3, [r5, #12]
 800e790:	059a      	lsls	r2, r3, #22
 800e792:	d402      	bmi.n	800e79a <_vfiprintf_r+0x2a>
 800e794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e796:	f7fe fcba 	bl	800d10e <__retarget_lock_acquire_recursive>
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	071b      	lsls	r3, r3, #28
 800e79e:	d501      	bpl.n	800e7a4 <_vfiprintf_r+0x34>
 800e7a0:	692b      	ldr	r3, [r5, #16]
 800e7a2:	b99b      	cbnz	r3, 800e7cc <_vfiprintf_r+0x5c>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f7fe fb86 	bl	800ceb8 <__swsetup_r>
 800e7ac:	b170      	cbz	r0, 800e7cc <_vfiprintf_r+0x5c>
 800e7ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7b0:	07dc      	lsls	r4, r3, #31
 800e7b2:	d504      	bpl.n	800e7be <_vfiprintf_r+0x4e>
 800e7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b8:	b01d      	add	sp, #116	; 0x74
 800e7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7be:	89ab      	ldrh	r3, [r5, #12]
 800e7c0:	0598      	lsls	r0, r3, #22
 800e7c2:	d4f7      	bmi.n	800e7b4 <_vfiprintf_r+0x44>
 800e7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7c6:	f7fe fca3 	bl	800d110 <__retarget_lock_release_recursive>
 800e7ca:	e7f3      	b.n	800e7b4 <_vfiprintf_r+0x44>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e7d0:	2320      	movs	r3, #32
 800e7d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7da:	2330      	movs	r3, #48	; 0x30
 800e7dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e990 <_vfiprintf_r+0x220>
 800e7e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7e4:	f04f 0901 	mov.w	r9, #1
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	469a      	mov	sl, r3
 800e7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7f0:	b10a      	cbz	r2, 800e7f6 <_vfiprintf_r+0x86>
 800e7f2:	2a25      	cmp	r2, #37	; 0x25
 800e7f4:	d1f9      	bne.n	800e7ea <_vfiprintf_r+0x7a>
 800e7f6:	ebba 0b04 	subs.w	fp, sl, r4
 800e7fa:	d00b      	beq.n	800e814 <_vfiprintf_r+0xa4>
 800e7fc:	465b      	mov	r3, fp
 800e7fe:	4622      	mov	r2, r4
 800e800:	4629      	mov	r1, r5
 800e802:	4630      	mov	r0, r6
 800e804:	f7ff ffa1 	bl	800e74a <__sfputs_r>
 800e808:	3001      	adds	r0, #1
 800e80a:	f000 80a9 	beq.w	800e960 <_vfiprintf_r+0x1f0>
 800e80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e810:	445a      	add	r2, fp
 800e812:	9209      	str	r2, [sp, #36]	; 0x24
 800e814:	f89a 3000 	ldrb.w	r3, [sl]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 80a1 	beq.w	800e960 <_vfiprintf_r+0x1f0>
 800e81e:	2300      	movs	r3, #0
 800e820:	f04f 32ff 	mov.w	r2, #4294967295
 800e824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e828:	f10a 0a01 	add.w	sl, sl, #1
 800e82c:	9304      	str	r3, [sp, #16]
 800e82e:	9307      	str	r3, [sp, #28]
 800e830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e834:	931a      	str	r3, [sp, #104]	; 0x68
 800e836:	4654      	mov	r4, sl
 800e838:	2205      	movs	r2, #5
 800e83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e83e:	4854      	ldr	r0, [pc, #336]	; (800e990 <_vfiprintf_r+0x220>)
 800e840:	f7f1 fcce 	bl	80001e0 <memchr>
 800e844:	9a04      	ldr	r2, [sp, #16]
 800e846:	b9d8      	cbnz	r0, 800e880 <_vfiprintf_r+0x110>
 800e848:	06d1      	lsls	r1, r2, #27
 800e84a:	bf44      	itt	mi
 800e84c:	2320      	movmi	r3, #32
 800e84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e852:	0713      	lsls	r3, r2, #28
 800e854:	bf44      	itt	mi
 800e856:	232b      	movmi	r3, #43	; 0x2b
 800e858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e85c:	f89a 3000 	ldrb.w	r3, [sl]
 800e860:	2b2a      	cmp	r3, #42	; 0x2a
 800e862:	d015      	beq.n	800e890 <_vfiprintf_r+0x120>
 800e864:	9a07      	ldr	r2, [sp, #28]
 800e866:	4654      	mov	r4, sl
 800e868:	2000      	movs	r0, #0
 800e86a:	f04f 0c0a 	mov.w	ip, #10
 800e86e:	4621      	mov	r1, r4
 800e870:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e874:	3b30      	subs	r3, #48	; 0x30
 800e876:	2b09      	cmp	r3, #9
 800e878:	d94d      	bls.n	800e916 <_vfiprintf_r+0x1a6>
 800e87a:	b1b0      	cbz	r0, 800e8aa <_vfiprintf_r+0x13a>
 800e87c:	9207      	str	r2, [sp, #28]
 800e87e:	e014      	b.n	800e8aa <_vfiprintf_r+0x13a>
 800e880:	eba0 0308 	sub.w	r3, r0, r8
 800e884:	fa09 f303 	lsl.w	r3, r9, r3
 800e888:	4313      	orrs	r3, r2
 800e88a:	9304      	str	r3, [sp, #16]
 800e88c:	46a2      	mov	sl, r4
 800e88e:	e7d2      	b.n	800e836 <_vfiprintf_r+0xc6>
 800e890:	9b03      	ldr	r3, [sp, #12]
 800e892:	1d19      	adds	r1, r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	9103      	str	r1, [sp, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bfbb      	ittet	lt
 800e89c:	425b      	neglt	r3, r3
 800e89e:	f042 0202 	orrlt.w	r2, r2, #2
 800e8a2:	9307      	strge	r3, [sp, #28]
 800e8a4:	9307      	strlt	r3, [sp, #28]
 800e8a6:	bfb8      	it	lt
 800e8a8:	9204      	strlt	r2, [sp, #16]
 800e8aa:	7823      	ldrb	r3, [r4, #0]
 800e8ac:	2b2e      	cmp	r3, #46	; 0x2e
 800e8ae:	d10c      	bne.n	800e8ca <_vfiprintf_r+0x15a>
 800e8b0:	7863      	ldrb	r3, [r4, #1]
 800e8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800e8b4:	d134      	bne.n	800e920 <_vfiprintf_r+0x1b0>
 800e8b6:	9b03      	ldr	r3, [sp, #12]
 800e8b8:	1d1a      	adds	r2, r3, #4
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	9203      	str	r2, [sp, #12]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	bfb8      	it	lt
 800e8c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8c6:	3402      	adds	r4, #2
 800e8c8:	9305      	str	r3, [sp, #20]
 800e8ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e9a0 <_vfiprintf_r+0x230>
 800e8ce:	7821      	ldrb	r1, [r4, #0]
 800e8d0:	2203      	movs	r2, #3
 800e8d2:	4650      	mov	r0, sl
 800e8d4:	f7f1 fc84 	bl	80001e0 <memchr>
 800e8d8:	b138      	cbz	r0, 800e8ea <_vfiprintf_r+0x17a>
 800e8da:	9b04      	ldr	r3, [sp, #16]
 800e8dc:	eba0 000a 	sub.w	r0, r0, sl
 800e8e0:	2240      	movs	r2, #64	; 0x40
 800e8e2:	4082      	lsls	r2, r0
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	3401      	adds	r4, #1
 800e8e8:	9304      	str	r3, [sp, #16]
 800e8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ee:	4829      	ldr	r0, [pc, #164]	; (800e994 <_vfiprintf_r+0x224>)
 800e8f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8f4:	2206      	movs	r2, #6
 800e8f6:	f7f1 fc73 	bl	80001e0 <memchr>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d03f      	beq.n	800e97e <_vfiprintf_r+0x20e>
 800e8fe:	4b26      	ldr	r3, [pc, #152]	; (800e998 <_vfiprintf_r+0x228>)
 800e900:	bb1b      	cbnz	r3, 800e94a <_vfiprintf_r+0x1da>
 800e902:	9b03      	ldr	r3, [sp, #12]
 800e904:	3307      	adds	r3, #7
 800e906:	f023 0307 	bic.w	r3, r3, #7
 800e90a:	3308      	adds	r3, #8
 800e90c:	9303      	str	r3, [sp, #12]
 800e90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e910:	443b      	add	r3, r7
 800e912:	9309      	str	r3, [sp, #36]	; 0x24
 800e914:	e768      	b.n	800e7e8 <_vfiprintf_r+0x78>
 800e916:	fb0c 3202 	mla	r2, ip, r2, r3
 800e91a:	460c      	mov	r4, r1
 800e91c:	2001      	movs	r0, #1
 800e91e:	e7a6      	b.n	800e86e <_vfiprintf_r+0xfe>
 800e920:	2300      	movs	r3, #0
 800e922:	3401      	adds	r4, #1
 800e924:	9305      	str	r3, [sp, #20]
 800e926:	4619      	mov	r1, r3
 800e928:	f04f 0c0a 	mov.w	ip, #10
 800e92c:	4620      	mov	r0, r4
 800e92e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e932:	3a30      	subs	r2, #48	; 0x30
 800e934:	2a09      	cmp	r2, #9
 800e936:	d903      	bls.n	800e940 <_vfiprintf_r+0x1d0>
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d0c6      	beq.n	800e8ca <_vfiprintf_r+0x15a>
 800e93c:	9105      	str	r1, [sp, #20]
 800e93e:	e7c4      	b.n	800e8ca <_vfiprintf_r+0x15a>
 800e940:	fb0c 2101 	mla	r1, ip, r1, r2
 800e944:	4604      	mov	r4, r0
 800e946:	2301      	movs	r3, #1
 800e948:	e7f0      	b.n	800e92c <_vfiprintf_r+0x1bc>
 800e94a:	ab03      	add	r3, sp, #12
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	462a      	mov	r2, r5
 800e950:	4b12      	ldr	r3, [pc, #72]	; (800e99c <_vfiprintf_r+0x22c>)
 800e952:	a904      	add	r1, sp, #16
 800e954:	4630      	mov	r0, r6
 800e956:	f7fd fd39 	bl	800c3cc <_printf_float>
 800e95a:	4607      	mov	r7, r0
 800e95c:	1c78      	adds	r0, r7, #1
 800e95e:	d1d6      	bne.n	800e90e <_vfiprintf_r+0x19e>
 800e960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e962:	07d9      	lsls	r1, r3, #31
 800e964:	d405      	bmi.n	800e972 <_vfiprintf_r+0x202>
 800e966:	89ab      	ldrh	r3, [r5, #12]
 800e968:	059a      	lsls	r2, r3, #22
 800e96a:	d402      	bmi.n	800e972 <_vfiprintf_r+0x202>
 800e96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e96e:	f7fe fbcf 	bl	800d110 <__retarget_lock_release_recursive>
 800e972:	89ab      	ldrh	r3, [r5, #12]
 800e974:	065b      	lsls	r3, r3, #25
 800e976:	f53f af1d 	bmi.w	800e7b4 <_vfiprintf_r+0x44>
 800e97a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e97c:	e71c      	b.n	800e7b8 <_vfiprintf_r+0x48>
 800e97e:	ab03      	add	r3, sp, #12
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	462a      	mov	r2, r5
 800e984:	4b05      	ldr	r3, [pc, #20]	; (800e99c <_vfiprintf_r+0x22c>)
 800e986:	a904      	add	r1, sp, #16
 800e988:	4630      	mov	r0, r6
 800e98a:	f7fd ffc3 	bl	800c914 <_printf_i>
 800e98e:	e7e4      	b.n	800e95a <_vfiprintf_r+0x1ea>
 800e990:	0800f404 	.word	0x0800f404
 800e994:	0800f40e 	.word	0x0800f40e
 800e998:	0800c3cd 	.word	0x0800c3cd
 800e99c:	0800e74b 	.word	0x0800e74b
 800e9a0:	0800f40a 	.word	0x0800f40a

0800e9a4 <__sflush_r>:
 800e9a4:	898a      	ldrh	r2, [r1, #12]
 800e9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	0710      	lsls	r0, r2, #28
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	d458      	bmi.n	800ea64 <__sflush_r+0xc0>
 800e9b2:	684b      	ldr	r3, [r1, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	dc05      	bgt.n	800e9c4 <__sflush_r+0x20>
 800e9b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	dc02      	bgt.n	800e9c4 <__sflush_r+0x20>
 800e9be:	2000      	movs	r0, #0
 800e9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9c6:	2e00      	cmp	r6, #0
 800e9c8:	d0f9      	beq.n	800e9be <__sflush_r+0x1a>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9d0:	682f      	ldr	r7, [r5, #0]
 800e9d2:	6a21      	ldr	r1, [r4, #32]
 800e9d4:	602b      	str	r3, [r5, #0]
 800e9d6:	d032      	beq.n	800ea3e <__sflush_r+0x9a>
 800e9d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9da:	89a3      	ldrh	r3, [r4, #12]
 800e9dc:	075a      	lsls	r2, r3, #29
 800e9de:	d505      	bpl.n	800e9ec <__sflush_r+0x48>
 800e9e0:	6863      	ldr	r3, [r4, #4]
 800e9e2:	1ac0      	subs	r0, r0, r3
 800e9e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9e6:	b10b      	cbz	r3, 800e9ec <__sflush_r+0x48>
 800e9e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9ea:	1ac0      	subs	r0, r0, r3
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9f2:	6a21      	ldr	r1, [r4, #32]
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	47b0      	blx	r6
 800e9f8:	1c43      	adds	r3, r0, #1
 800e9fa:	89a3      	ldrh	r3, [r4, #12]
 800e9fc:	d106      	bne.n	800ea0c <__sflush_r+0x68>
 800e9fe:	6829      	ldr	r1, [r5, #0]
 800ea00:	291d      	cmp	r1, #29
 800ea02:	d82b      	bhi.n	800ea5c <__sflush_r+0xb8>
 800ea04:	4a29      	ldr	r2, [pc, #164]	; (800eaac <__sflush_r+0x108>)
 800ea06:	410a      	asrs	r2, r1
 800ea08:	07d6      	lsls	r6, r2, #31
 800ea0a:	d427      	bmi.n	800ea5c <__sflush_r+0xb8>
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	6062      	str	r2, [r4, #4]
 800ea10:	04d9      	lsls	r1, r3, #19
 800ea12:	6922      	ldr	r2, [r4, #16]
 800ea14:	6022      	str	r2, [r4, #0]
 800ea16:	d504      	bpl.n	800ea22 <__sflush_r+0x7e>
 800ea18:	1c42      	adds	r2, r0, #1
 800ea1a:	d101      	bne.n	800ea20 <__sflush_r+0x7c>
 800ea1c:	682b      	ldr	r3, [r5, #0]
 800ea1e:	b903      	cbnz	r3, 800ea22 <__sflush_r+0x7e>
 800ea20:	6560      	str	r0, [r4, #84]	; 0x54
 800ea22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea24:	602f      	str	r7, [r5, #0]
 800ea26:	2900      	cmp	r1, #0
 800ea28:	d0c9      	beq.n	800e9be <__sflush_r+0x1a>
 800ea2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea2e:	4299      	cmp	r1, r3
 800ea30:	d002      	beq.n	800ea38 <__sflush_r+0x94>
 800ea32:	4628      	mov	r0, r5
 800ea34:	f7ff f9f6 	bl	800de24 <_free_r>
 800ea38:	2000      	movs	r0, #0
 800ea3a:	6360      	str	r0, [r4, #52]	; 0x34
 800ea3c:	e7c0      	b.n	800e9c0 <__sflush_r+0x1c>
 800ea3e:	2301      	movs	r3, #1
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b0      	blx	r6
 800ea44:	1c41      	adds	r1, r0, #1
 800ea46:	d1c8      	bne.n	800e9da <__sflush_r+0x36>
 800ea48:	682b      	ldr	r3, [r5, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d0c5      	beq.n	800e9da <__sflush_r+0x36>
 800ea4e:	2b1d      	cmp	r3, #29
 800ea50:	d001      	beq.n	800ea56 <__sflush_r+0xb2>
 800ea52:	2b16      	cmp	r3, #22
 800ea54:	d101      	bne.n	800ea5a <__sflush_r+0xb6>
 800ea56:	602f      	str	r7, [r5, #0]
 800ea58:	e7b1      	b.n	800e9be <__sflush_r+0x1a>
 800ea5a:	89a3      	ldrh	r3, [r4, #12]
 800ea5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea60:	81a3      	strh	r3, [r4, #12]
 800ea62:	e7ad      	b.n	800e9c0 <__sflush_r+0x1c>
 800ea64:	690f      	ldr	r7, [r1, #16]
 800ea66:	2f00      	cmp	r7, #0
 800ea68:	d0a9      	beq.n	800e9be <__sflush_r+0x1a>
 800ea6a:	0793      	lsls	r3, r2, #30
 800ea6c:	680e      	ldr	r6, [r1, #0]
 800ea6e:	bf08      	it	eq
 800ea70:	694b      	ldreq	r3, [r1, #20]
 800ea72:	600f      	str	r7, [r1, #0]
 800ea74:	bf18      	it	ne
 800ea76:	2300      	movne	r3, #0
 800ea78:	eba6 0807 	sub.w	r8, r6, r7
 800ea7c:	608b      	str	r3, [r1, #8]
 800ea7e:	f1b8 0f00 	cmp.w	r8, #0
 800ea82:	dd9c      	ble.n	800e9be <__sflush_r+0x1a>
 800ea84:	6a21      	ldr	r1, [r4, #32]
 800ea86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea88:	4643      	mov	r3, r8
 800ea8a:	463a      	mov	r2, r7
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	47b0      	blx	r6
 800ea90:	2800      	cmp	r0, #0
 800ea92:	dc06      	bgt.n	800eaa2 <__sflush_r+0xfe>
 800ea94:	89a3      	ldrh	r3, [r4, #12]
 800ea96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea9a:	81a3      	strh	r3, [r4, #12]
 800ea9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa0:	e78e      	b.n	800e9c0 <__sflush_r+0x1c>
 800eaa2:	4407      	add	r7, r0
 800eaa4:	eba8 0800 	sub.w	r8, r8, r0
 800eaa8:	e7e9      	b.n	800ea7e <__sflush_r+0xda>
 800eaaa:	bf00      	nop
 800eaac:	dfbffffe 	.word	0xdfbffffe

0800eab0 <_fflush_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	690b      	ldr	r3, [r1, #16]
 800eab4:	4605      	mov	r5, r0
 800eab6:	460c      	mov	r4, r1
 800eab8:	b913      	cbnz	r3, 800eac0 <_fflush_r+0x10>
 800eaba:	2500      	movs	r5, #0
 800eabc:	4628      	mov	r0, r5
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
 800eac0:	b118      	cbz	r0, 800eaca <_fflush_r+0x1a>
 800eac2:	6a03      	ldr	r3, [r0, #32]
 800eac4:	b90b      	cbnz	r3, 800eaca <_fflush_r+0x1a>
 800eac6:	f7fe f8d3 	bl	800cc70 <__sinit>
 800eaca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d0f3      	beq.n	800eaba <_fflush_r+0xa>
 800ead2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ead4:	07d0      	lsls	r0, r2, #31
 800ead6:	d404      	bmi.n	800eae2 <_fflush_r+0x32>
 800ead8:	0599      	lsls	r1, r3, #22
 800eada:	d402      	bmi.n	800eae2 <_fflush_r+0x32>
 800eadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eade:	f7fe fb16 	bl	800d10e <__retarget_lock_acquire_recursive>
 800eae2:	4628      	mov	r0, r5
 800eae4:	4621      	mov	r1, r4
 800eae6:	f7ff ff5d 	bl	800e9a4 <__sflush_r>
 800eaea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaec:	07da      	lsls	r2, r3, #31
 800eaee:	4605      	mov	r5, r0
 800eaf0:	d4e4      	bmi.n	800eabc <_fflush_r+0xc>
 800eaf2:	89a3      	ldrh	r3, [r4, #12]
 800eaf4:	059b      	lsls	r3, r3, #22
 800eaf6:	d4e1      	bmi.n	800eabc <_fflush_r+0xc>
 800eaf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eafa:	f7fe fb09 	bl	800d110 <__retarget_lock_release_recursive>
 800eafe:	e7dd      	b.n	800eabc <_fflush_r+0xc>

0800eb00 <__swhatbuf_r>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	460c      	mov	r4, r1
 800eb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb08:	2900      	cmp	r1, #0
 800eb0a:	b096      	sub	sp, #88	; 0x58
 800eb0c:	4615      	mov	r5, r2
 800eb0e:	461e      	mov	r6, r3
 800eb10:	da0d      	bge.n	800eb2e <__swhatbuf_r+0x2e>
 800eb12:	89a3      	ldrh	r3, [r4, #12]
 800eb14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eb18:	f04f 0100 	mov.w	r1, #0
 800eb1c:	bf0c      	ite	eq
 800eb1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eb22:	2340      	movne	r3, #64	; 0x40
 800eb24:	2000      	movs	r0, #0
 800eb26:	6031      	str	r1, [r6, #0]
 800eb28:	602b      	str	r3, [r5, #0]
 800eb2a:	b016      	add	sp, #88	; 0x58
 800eb2c:	bd70      	pop	{r4, r5, r6, pc}
 800eb2e:	466a      	mov	r2, sp
 800eb30:	f000 f848 	bl	800ebc4 <_fstat_r>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	dbec      	blt.n	800eb12 <__swhatbuf_r+0x12>
 800eb38:	9901      	ldr	r1, [sp, #4]
 800eb3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eb3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eb42:	4259      	negs	r1, r3
 800eb44:	4159      	adcs	r1, r3
 800eb46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb4a:	e7eb      	b.n	800eb24 <__swhatbuf_r+0x24>

0800eb4c <__smakebuf_r>:
 800eb4c:	898b      	ldrh	r3, [r1, #12]
 800eb4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb50:	079d      	lsls	r5, r3, #30
 800eb52:	4606      	mov	r6, r0
 800eb54:	460c      	mov	r4, r1
 800eb56:	d507      	bpl.n	800eb68 <__smakebuf_r+0x1c>
 800eb58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	6123      	str	r3, [r4, #16]
 800eb60:	2301      	movs	r3, #1
 800eb62:	6163      	str	r3, [r4, #20]
 800eb64:	b002      	add	sp, #8
 800eb66:	bd70      	pop	{r4, r5, r6, pc}
 800eb68:	ab01      	add	r3, sp, #4
 800eb6a:	466a      	mov	r2, sp
 800eb6c:	f7ff ffc8 	bl	800eb00 <__swhatbuf_r>
 800eb70:	9900      	ldr	r1, [sp, #0]
 800eb72:	4605      	mov	r5, r0
 800eb74:	4630      	mov	r0, r6
 800eb76:	f7ff f9c9 	bl	800df0c <_malloc_r>
 800eb7a:	b948      	cbnz	r0, 800eb90 <__smakebuf_r+0x44>
 800eb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb80:	059a      	lsls	r2, r3, #22
 800eb82:	d4ef      	bmi.n	800eb64 <__smakebuf_r+0x18>
 800eb84:	f023 0303 	bic.w	r3, r3, #3
 800eb88:	f043 0302 	orr.w	r3, r3, #2
 800eb8c:	81a3      	strh	r3, [r4, #12]
 800eb8e:	e7e3      	b.n	800eb58 <__smakebuf_r+0xc>
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	6020      	str	r0, [r4, #0]
 800eb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb98:	81a3      	strh	r3, [r4, #12]
 800eb9a:	9b00      	ldr	r3, [sp, #0]
 800eb9c:	6163      	str	r3, [r4, #20]
 800eb9e:	9b01      	ldr	r3, [sp, #4]
 800eba0:	6120      	str	r0, [r4, #16]
 800eba2:	b15b      	cbz	r3, 800ebbc <__smakebuf_r+0x70>
 800eba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f000 f81d 	bl	800ebe8 <_isatty_r>
 800ebae:	b128      	cbz	r0, 800ebbc <__smakebuf_r+0x70>
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f023 0303 	bic.w	r3, r3, #3
 800ebb6:	f043 0301 	orr.w	r3, r3, #1
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	89a3      	ldrh	r3, [r4, #12]
 800ebbe:	431d      	orrs	r5, r3
 800ebc0:	81a5      	strh	r5, [r4, #12]
 800ebc2:	e7cf      	b.n	800eb64 <__smakebuf_r+0x18>

0800ebc4 <_fstat_r>:
 800ebc4:	b538      	push	{r3, r4, r5, lr}
 800ebc6:	4d07      	ldr	r5, [pc, #28]	; (800ebe4 <_fstat_r+0x20>)
 800ebc8:	2300      	movs	r3, #0
 800ebca:	4604      	mov	r4, r0
 800ebcc:	4608      	mov	r0, r1
 800ebce:	4611      	mov	r1, r2
 800ebd0:	602b      	str	r3, [r5, #0]
 800ebd2:	f7f2 ff6a 	bl	8001aaa <_fstat>
 800ebd6:	1c43      	adds	r3, r0, #1
 800ebd8:	d102      	bne.n	800ebe0 <_fstat_r+0x1c>
 800ebda:	682b      	ldr	r3, [r5, #0]
 800ebdc:	b103      	cbz	r3, 800ebe0 <_fstat_r+0x1c>
 800ebde:	6023      	str	r3, [r4, #0]
 800ebe0:	bd38      	pop	{r3, r4, r5, pc}
 800ebe2:	bf00      	nop
 800ebe4:	20002a04 	.word	0x20002a04

0800ebe8 <_isatty_r>:
 800ebe8:	b538      	push	{r3, r4, r5, lr}
 800ebea:	4d06      	ldr	r5, [pc, #24]	; (800ec04 <_isatty_r+0x1c>)
 800ebec:	2300      	movs	r3, #0
 800ebee:	4604      	mov	r4, r0
 800ebf0:	4608      	mov	r0, r1
 800ebf2:	602b      	str	r3, [r5, #0]
 800ebf4:	f7f2 ff69 	bl	8001aca <_isatty>
 800ebf8:	1c43      	adds	r3, r0, #1
 800ebfa:	d102      	bne.n	800ec02 <_isatty_r+0x1a>
 800ebfc:	682b      	ldr	r3, [r5, #0]
 800ebfe:	b103      	cbz	r3, 800ec02 <_isatty_r+0x1a>
 800ec00:	6023      	str	r3, [r4, #0]
 800ec02:	bd38      	pop	{r3, r4, r5, pc}
 800ec04:	20002a04 	.word	0x20002a04

0800ec08 <_sbrk_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4d06      	ldr	r5, [pc, #24]	; (800ec24 <_sbrk_r+0x1c>)
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	4604      	mov	r4, r0
 800ec10:	4608      	mov	r0, r1
 800ec12:	602b      	str	r3, [r5, #0]
 800ec14:	f7f2 ff72 	bl	8001afc <_sbrk>
 800ec18:	1c43      	adds	r3, r0, #1
 800ec1a:	d102      	bne.n	800ec22 <_sbrk_r+0x1a>
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	b103      	cbz	r3, 800ec22 <_sbrk_r+0x1a>
 800ec20:	6023      	str	r3, [r4, #0]
 800ec22:	bd38      	pop	{r3, r4, r5, pc}
 800ec24:	20002a04 	.word	0x20002a04

0800ec28 <__assert_func>:
 800ec28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec2a:	4614      	mov	r4, r2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	4b09      	ldr	r3, [pc, #36]	; (800ec54 <__assert_func+0x2c>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4605      	mov	r5, r0
 800ec34:	68d8      	ldr	r0, [r3, #12]
 800ec36:	b14c      	cbz	r4, 800ec4c <__assert_func+0x24>
 800ec38:	4b07      	ldr	r3, [pc, #28]	; (800ec58 <__assert_func+0x30>)
 800ec3a:	9100      	str	r1, [sp, #0]
 800ec3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec40:	4906      	ldr	r1, [pc, #24]	; (800ec5c <__assert_func+0x34>)
 800ec42:	462b      	mov	r3, r5
 800ec44:	f000 f844 	bl	800ecd0 <fiprintf>
 800ec48:	f000 f854 	bl	800ecf4 <abort>
 800ec4c:	4b04      	ldr	r3, [pc, #16]	; (800ec60 <__assert_func+0x38>)
 800ec4e:	461c      	mov	r4, r3
 800ec50:	e7f3      	b.n	800ec3a <__assert_func+0x12>
 800ec52:	bf00      	nop
 800ec54:	200000e4 	.word	0x200000e4
 800ec58:	0800f41f 	.word	0x0800f41f
 800ec5c:	0800f42c 	.word	0x0800f42c
 800ec60:	0800f45a 	.word	0x0800f45a

0800ec64 <_calloc_r>:
 800ec64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec66:	fba1 2402 	umull	r2, r4, r1, r2
 800ec6a:	b94c      	cbnz	r4, 800ec80 <_calloc_r+0x1c>
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	9201      	str	r2, [sp, #4]
 800ec70:	f7ff f94c 	bl	800df0c <_malloc_r>
 800ec74:	9a01      	ldr	r2, [sp, #4]
 800ec76:	4605      	mov	r5, r0
 800ec78:	b930      	cbnz	r0, 800ec88 <_calloc_r+0x24>
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	b003      	add	sp, #12
 800ec7e:	bd30      	pop	{r4, r5, pc}
 800ec80:	220c      	movs	r2, #12
 800ec82:	6002      	str	r2, [r0, #0]
 800ec84:	2500      	movs	r5, #0
 800ec86:	e7f8      	b.n	800ec7a <_calloc_r+0x16>
 800ec88:	4621      	mov	r1, r4
 800ec8a:	f7fe f96d 	bl	800cf68 <memset>
 800ec8e:	e7f4      	b.n	800ec7a <_calloc_r+0x16>

0800ec90 <__ascii_mbtowc>:
 800ec90:	b082      	sub	sp, #8
 800ec92:	b901      	cbnz	r1, 800ec96 <__ascii_mbtowc+0x6>
 800ec94:	a901      	add	r1, sp, #4
 800ec96:	b142      	cbz	r2, 800ecaa <__ascii_mbtowc+0x1a>
 800ec98:	b14b      	cbz	r3, 800ecae <__ascii_mbtowc+0x1e>
 800ec9a:	7813      	ldrb	r3, [r2, #0]
 800ec9c:	600b      	str	r3, [r1, #0]
 800ec9e:	7812      	ldrb	r2, [r2, #0]
 800eca0:	1e10      	subs	r0, r2, #0
 800eca2:	bf18      	it	ne
 800eca4:	2001      	movne	r0, #1
 800eca6:	b002      	add	sp, #8
 800eca8:	4770      	bx	lr
 800ecaa:	4610      	mov	r0, r2
 800ecac:	e7fb      	b.n	800eca6 <__ascii_mbtowc+0x16>
 800ecae:	f06f 0001 	mvn.w	r0, #1
 800ecb2:	e7f8      	b.n	800eca6 <__ascii_mbtowc+0x16>

0800ecb4 <__ascii_wctomb>:
 800ecb4:	b149      	cbz	r1, 800ecca <__ascii_wctomb+0x16>
 800ecb6:	2aff      	cmp	r2, #255	; 0xff
 800ecb8:	bf85      	ittet	hi
 800ecba:	238a      	movhi	r3, #138	; 0x8a
 800ecbc:	6003      	strhi	r3, [r0, #0]
 800ecbe:	700a      	strbls	r2, [r1, #0]
 800ecc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ecc4:	bf98      	it	ls
 800ecc6:	2001      	movls	r0, #1
 800ecc8:	4770      	bx	lr
 800ecca:	4608      	mov	r0, r1
 800eccc:	4770      	bx	lr
	...

0800ecd0 <fiprintf>:
 800ecd0:	b40e      	push	{r1, r2, r3}
 800ecd2:	b503      	push	{r0, r1, lr}
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	ab03      	add	r3, sp, #12
 800ecd8:	4805      	ldr	r0, [pc, #20]	; (800ecf0 <fiprintf+0x20>)
 800ecda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecde:	6800      	ldr	r0, [r0, #0]
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	f7ff fd45 	bl	800e770 <_vfiprintf_r>
 800ece6:	b002      	add	sp, #8
 800ece8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecec:	b003      	add	sp, #12
 800ecee:	4770      	bx	lr
 800ecf0:	200000e4 	.word	0x200000e4

0800ecf4 <abort>:
 800ecf4:	b508      	push	{r3, lr}
 800ecf6:	2006      	movs	r0, #6
 800ecf8:	f000 f82c 	bl	800ed54 <raise>
 800ecfc:	2001      	movs	r0, #1
 800ecfe:	f7f2 fe85 	bl	8001a0c <_exit>

0800ed02 <_raise_r>:
 800ed02:	291f      	cmp	r1, #31
 800ed04:	b538      	push	{r3, r4, r5, lr}
 800ed06:	4604      	mov	r4, r0
 800ed08:	460d      	mov	r5, r1
 800ed0a:	d904      	bls.n	800ed16 <_raise_r+0x14>
 800ed0c:	2316      	movs	r3, #22
 800ed0e:	6003      	str	r3, [r0, #0]
 800ed10:	f04f 30ff 	mov.w	r0, #4294967295
 800ed14:	bd38      	pop	{r3, r4, r5, pc}
 800ed16:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ed18:	b112      	cbz	r2, 800ed20 <_raise_r+0x1e>
 800ed1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed1e:	b94b      	cbnz	r3, 800ed34 <_raise_r+0x32>
 800ed20:	4620      	mov	r0, r4
 800ed22:	f000 f831 	bl	800ed88 <_getpid_r>
 800ed26:	462a      	mov	r2, r5
 800ed28:	4601      	mov	r1, r0
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed30:	f000 b818 	b.w	800ed64 <_kill_r>
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d00a      	beq.n	800ed4e <_raise_r+0x4c>
 800ed38:	1c59      	adds	r1, r3, #1
 800ed3a:	d103      	bne.n	800ed44 <_raise_r+0x42>
 800ed3c:	2316      	movs	r3, #22
 800ed3e:	6003      	str	r3, [r0, #0]
 800ed40:	2001      	movs	r0, #1
 800ed42:	e7e7      	b.n	800ed14 <_raise_r+0x12>
 800ed44:	2400      	movs	r4, #0
 800ed46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	4798      	blx	r3
 800ed4e:	2000      	movs	r0, #0
 800ed50:	e7e0      	b.n	800ed14 <_raise_r+0x12>
	...

0800ed54 <raise>:
 800ed54:	4b02      	ldr	r3, [pc, #8]	; (800ed60 <raise+0xc>)
 800ed56:	4601      	mov	r1, r0
 800ed58:	6818      	ldr	r0, [r3, #0]
 800ed5a:	f7ff bfd2 	b.w	800ed02 <_raise_r>
 800ed5e:	bf00      	nop
 800ed60:	200000e4 	.word	0x200000e4

0800ed64 <_kill_r>:
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	4d07      	ldr	r5, [pc, #28]	; (800ed84 <_kill_r+0x20>)
 800ed68:	2300      	movs	r3, #0
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	4608      	mov	r0, r1
 800ed6e:	4611      	mov	r1, r2
 800ed70:	602b      	str	r3, [r5, #0]
 800ed72:	f7f2 fe3b 	bl	80019ec <_kill>
 800ed76:	1c43      	adds	r3, r0, #1
 800ed78:	d102      	bne.n	800ed80 <_kill_r+0x1c>
 800ed7a:	682b      	ldr	r3, [r5, #0]
 800ed7c:	b103      	cbz	r3, 800ed80 <_kill_r+0x1c>
 800ed7e:	6023      	str	r3, [r4, #0]
 800ed80:	bd38      	pop	{r3, r4, r5, pc}
 800ed82:	bf00      	nop
 800ed84:	20002a04 	.word	0x20002a04

0800ed88 <_getpid_r>:
 800ed88:	f7f2 be28 	b.w	80019dc <_getpid>

0800ed8c <_init>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	bf00      	nop
 800ed90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed92:	bc08      	pop	{r3}
 800ed94:	469e      	mov	lr, r3
 800ed96:	4770      	bx	lr

0800ed98 <_fini>:
 800ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9a:	bf00      	nop
 800ed9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9e:	bc08      	pop	{r3}
 800eda0:	469e      	mov	lr, r3
 800eda2:	4770      	bx	lr
